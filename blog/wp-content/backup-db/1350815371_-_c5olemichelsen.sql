-- MySQL dump 10.13  Distrib 5.1.63, for debian-linux-gnu (i486)
--
-- Host: localhost    Database: c5olemichelsen
-- ------------------------------------------------------
-- Server version	5.1.63-0ubuntu0.10.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ole_commentmeta`
--

DROP TABLE IF EXISTS `ole_commentmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=43211 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_commentmeta`
--

LOCK TABLES `ole_commentmeta` WRITE;
/*!40000 ALTER TABLE `ole_commentmeta` DISABLE KEYS */;
INSERT INTO `ole_commentmeta` VALUES (26,19,'akismet_history','a:4:{s:4:\"time\";s:12:\"1312549182.8\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(27,26,'akismet_result','false'),(28,26,'akismet_history','a:4:{s:4:\"time\";s:13:\"1312561976.42\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(29,26,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"27\";s:14:\"comment_author\";s:4:\"zaia\";s:20:\"comment_author_email\";s:21:\"zaia@sterlinginet.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:352:\"Yes, I have UserIdentity and UserPrinciple classes.  The compiler request to add get as following:\r\npublic static class UserContext \r\n    {\r\n        public static UserPrincipal User{ get{ return (UserPrincipal)User;} }\r\n        public static UserIdentity Identity { get { return (UserIdentity)User.Identity; } }\r\n    }\r\nThen it compiles.\r\nThanks,\r\nZaia\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"64.134.227.90\";s:10:\"user_agent\";s:63:\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\";s:8:\"referrer\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"zaia\";s:10:\"POST_email\";s:21:\"zaia@sterlinginet.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:352:\"Yes, I have UserIdentity and UserPrinciple classes.  The compiler request to add get as following:\r\npublic static class UserContext \r\n    {\r\n        public static UserPrincipal User{ get{ return (UserPrincipal)User;} }\r\n        public static UserIdentity Identity { get { return (UserIdentity)User.Identity; } }\r\n    }\r\nThen it compiles.\r\nThanks,\r\nZaia\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"27\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"81cd7e6eca\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:11:\"HTTP_ACCEPT\";s:37:\"text/html, application/xhtml+xml, */*\";s:12:\"HTTP_REFERER\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-US\";s:15:\"HTTP_USER_AGENT\";s:63:\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"564\";s:15:\"HTTP_CONNECTION\";s:10:\"Keep-Alive\";s:18:\"HTTP_CACHE_CONTROL\";s:8:\"no-cache\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"64.134.227.90\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"52375\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1312561964\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(406,151,'akismet_result','false'),(407,151,'akismet_history','a:4:{s:4:\"time\";s:13:\"1318112734.52\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(408,151,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"247\";s:14:\"comment_author\";s:5:\"Aaron\";s:20:\"comment_author_email\";s:20:\"aarone@codevalue.net\";s:18:\"comment_author_url\";s:13:\"codevalue.net\";s:15:\"comment_content\";s:30:\"Thanks for an interesting post\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"99.237.137.37\";s:10:\"user_agent\";s:104:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.6 (KHTML, like Gecko) Chrome/16.0.899.0 Safari/535.6\";s:8:\"referrer\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:5:\"Aaron\";s:10:\"POST_email\";s:20:\"aarone@codevalue.net\";s:8:\"POST_url\";s:13:\"codevalue.net\";s:12:\"POST_comment\";s:30:\"Thanks for an interesting post\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"247\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"88ccb49b78\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"188\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:104:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.6 (KHTML, like Gecko) Chrome/16.0.899.0 Safari/535.6\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"99.237.137.37\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"60901\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1318112720\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(409,151,'akismet_history','a:4:{s:4:\"time\";s:13:\"1318142124.12\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(1220,427,'akismet_result','false'),(1221,427,'akismet_history','a:4:{s:4:\"time\";s:13:\"1323895828.63\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(1222,427,'akismet_as_submitted','a:58:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:4:\"Erik\";s:20:\"comment_author_email\";s:20:\"smets.erik@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:66:\"I love it. Been looking for this a long time. Thank you very much.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"78.29.194.141\";s:10:\"user_agent\";s:79:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0) Gecko/20100101 Firefox/9.0\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"Erik\";s:10:\"POST_email\";s:20:\"smets.erik@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:66:\"I love it. Been looking for this a long time. Thank you very much.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"610149254c\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:79:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0) Gecko/20100101 Firefox/9.0\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-us,en;q=0.5\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:14:\"CONTENT_LENGTH\";s:3:\"209\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"78.29.194.141\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"51476\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1323895815\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(1235,427,'akismet_history','a:4:{s:4:\"time\";s:13:\"1323941062.32\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(1533,531,'akismet_result','false'),(1534,531,'akismet_history','a:4:{s:4:\"time\";s:13:\"1325012078.19\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(1535,531,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"277\";s:14:\"comment_author\";s:14:\"Richard Wrench\";s:20:\"comment_author_email\";s:17:\"rwrench@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:363:\"Very nice! - just what I was looking for.  I added a Total property in the Group class - converted to VB.  I think -\r\n  public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\nshould be \r\n\r\n  public class Group<K, T>\r\n\r\nbased on the example code    select new Group<string, Book> { Key = g.Key, Values = g };\r\nRegards\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:10:\"38.68.1.66\";s:10:\"user_agent\";s:105:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7\";s:8:\"referrer\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:14:\"Richard Wrench\";s:10:\"POST_email\";s:17:\"rwrench@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:363:\"Very nice! - just what I was looking for.  I added a Total property in the Group class - converted to VB.  I think -\r\n  public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\nshould be \r\n\r\n  public class Group<K, T>\r\n\r\nbased on the example code    select new Group<string, Book> { Key = g.Key, Values = g };\r\nRegards\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"277\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"f40419f9c2\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"602\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:105:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:10:\"38.68.1.66\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"59178\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1325012063\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(1536,531,'akismet_history','a:4:{s:4:\"time\";s:13:\"1325012650.01\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(1830,627,'akismet_result','false'),(1831,627,'akismet_history','a:4:{s:4:\"time\";s:12:\"1325727138.5\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(1832,627,'akismet_as_submitted','a:57:{s:15:\"comment_post_ID\";s:2:\"27\";s:14:\"comment_author\";s:12:\"Al Delhierro\";s:20:\"comment_author_email\";s:20:\"Gronert137@gmail.com\";s:18:\"comment_author_url\";s:28:\"http://www.myfav-coffee1.com\";s:15:\"comment_content\";s:188:\"Howdy. Just would like to leave a swift statement and question where you gathered your blog model I might be starting on own blogging site and tremendously appreciate your personal design.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"116.66.206.189\";s:10:\"user_agent\";s:112:\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)\";s:8:\"referrer\";s:23:\"http://ole.michelsen.dk\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:11:\"POST_author\";s:12:\"Al Delhierro\";s:10:\"POST_email\";s:20:\"Gronert137@gmail.com\";s:8:\"POST_url\";s:28:\"http://www.myfav-coffee1.com\";s:12:\"POST_comment\";s:188:\"Howdy. Just would like to leave a swift statement and question where you gathered your blog model I might be starting on own blogging site and tremendously appreciate your personal design.\";s:11:\"POST_submit\";s:14:\"Submit Comment\";s:20:\"POST_comment_post_ID\";s:2:\"27\";s:19:\"POST_comment_parent\";s:1:\"0\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:23:\"http://ole.michelsen.dk\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:1:\"*\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:15:\"HTTP_USER_AGENT\";s:112:\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"416\";s:15:\"HTTP_X_PROXY_ID\";s:10:\"2023057646\";s:20:\"HTTP_X_FORWARDED_FOR\";s:14:\"109.169.57.136\";s:8:\"HTTP_VIA\";s:39:\"1.1 116.66.206.189 (Mikrotik HttpProxy)\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"116.66.206.189\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"33312\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1325727127\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(1839,630,'akismet_result','false'),(1840,630,'akismet_history','a:4:{s:4:\"time\";s:13:\"1325743646.55\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(1841,630,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"27\";s:14:\"comment_author\";s:5:\"Craig\";s:20:\"comment_author_email\";s:18:\"craig@cdlit.com.au\";s:18:\"comment_author_url\";s:16:\"www.cdlit.com.au\";s:15:\"comment_content\";s:251:\"zaia and Ole Michelsen,\r\n\r\nI was also having problems without the get and set on the wrapper classes, but know I have a problem saying the function is recursive on all paths.\r\n\r\nAny ideas, or any chance a code version could be posted?\r\n\r\nCheers\r\nCraig\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"101.172.24.250\";s:10:\"user_agent\";s:98:\"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7\";s:8:\"referrer\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:5:\"Craig\";s:10:\"POST_email\";s:18:\"craig@cdlit.com.au\";s:8:\"POST_url\";s:16:\"www.cdlit.com.au\";s:12:\"POST_comment\";s:251:\"zaia and Ole Michelsen,\r\n\r\nI was also having problems without the get and set on the wrapper classes, but know I have a problem saying the function is recursive on all paths.\r\n\r\nAny ideas, or any chance a code version could be posted?\r\n\r\nCheers\r\nCraig\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"27\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"9b9777b3ba\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"445\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:98:\"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:78:\"http://ole.michelsen.dk/blog/custom-membershipprovider-principal-and-identity/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:26:\"en-GB,en-US;q=0.8,en;q=0.6\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"101.172.24.250\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:4:\"2338\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1325743634\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(1851,630,'akismet_history','a:4:{s:4:\"time\";s:13:\"1325755382.73\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(1852,627,'akismet_history','a:4:{s:4:\"time\";s:13:\"1325755385.25\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33331,11106,'akismet_result','false'),(33332,11106,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339180280.85\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33333,11106,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"277\";s:14:\"comment_author\";s:11:\"Phil Saxton\";s:20:\"comment_author_email\";s:23:\"psaxton@centershift.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:691:\"Including your <code>tbody</code> tags within the outer <code>foreach</code> loop will allow for html grouping within the table as well per http://www.w3.org/TR/html5/the-table-element.html#the-table-element and http://www.w3.org/TR/html4/struct/tables.html#h-11.5 .  This can then be used to preserve grouping when used with client side sorting, such as jQuery.TableSort with very little modification.\r\ni.e.<pre lang=\"csharp\" line=\"12\">@foreach (var group in Model)\r\n<tbody>\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n</tbody>\r\n}</pre>\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"67.137.121.106\";s:10:\"user_agent\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5\";s:8:\"referrer\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:11:\"Phil Saxton\";s:10:\"POST_email\";s:23:\"psaxton@centershift.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:691:\"Including your <code>tbody</code> tags within the outer <code>foreach</code> loop will allow for html grouping within the table as well per http://www.w3.org/TR/html5/the-table-element.html#the-table-element and http://www.w3.org/TR/html4/struct/tables.html#h-11.5 .  This can then be used to preserve grouping when used with client side sorting, such as jQuery.TableSort with very little modification.\r\ni.e.<pre lang=\"csharp\" line=\"12\">@foreach (var group in Model)\r\n<tbody>\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n</tbody>\r\n}</pre>\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"277\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"d61b01bd2c\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:4:\"1069\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"67.137.121.106\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"53757\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1339180276\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2011-11-23 12:12:53\";}'),(33334,11107,'akismet_result','false'),(33335,11107,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339180378.62\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33336,11107,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"277\";s:14:\"comment_author\";s:11:\"Phil Saxton\";s:20:\"comment_author_email\";s:23:\"psaxton@centershift.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:130:\"Lines 13 and 20 in the previous comment should be &lt;tbody&gt; and &lt;/tbody&gt; respectively. (Preview would have been nice :))\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"67.137.121.106\";s:10:\"user_agent\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5\";s:8:\"referrer\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:11:\"Phil Saxton\";s:10:\"POST_email\";s:23:\"psaxton@centershift.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:130:\"Lines 13 and 20 in the previous comment should be &lt;tbody&gt; and &lt;/tbody&gt; respectively. (Preview would have been nice :))\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"277\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"d61b01bd2c\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"310\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:61:\"http://ole.michelsen.dk/blog/grouping-data-with-linq-and-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"67.137.121.106\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"51517\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1339180376\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2011-11-23 12:12:53\";}'),(33337,11106,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339189014.73\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33338,11107,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339189020.05\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(35158,11709,'akismet_result','false'),(35159,11709,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341843893.23\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(35160,11709,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:3:\"340\";s:14:\"comment_author\";s:4:\"Ralf\";s:20:\"comment_author_email\";s:20:\"ralf.hermanns@gmx.de\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:335:\"Die genau gleiche Syntax der Aggregatrangfunktion gab es schon seit SQL Server 2012, da wurde aber nicht die LAUFENDE Summe sondern immer das Total für die Partition des OVER-Abschnittes zurückgegeben.\r\nIch habe selber noch keinen SQL Server 2012 benutzt - ist es wirklich so dass die gleiche Syntax jetzt andere Ergebnisse erzeugt??\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"91.102.136.106\";s:10:\"user_agent\";s:166:\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)\";s:8:\"referrer\";s:214:\"http://translate.googleusercontent.com/translate_c?hl=de&langpair=en%7Cde&rurl=translate.google.de&u=http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/&usg=ALkJrhhxmcZScDR9e9XbTrHxRrLAyxpYLA\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"Ralf\";s:10:\"POST_email\";s:20:\"ralf.hermanns@gmx.de\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:335:\"Die genau gleiche Syntax der Aggregatrangfunktion gab es schon seit SQL Server 2012, da wurde aber nicht die LAUFENDE Summe sondern immer das Total für die Partition des OVER-Abschnittes zurückgegeben.\r\nIch habe selber noch keinen SQL Server 2012 benutzt - ist es wirklich so dass die gleiche Syntax jetzt andere Ergebnisse erzeugt??\";s:11:\"POST_submit\";s:19:\"Geben Sie Anmerkung\";s:20:\"POST_comment_post_ID\";s:3:\"340\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"8cd9aaeb15\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:11:\"HTTP_ACCEPT\";s:267:\"image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */*\";s:12:\"HTTP_REFERER\";s:214:\"http://translate.googleusercontent.com/translate_c?hl=de&langpair=en%7Cde&rurl=translate.google.de&u=http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/&usg=ALkJrhhxmcZScDR9e9XbTrHxRrLAyxpYLA\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:2:\"de\";s:15:\"HTTP_USER_AGENT\";s:166:\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"502\";s:11:\"HTTP_PRAGMA\";s:8:\"no-cache\";s:18:\"HTTP_CACHE_CONTROL\";s:14:\"max-age=259200\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"91.102.136.106\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"36996\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1341843888\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-06 22:05:56\";}'),(35161,11710,'akismet_result','false'),(35162,11710,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341844052.75\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(35163,11710,'akismet_as_submitted','a:60:{s:15:\"comment_post_ID\";s:3:\"340\";s:14:\"comment_author\";s:4:\"Ralf\";s:20:\"comment_author_email\";s:20:\"ralf.hermanns@gmx.de\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:477:\"Oh my, I am sorry, I was shown this page through a language translator and did not realize it was in English. Here the translated remark:\r\nThe same function did exist since SQL 2005, you could issue a SUM() OVER (partition / order). The result was a total for all rows in the partition, but the same on every row (no running total, just... total)\r\nDid the beaviour really change? Does the same syntax generate a different in SQL 2012?? I never used one so I could not test yet.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"91.102.136.106\";s:10:\"user_agent\";s:166:\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)\";s:8:\"referrer\";s:88:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/#comment-11709\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"Ralf\";s:10:\"POST_email\";s:20:\"ralf.hermanns@gmx.de\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:477:\"Oh my, I am sorry, I was shown this page through a language translator and did not realize it was in English. Here the translated remark:\r\nThe same function did exist since SQL 2005, you could issue a SUM() OVER (partition / order). The result was a total for all rows in the partition, but the same on every row (no running total, just... total)\r\nDid the beaviour really change? Does the same syntax generate a different in SQL 2012?? I never used one so I could not test yet.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"340\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"8cd9aaeb15\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:11:\"HTTP_ACCEPT\";s:267:\"image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-ms-application, application/x-ms-xbap, application/vnd.ms-xpsdocument, application/xaml+xml, */*\";s:12:\"HTTP_REFERER\";s:88:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/#comment-11709\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:2:\"de\";s:15:\"HTTP_USER_AGENT\";s:166:\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"659\";s:11:\"HTTP_PRAGMA\";s:8:\"no-cache\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:18:\"HTTP_CACHE_CONTROL\";s:14:\"max-age=259200\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"91.102.136.106\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"48604\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1341844046\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-06 22:05:56\";}'),(35164,11710,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341844468.92\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(35165,11711,'akismet_result','false'),(35166,11711,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341844726.26\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:12:\"olemichelsen\";}'),(35167,11711,'akismet_as_submitted','a:68:{s:15:\"comment_post_ID\";s:3:\"340\";s:14:\"comment_author\";s:13:\"Ole Michelsen\";s:20:\"comment_author_email\";s:16:\"ole@michelsen.dk\";s:18:\"comment_author_url\";s:23:\"http://ole.michelsen.dk\";s:15:\"comment_content\";s:312:\"Hi Ralf, yes this is true, but using SUM() with OVER(PARTITION) will not give you a <em>running total</em>. The running total is the sum of all previous lines including the current one. Your version gives the sum for all rows. Try to compare the test results in my script with your version to see the difference.\";s:14:\"comment_parent\";s:5:\"11710\";s:7:\"user_ID\";s:1:\"2\";s:7:\"user_ip\";s:9:\"10.45.4.9\";s:10:\"user_agent\";s:83:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1\";s:8:\"referrer\";s:79:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?comment_status=approved\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:9:\"user_role\";s:13:\"administrator\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:22:\"POST_newcomment_author\";s:0:\"\";s:28:\"POST_newcomment_author_email\";s:0:\"\";s:26:\"POST_newcomment_author_url\";s:0:\"\";s:12:\"POST_user_ID\";s:1:\"2\";s:11:\"POST_action\";s:15:\"replyto-comment\";s:15:\"POST_comment_ID\";s:5:\"11710\";s:20:\"POST_comment_post_ID\";s:3:\"340\";s:11:\"POST_status\";s:0:\"\";s:13:\"POST_position\";s:2:\"-1\";s:13:\"POST_checkbox\";s:1:\"1\";s:9:\"POST_mode\";s:6:\"detail\";s:32:\"POST__ajax_nonce-replyto-comment\";s:10:\"97c308d9bb\";s:32:\"POST__wp_unfiltered_html_comment\";s:10:\"7597963652\";s:12:\"POST_content\";s:312:\"Hi Ralf, yes this is true, but using SUM() with OVER(PARTITION) will not give you a <em>running total</em>. The running total is the sum of all previous lines including the current one. Your version gives the sum for all rows. Try to compare the test results in my script with your version to see the difference.\";s:7:\"POST_id\";s:3:\"340\";s:21:\"POST_comments_listing\";s:8:\"approved\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URL\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URI\";s:52:\"http://ole.michelsen.dk/blog/wp-admin/admin-ajax.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:83:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:12:\"CONTENT_TYPE\";s:48:\"application/x-www-form-urlencoded; charset=UTF-8\";s:21:\"HTTP_X_REQUESTED_WITH\";s:14:\"XMLHttpRequest\";s:12:\"HTTP_REFERER\";s:79:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?comment_status=approved\";s:14:\"CONTENT_LENGTH\";s:3:\"625\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:11:\"HTTP_PRAGMA\";s:8:\"no-cache\";s:18:\"HTTP_CACHE_CONTROL\";s:8:\"no-cache\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:9:\"10.45.4.9\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:58:\"/var/www/michelsen.dk/web/ole/blog/wp-admin/admin-ajax.php\";s:11:\"REMOTE_PORT\";s:5:\"61795\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:8:\"PHP_SELF\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:12:\"REQUEST_TIME\";s:10:\"1341844722\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-06 22:05:56\";}'),(35168,11709,'akismet_history','a:4:{s:4:\"time\";s:12:\"1341844733.2\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33918,11300,'akismet_result','false'),(33919,11300,'akismet_history','a:4:{s:4:\"time\";s:13:\"1340113259.48\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33920,11300,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:40:\"Quellcode einer Webseite &laquo; iAppMag\";s:18:\"comment_author_url\";s:55:\"http://www.iappmag.de/2012/06/quellcode-einer-webseite/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:214:\"[...] einer Webseite zu sehen, mit dem iPad oder dem iPhone ist dies jetzt auch möglich. Der Entwickler Ole Michelsen hat ein kleines Script entwickelt, wodurch man ganz einfach den Quellcode anzeigen lassen [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:12:\"84.19.175.41\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"320\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:12:\"84.19.175.41\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"43172\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1340113249\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33921,11300,'akismet_history','a:4:{s:4:\"time\";s:13:\"1340114468.18\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34876,11617,'akismet_result','false'),(34877,11617,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341446507.38\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(34878,11617,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:3:\"Ben\";s:20:\"comment_author_email\";s:23:\"troubadour2404@yahoo.fr\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:331:\"Hello! \r\nI just wanted to say thanks for this neat piece of code : I\'ve been trying many apps but none of them were effective. I finally found your page and followed the very simple tutorial. Now, the viewing of the source code is made easier with the standard colors and it\'s pretty quick. Thanks for your time and efforts. \r\nBen.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"126.226.205.87\";s:10:\"user_agent\";s:134:\"Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:3:\"Ben\";s:10:\"POST_email\";s:23:\"troubadour2404@yahoo.fr\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:332:\"Hello! \r\nI just wanted to say thanks for this neat piece of code : I\'ve been trying many apps but none of them were effective. I finally found your page and followed the very simple tutorial. Now, the viewing of the source code is made easier with the standard colors and it\'s pretty quick. Thanks for your time and efforts. \r\nBen. \";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"dfdb9ad43d\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:134:\"Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3\";s:14:\"CONTENT_LENGTH\";s:3:\"495\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"fr-fr\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"126.226.205.87\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"57736\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1341446502\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(36705,12202,'akismet_history','a:4:{s:4:\"time\";s:13:\"1343898200.37\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33700,11224,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339737762.94\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33685,11224,'akismet_result','false'),(33686,11224,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339732325.48\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33687,11224,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:71:\"Jasonmcdermott &raquo; On &#8216;View Source&#8217; and mass creativity\";s:18:\"comment_author_url\";s:50:\"http://www.jasonmcdermott.net/2012/06/view-source/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:213:\"[...] — there is such a thing as view source on the iPad, courtesy of some javascript magic from Ole Michelson, who says; As a web developer I’m frequently looking at the source code of various websites. [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:13:\"173.254.28.18\";s:10:\"user_agent\";s:48:\"The Incutio XML-RPC PHP Library -- WordPress/3.4\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:48:\"The Incutio XML-RPC PHP Library -- WordPress/3.4\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"315\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"173.254.28.18\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"36493\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1339732318\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33648,11211,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339692561.18\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(36630,12202,'akismet_result','false'),(36631,12202,'akismet_history','a:4:{s:4:\"time\";s:13:\"1343812196.73\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(36632,12202,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:60:\"在手機和平板上觀看網站原始碼 | 超級電腦網\";s:18:\"comment_author_url\";s:38:\"http://s3131212.tw/mobile-view-source/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:147:\"[...] 程式開發:http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/ 註:如果對這個程式有興趣，很好奇server-side [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:13:\"31.170.160.76\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.4.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.4.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"303\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"31.170.160.76\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"49502\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1343812188\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33603,11196,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339588887.45\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33596,11195,'akismet_result','false'),(33597,11195,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339587798.61\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33598,11195,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:227:\"How to View Website Source Codes on iPad / iPhone [Quicktip] | Best Web Consulting company in Nashik, India with Creative and Professional Website Design, Content Management Systems, Wordpress Experts, Ecommerce SEO, and more..\";s:18:\"comment_author_url\";s:86:\"http://www.venkateshtech.com/how-to-view-website-source-codes-on-ipad-iphone-quicktip/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:205:\"[...] from your mobile device. Take note that the code you will be using will redirect you to the creator’s website, where the source is presented in highlighted syntax and clickable URL for easier [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:15:\"174.120.232.194\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.2.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.2.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"351\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:15:\"174.120.232.194\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"60245\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1339587792\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33599,11195,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339587879.43\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33600,11196,'akismet_result','false'),(33601,11196,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339588015.76\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33602,11196,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:75:\"How to View Website Source Codes on iPad / iPhone [Quicktip] | Android News\";s:18:\"comment_author_url\";s:103:\"http://www.androidfools.com/2012/android-news/how-to-view-website-source-codes-on-ipad-iphone-quicktip/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:209:\"[...] from your mobile device. Take note that the code you will be using will redirect you to the creator&#8217;s website, where the source is presented in highlighted syntax and clickable URL for easier [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:10:\"50.22.91.3\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"368\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:10:\"50.22.91.3\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"33340\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1339588009\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33591,11194,'akismet_result','false'),(33592,11194,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339585352.17\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(33593,11194,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:60:\"How to View Website Source Codes on iPad / iPhone [Quicktip]\";s:18:\"comment_author_url\";s:83:\"http://usefultips.org/how-to-view-website-source-codes-on-ipad-iphone-quicktip.html\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:205:\"[...] from your mobile device. Take note that the code you will be using will redirect you to the creator’s website, where the source is presented in highlighted syntax and clickable URL for easier [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"69.175.122.250\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"348\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"69.175.122.250\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"40641\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1339585344\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(33594,11194,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339586900.62\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(33595,11193,'akismet_history','a:4:{s:4:\"time\";s:13:\"1339586903.45\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34376,11415,'akismet_history','a:4:{s:4:\"time\";s:13:\"1340779575.27\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34377,10817,'akismet_history','a:4:{s:4:\"time\";s:13:\"1340779589.98\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34378,10269,'akismet_history','a:4:{s:4:\"time\";s:13:\"1340779603.25\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34906,11627,'akismet_result','false'),(34907,11627,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341488453.28\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(34908,11627,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:3:\"153\";s:14:\"comment_author\";s:3:\"Ich\";s:20:\"comment_author_email\";s:15:\"Ich@example.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:24:\"Brillant!!! Many thanks!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"213.128.122.2\";s:10:\"user_agent\";s:74:\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1\";s:8:\"referrer\";s:83:\"http://ole.michelsen.dk/blog/firefox-auto-login-with-windows-authentication-and-ad/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:83:\"http://ole.michelsen.dk/blog/firefox-auto-login-with-windows-authentication-and-ad/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:3:\"Ich\";s:10:\"POST_email\";s:15:\"Ich@example.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:24:\"Brillant!!! Many thanks!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"153\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"85d5359b4a\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:74:\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-us,en;q=0.5\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:12:\"HTTP_REFERER\";s:83:\"http://ole.michelsen.dk/blog/firefox-auto-login-with-windows-authentication-and-ad/\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:14:\"CONTENT_LENGTH\";s:3:\"170\";s:13:\"HTTP_X_TM_VIA\";s:29:\"1.1 ne-net-iwss01:8080 (IWSS)\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"213.128.122.2\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"21109\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1341488448\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2011-08-18 08:07:23\";}'),(34909,11627,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341489095.34\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(34914,11617,'akismet_history','a:4:{s:4:\"time\";s:13:\"1341489123.65\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(39248,13070,'akismet_history','a:4:{s:4:\"time\";s:13:\"1347298374.07\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(39239,13070,'akismet_result','false'),(39240,13070,'akismet_history','a:4:{s:4:\"time\";s:13:\"1347284993.62\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(39241,13070,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:7:\"Michael\";s:20:\"comment_author_email\";s:22:\"hw.dengxiong@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:40:\"It\'s really useful! Thank you very much!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"121.34.124.34\";s:10:\"user_agent\";s:102:\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:7:\"Michael\";s:10:\"POST_email\";s:22:\"hw.dengxiong@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:40:\"It\'s really useful! Thank you very much!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"7f6633dd96\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"194\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:102:\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"zh-CN,zh;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:23:\"GBK,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"121.34.124.34\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:4:\"2525\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1347284985\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(32467,10817,'akismet_result','false'),(32468,10817,'akismet_history','a:4:{s:4:\"time\";s:13:\"1337485003.13\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(32469,10817,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:89:\"iPhoneやAndroidでページのHTMLソースを表示する方法 | ミニミニ大作戦\";s:18:\"comment_author_url\";s:74:\"http://www.minimini-daisakusen.com/webcreate/iphond-androidhtmlsource.html\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:90:\"[...] 参考にしたのはこちらの記事。 View source on the iPad and iPhone [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"210.188.201.62\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.2\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"339\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"210.188.201.62\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"46860\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1337484994\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(41310,13766,'akismet_result','false'),(41311,13766,'akismet_history','a:4:{s:4:\"time\";s:13:\"1349195180.03\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(41312,13766,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"300\";s:14:\"comment_author\";s:4:\"Doug\";s:20:\"comment_author_email\";s:22:\"douglas.tarr@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:52:\"It\'d be great if you made this into a Nuget package.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"174.62.122.38\";s:10:\"user_agent\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4\";s:8:\"referrer\";s:91:\"http://ole.michelsen.dk/blog/bind-a-model-property-to-a-different-named-query-string-field/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:91:\"http://ole.michelsen.dk/blog/bind-a-model-property-to-a-different-named-query-string-field/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"Doug\";s:10:\"POST_email\";s:22:\"douglas.tarr@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:52:\"It\'d be great if you made this into a Nuget package.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"300\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"7d0e32b366\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"200\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:106:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:91:\"http://ole.michelsen.dk/blog/bind-a-model-property-to-a-different-named-query-string-field/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"174.62.122.38\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"23018\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1349195173\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-03-24 10:51:16\";}'),(41316,13766,'akismet_history','a:4:{s:4:\"time\";s:13:\"1349198004.51\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(38029,12665,'akismet_result','false'),(38030,12665,'akismet_history','a:4:{s:4:\"time\";s:13:\"1345466709.98\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(38031,12665,'akismet_as_submitted','a:62:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:16:\"David Giragosian\";s:20:\"comment_author_email\";s:21:\"dgiragosian@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:209:\"Ole, I am wondering if you are logging the source code that is rendered when I use your resource?If so, would you please use my email to respond, and I can explain further. \r\nThank you for your excellent work.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"143.111.80.31\";s:10:\"user_agent\";s:99:\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.79 Safari/537.1\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:16:\"David Giragosian\";s:10:\"POST_email\";s:21:\"dgiragosian@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:209:\"Ole, I am wondering if you are logging the source code that is rendered when I use your resource?If so, would you please use my email to respond, and I can explain further. \r\nThank you for your excellent work.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"5b2b84d936\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:99:\"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.79 Safari/537.1\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:14:\"CONTENT_LENGTH\";s:3:\"377\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:17:\"HTTP_X_IMFORWARDS\";s:2:\"20\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"143.111.80.31\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"48916\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1345466703\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(38038,12665,'akismet_history','a:4:{s:4:\"time\";s:13:\"1345471452.17\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(38039,12668,'akismet_result','false'),(38040,12668,'akismet_history','a:4:{s:4:\"time\";s:13:\"1345471488.66\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:12:\"olemichelsen\";}'),(38041,12668,'akismet_as_submitted','a:69:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:13:\"Ole Michelsen\";s:20:\"comment_author_email\";s:16:\"ole@michelsen.dk\";s:18:\"comment_author_url\";s:23:\"http://ole.michelsen.dk\";s:15:\"comment_content\";s:128:\"Hi David,\n\nNo, I am not logging anything from the posted requests. They are only sent to the server to be formatted for display.\";s:14:\"comment_parent\";s:5:\"12665\";s:7:\"user_ID\";s:1:\"2\";s:7:\"user_ip\";s:9:\"10.45.4.9\";s:10:\"user_agent\";s:83:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:14.0) Gecko/20100101 Firefox/14.0.1\";s:8:\"referrer\";s:71:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?p=68&approved=1\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:13:\"administrator\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:22:\"POST_newcomment_author\";s:0:\"\";s:28:\"POST_newcomment_author_email\";s:0:\"\";s:26:\"POST_newcomment_author_url\";s:0:\"\";s:12:\"POST_user_ID\";s:1:\"2\";s:11:\"POST_action\";s:15:\"replyto-comment\";s:15:\"POST_comment_ID\";s:5:\"12665\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:11:\"POST_status\";s:0:\"\";s:13:\"POST_position\";s:2:\"-1\";s:13:\"POST_checkbox\";s:1:\"1\";s:9:\"POST_mode\";s:6:\"detail\";s:32:\"POST__ajax_nonce-replyto-comment\";s:10:\"573815222f\";s:32:\"POST__wp_unfiltered_html_comment\";s:10:\"58f70da6bf\";s:12:\"POST_content\";s:128:\"Hi David,\n\nNo, I am not logging anything from the posted requests. They are only sent to the server to be formatted for display.\";s:7:\"POST_id\";s:2:\"68\";s:21:\"POST_comments_listing\";s:3:\"all\";s:6:\"POST_p\";s:2:\"68\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URL\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URI\";s:52:\"http://ole.michelsen.dk/blog/wp-admin/admin-ajax.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:83:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:14.0) Gecko/20100101 Firefox/14.0.1\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:12:\"CONTENT_TYPE\";s:48:\"application/x-www-form-urlencoded; charset=UTF-8\";s:21:\"HTTP_X_REQUESTED_WITH\";s:14:\"XMLHttpRequest\";s:12:\"HTTP_REFERER\";s:71:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?p=68&approved=1\";s:14:\"CONTENT_LENGTH\";s:3:\"433\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:11:\"HTTP_PRAGMA\";s:8:\"no-cache\";s:18:\"HTTP_CACHE_CONTROL\";s:8:\"no-cache\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:9:\"10.45.4.9\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:58:\"/var/www/michelsen.dk/web/ole/blog/wp-admin/admin-ajax.php\";s:11:\"REMOTE_PORT\";s:5:\"49690\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:8:\"PHP_SELF\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:12:\"REQUEST_TIME\";s:10:\"1345471483\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(32331,10771,'akismet_history','a:4:{s:4:\"time\";s:10:\"1337267389\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31898,10629,'akismet_as_submitted','a:68:{s:15:\"comment_post_ID\";s:3:\"247\";s:14:\"comment_author\";s:13:\"Ole Michelsen\";s:20:\"comment_author_email\";s:16:\"ole@michelsen.dk\";s:18:\"comment_author_url\";s:23:\"http://ole.michelsen.dk\";s:15:\"comment_content\";s:253:\"Hi Tim, I would suggest that you extend the TreeNode class to include either the URL or RouteData, that you need for creating links in the DisplayTemplate. I don\'t know what\'s wrong with your treeview styling, perhaps you need to apply some css classes?\";s:14:\"comment_parent\";s:5:\"10591\";s:7:\"user_ID\";s:1:\"2\";s:7:\"user_ip\";s:11:\"10.10.9.251\";s:10:\"user_agent\";s:81:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:12.0) Gecko/20100101 Firefox/12.0\";s:8:\"referrer\";s:72:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?p=247&approved=1\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:9:\"user_role\";s:13:\"administrator\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:22:\"POST_newcomment_author\";s:0:\"\";s:28:\"POST_newcomment_author_email\";s:0:\"\";s:26:\"POST_newcomment_author_url\";s:0:\"\";s:12:\"POST_user_ID\";s:1:\"2\";s:11:\"POST_action\";s:15:\"replyto-comment\";s:15:\"POST_comment_ID\";s:5:\"10591\";s:20:\"POST_comment_post_ID\";s:3:\"247\";s:11:\"POST_status\";s:0:\"\";s:13:\"POST_position\";s:2:\"-1\";s:13:\"POST_checkbox\";s:1:\"1\";s:9:\"POST_mode\";s:6:\"detail\";s:32:\"POST__ajax_nonce-replyto-comment\";s:10:\"38a460f399\";s:32:\"POST__wp_unfiltered_html_comment\";s:10:\"70d1b05651\";s:12:\"POST_content\";s:253:\"Hi Tim, I would suggest that you extend the TreeNode class to include either the URL or RouteData, that you need for creating links in the DisplayTemplate. I don\'t know what\'s wrong with your treeview styling, perhaps you need to apply some css classes?\";s:7:\"POST_id\";s:3:\"247\";s:21:\"POST_comments_listing\";s:3:\"all\";s:6:\"POST_p\";s:3:\"247\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URL\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URI\";s:52:\"http://ole.michelsen.dk/blog/wp-admin/admin-ajax.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:81:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:12.0) Gecko/20100101 Firefox/12.0\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:12:\"CONTENT_TYPE\";s:48:\"application/x-www-form-urlencoded; charset=UTF-8\";s:21:\"HTTP_X_REQUESTED_WITH\";s:14:\"XMLHttpRequest\";s:12:\"HTTP_REFERER\";s:72:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?p=247&approved=1\";s:14:\"CONTENT_LENGTH\";s:3:\"561\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:11:\"HTTP_PRAGMA\";s:8:\"no-cache\";s:18:\"HTTP_CACHE_CONTROL\";s:8:\"no-cache\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:11:\"10.10.9.251\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:58:\"/var/www/michelsen.dk/web/ole/blog/wp-admin/admin-ajax.php\";s:11:\"REMOTE_PORT\";s:5:\"64372\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:8:\"PHP_SELF\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:12:\"REQUEST_TIME\";s:10:\"1336383918\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(31895,10591,'akismet_history','a:4:{s:4:\"time\";s:13:\"1336383732.69\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31896,10629,'akismet_result','false'),(31897,10629,'akismet_history','a:4:{s:4:\"time\";s:13:\"1336383929.74\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31781,10591,'akismet_result','false'),(31782,10591,'akismet_history','a:4:{s:4:\"time\";s:13:\"1336159892.79\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(31783,10591,'akismet_as_submitted','a:62:{s:15:\"comment_post_ID\";s:3:\"247\";s:14:\"comment_author\";s:3:\"Tim\";s:20:\"comment_author_email\";s:16:\"tttbsn@gmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:512:\"Thanks for this post...!!! I\'ve been looking for something this simple..! Kudos to you for taking the time on this...!!\r\nI have 2 questions for you on it.... \r\nBased on your code here, how do you apply html.ActionLink or Url.Action to each menu item to define navigation? \r\nI have treeview styling built in. It works with your index page but when it goes to the Display_Template it loses the styling for treeview. Any idea why that would be happening?\r\n\r\nAgain, great job on this and thank you for your time.. :)\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"144.230.63.58\";s:10:\"user_agent\";s:102:\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19\";s:8:\"referrer\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:3:\"Tim\";s:10:\"POST_email\";s:16:\"tttbsn@gmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:512:\"Thanks for this post...!!! I\'ve been looking for something this simple..! Kudos to you for taking the time on this...!!\r\nI have 2 questions for you on it.... \r\nBased on your code here, how do you apply html.ActionLink or Url.Action to each menu item to define navigation? \r\nI have treeview styling built in. It works with your index page but when it goes to the Display_Template it loses the styling for treeview. Any idea why that would be happening?\r\n\r\nAgain, great job on this and thank you for your time.. :)\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"247\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"cb36f5598b\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"697\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:102:\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"Keep-Alive\";s:19:\"HTTP_X_BLUECOAT_VIA\";s:16:\"8728D22A9BB02884\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"144.230.63.58\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:4:\"2768\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1336159881\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(31699,10563,'akismet_history','a:4:{s:4:\"time\";s:13:\"1335936197.39\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31696,10563,'akismet_result','false'),(31697,10563,'akismet_history','a:4:{s:4:\"time\";s:13:\"1335933016.27\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(31698,10563,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:6:\"Steven\";s:20:\"comment_author_email\";s:14:\"sas@sasnet.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:140:\"Thanks so much. And totally easy. I went from my desktop to my devices in seconds! What a welcomed addition to mobile Safari! Excellent job.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"72.229.237.222\";s:10:\"user_agent\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:6:\"Steven\";s:10:\"POST_email\";s:14:\"sas@sasnet.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:140:\"Thanks so much. And totally easy. I went from my desktop to my devices in seconds! What a welcomed addition to mobile Safari! Excellent job.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"7922c14854\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:14:\"CONTENT_LENGTH\";s:3:\"283\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"72.229.237.222\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"54450\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1335933004\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(32180,10722,'akismet_result','false'),(32181,10722,'akismet_history','a:4:{s:4:\"time\";s:13:\"1336994632.42\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(32182,10722,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:3:\"247\";s:14:\"comment_author\";s:7:\"jgedean\";s:20:\"comment_author_email\";s:26:\"dean1981701112@hotmail.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:56:\"Thanks for this post!\r\nHow will I put it in the sitemap?\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"210.209.146.83\";s:10:\"user_agent\";s:109:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19\";s:8:\"referrer\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:7:\"jgedean\";s:10:\"POST_email\";s:26:\"dean1981701112@hotmail.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:56:\"Thanks for this post!\r\nHow will I put it in the sitemap?\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"247\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"bca6af16ea\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"217\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:109:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:86:\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:35:\"zh-TW,zh;q=0.8,en-US;q=0.6,en;q=0.4\";s:19:\"HTTP_ACCEPT_CHARSET\";s:13:\"UTF-8,*;q=0.5\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"210.209.146.83\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:4:\"4079\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1336994628\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-05-06 09:48:05\";}'),(31353,10445,'akismet_history','a:4:{s:4:\"time\";s:13:\"1334833236.12\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(32183,10722,'akismet_history','a:4:{s:4:\"time\";s:13:\"1336997679.77\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31337,10445,'akismet_result','false'),(31338,10445,'akismet_history','a:4:{s:4:\"time\";s:13:\"1334828997.53\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(31339,10445,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:12:\"Mark Perkins\";s:20:\"comment_author_email\";s:20:\"mark@allmarkedup.com\";s:18:\"comment_author_url\";s:22:\"http://allmarkedup.com\";s:15:\"comment_content\";s:313:\"Thanks for this. I made a similar bookmarklet called Snoopy (http://snoopy.allmarkedup.com/) a while ago that will give you highlighted source code (both \'actual\' and generated) on iOS browsers (without a server-side component), which may be of interest. You can\'t follow the links like you can on this though :-)\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:15:\"213.123.197.180\";s:10:\"user_agent\";s:116:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1096.1 Safari/536.6\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:12:\"Mark Perkins\";s:10:\"POST_email\";s:20:\"mark@allmarkedup.com\";s:8:\"POST_url\";s:22:\"http://allmarkedup.com\";s:12:\"POST_comment\";s:319:\"Thanks for this. I made a similar bookmarklet called Snoopy (http://snoopy.allmarkedup.com/) a while ago that will give you highlighted source code (both \'actual\' and generated) on iOS browsers (without a server-side component), which may be of interest. You can\'t follow the links like you can on this though :-)\r\n\r\n\r\n\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"69fdceeb8f\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"542\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:116:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1096.1 Safari/536.6\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:15:\"213.123.197.180\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"51714\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1334828986\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30778,10263,'akismet_result','false'),(30779,10263,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333193827.63\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30780,10263,'akismet_as_submitted','a:58:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:13:\"Mike Hessling\";s:20:\"comment_author_email\";s:17:\"mike@cherrypj.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:201:\"I agree, this is good stuff. Would you post the source? I\'d love to put this on my own server, rather than relying upon your continued good will (and wallet, you know--bandwidth could get out of hand).\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:12:\"69.140.1.208\";s:10:\"user_agent\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/534.50.2 (KHTML, like Gecko) Version/5.0.6 Safari/533.22.3\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:13:\"Mike Hessling\";s:10:\"POST_email\";s:17:\"mike@cherrypj.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:201:\"I agree, this is good stuff. Would you post the source? I\'d love to put this on my own server, rather than relying upon your continued good will (and wallet, you know--bandwidth could get out of hand).\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"387372cea2\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/534.50.2 (KHTML, like Gecko) Version/5.0.6 Safari/533.22.3\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:14:\"CONTENT_LENGTH\";s:3:\"364\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:12:\"69.140.1.208\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"46297\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333193815\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30781,10263,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333195560.94\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30782,10259,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333195563.85\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30762,10258,'akismet_history','a:4:{s:4:\"time\";s:10:\"1333179832\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30763,10251,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333179946.61\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30764,10252,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333179953.98\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30765,10254,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333180008.18\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30766,10259,'akismet_result','false'),(30767,10259,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333183719.62\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30768,10259,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:5:\"Ville\";s:20:\"comment_author_email\";s:18:\"vkaravir@gmail.com\";s:18:\"comment_author_url\";s:26:\"http://villekaravirta.com/\";s:15:\"comment_content\";s:42:\"Thanks for posting this, extremely useful!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:10:\"89.27.98.4\";s:10:\"user_agent\";s:127:\"Mozilla/5.0 (iPad; CPU OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A405 Safari/7534.48.3\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:5:\"Ville\";s:10:\"POST_email\";s:18:\"vkaravir@gmail.com\";s:8:\"POST_url\";s:26:\"http://villekaravirta.com/\";s:12:\"POST_comment\";s:42:\"Thanks for posting this, extremely useful!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"387372cea2\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:127:\"Mozilla/5.0 (iPad; CPU OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A405 Safari/7534.48.3\";s:14:\"CONTENT_LENGTH\";s:3:\"222\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:10:\"89.27.98.4\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"62355\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333183707\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30759,10258,'akismet_result','false'),(30760,10258,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333179328.33\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30761,10258,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:38:\"Visualizza sorgente su iPad | Mac Blog\";s:18:\"comment_author_url\";s:61:\"http://www.blogmac.eu/2012/03/31/visualizza-sorgente-su-ipad/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:39:\"[...] Visualizza sorgente su iPad [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"205.186.172.29\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"326\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"205.186.172.29\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"51948\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333179314\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30741,10252,'akismet_result','false'),(30742,10252,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333138365.95\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30743,10252,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:8:\"Benjamin\";s:20:\"comment_author_email\";s:27:\"benjamin@benjaminthomas.org\";s:18:\"comment_author_url\";s:26:\"http://benjaminthomas.org/\";s:15:\"comment_content\";s:124:\"Are you going to post the source code anywhere?  Would love to fork!  Line numbers and no line wrapping would be incredible!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"75.71.166.199\";s:10:\"user_agent\";s:101:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1081.2 Safari/536.5\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:8:\"Benjamin\";s:10:\"POST_email\";s:27:\"benjamin@benjaminthomas.org\";s:8:\"POST_url\";s:26:\"http://benjaminthomas.org/\";s:12:\"POST_comment\";s:124:\"Are you going to post the source code anywhere?  Would love to fork!  Line numbers and no line wrapping would be incredible!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"69bc3465db\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"318\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:101:\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1081.2 Safari/536.5\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"75.71.166.199\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"39264\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333138354\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30747,10254,'akismet_result','false'),(30748,10254,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333158845.72\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30749,10254,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:59:\"How to “View Source” from Safari on an iPad or iPhone |\";s:18:\"comment_author_url\";s:30:\"http://www.lionosx.net/?p=1714\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:151:\"[...] a custom bookmarklet you can view source of any web page right in iOS. This awesome tip comes from Michelsen.dk, and here’s how to set it [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"74.220.207.146\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"295\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"74.220.207.146\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"54441\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333158831\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30738,10251,'akismet_result','false'),(30739,10251,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333136048.58\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30740,10251,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:4:\"Gary\";s:20:\"comment_author_email\";s:13:\"Gary@zots.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:22:\"Or you could use icab.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:12:\"67.161.81.99\";s:10:\"user_agent\";s:96:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:4:\"Gary\";s:10:\"POST_email\";s:14:\"Gary@zots.com \";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:22:\"Or you could use icab.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"69bc3465db\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:96:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176\";s:14:\"CONTENT_LENGTH\";s:3:\"159\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:12:\"67.161.81.99\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"54153\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333136037\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30937,10312,'akismet_history','a:4:{s:4:\"time\";s:12:\"1333612106.7\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30933,10312,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:14:\"Mathias Bynens\";s:20:\"comment_author_email\";s:15:\"mathias@qiwi.be\";s:18:\"comment_author_url\";s:24:\"http://mathiasbynens.be/\";s:15:\"comment_content\";s:412:\"Any chance support for <a href=\"http://paulirish.com/2010/the-protocol-relative-url/\">scheme-relative URLs</a>, e.g. <code>//example.com/</code> can be added? Currently these links break in the source view.\r\n\r\nTo fix this, you could simply replace <code>//</code> at the start of any URLs with <code>http://</code> if the original page was served over HTTP, or <code>https://</code> if it used SSL.\r\n\r\nNice work!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"78.20.165.163\";s:10:\"user_agent\";s:116:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:14:\"Mathias Bynens\";s:10:\"POST_email\";s:15:\"mathias@qiwi.be\";s:8:\"POST_url\";s:24:\"http://mathiasbynens.be/\";s:12:\"POST_comment\";s:412:\"Any chance support for <a href=\"http://paulirish.com/2010/the-protocol-relative-url/\">scheme-relative URLs</a>, e.g. <code>//example.com/</code> can be added? Currently these links break in the source view.\r\n\r\nTo fix this, you could simply replace <code>//</code> at the start of any URLs with <code>http://</code> if the original page was served over HTTP, or <code>https://</code> if it used SSL.\r\n\r\nNice work!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"c145fb62c8\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"708\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:116:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:13:\"UTF-8,*;q=0.5\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"78.20.165.163\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"60863\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333611437\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30931,10312,'akismet_result','false'),(30932,10312,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333611449.59\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30911,10306,'akismet_result','false'),(30912,10306,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333557812.98\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30913,10306,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:86:\"Ole Michelsen has created a View Source bookmarklet for the iPad&#8230; &laquo; 13fqcs\";s:18:\"comment_author_url\";s:103:\"http://1edqw.wordpress.com/2012/04/04/ole-michelsen-has-created-a-view-source-bookmarklet-for-the-ipad/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:159:\"[...] Michelsen has created a View Source bookmarklet for the iPad and iPhone with syntax highlighting, formatted/selectable text, and clickable links.   [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"216.151.210.18\";s:10:\"user_agent\";s:31:\"The Incutio XML-RPC PHP Library\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:31:\"The Incutio XML-RPC PHP Library\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"368\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"216.151.210.18\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"19399\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333557799\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30914,10306,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333559351.64\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30915,10303,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333560608.07\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30907,10302,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333527848.78\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30901,10303,'akismet_result','false'),(30902,10303,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333521431.31\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30903,10303,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:14:\"Aaron T. Grogg\";s:20:\"comment_author_email\";s:21:\"aarontgrogg@gmail.com\";s:18:\"comment_author_url\";s:23:\"http://aarontgrogg.com/\";s:15:\"comment_content\";s:233:\"This is so cool, I hate to add a request, but here goes... :-)\r\n\r\nAlong with the line numbers/no-wrap above, adding appropriate indents to the source would make readability much much easier...\r\n\r\nCheers on a great bookmarklet!\r\n\r\nAtg\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"212.43.69.178\";s:10:\"user_agent\";s:107:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.83 Safari/535.11\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:14:\"Aaron T. Grogg\";s:10:\"POST_email\";s:21:\"aarontgrogg@gmail.com\";s:8:\"POST_url\";s:23:\"http://aarontgrogg.com/\";s:12:\"POST_comment\";s:233:\"This is so cool, I hate to add a request, but here goes... :-)\r\n\r\nAlong with the line numbers/no-wrap above, adding appropriate indents to the source would make readability much much easier...\r\n\r\nCheers on a great bookmarklet!\r\n\r\nAtg\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"9caf8fca26\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"456\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:107:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.83 Safari/535.11\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"212.43.69.178\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"36758\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333521419\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30898,10302,'akismet_result','false'),(30899,10302,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333516567.28\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30900,10302,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:10:\"Hans Grimm\";s:20:\"comment_author_email\";s:13:\"hans@grimm.nl\";s:18:\"comment_author_url\";s:12:\"www.grimm.nl\";s:15:\"comment_content\";s:48:\"This is what I was missing; sorely.. \r\nTHANKS!!!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"83.128.57.212\";s:10:\"user_agent\";s:96:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:10:\"Hans Grimm\";s:10:\"POST_email\";s:13:\"hans@grimm.nl\";s:8:\"POST_url\";s:12:\"www.grimm.nl\";s:12:\"POST_comment\";s:48:\"This is what I was missing; sorely.. \r\nTHANKS!!!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"9caf8fca26\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:96:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176\";s:14:\"CONTENT_LENGTH\";s:3:\"214\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"nl-nl\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"83.128.57.212\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"60748\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333516554\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30885,10298,'akismet_result','false'),(30886,10298,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333464451.82\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30887,10298,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:21:\"Nicolas Kristoffersen\";s:20:\"comment_author_email\";s:27:\"nk@nicolaskristoffersen.com\";s:18:\"comment_author_url\";s:24:\"nicolaskristoffersen.com\";s:15:\"comment_content\";s:18:\"Brilliant. Thanks.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"82.192.128.87\";s:10:\"user_agent\";s:125:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:21:\"Nicolas Kristoffersen\";s:10:\"POST_email\";s:27:\"nk@nicolaskristoffersen.com\";s:8:\"POST_url\";s:24:\"nicolaskristoffersen.com\";s:12:\"POST_comment\";s:18:\"Brilliant. Thanks.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"c5039a79db\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:125:\"Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3\";s:14:\"CONTENT_LENGTH\";s:3:\"209\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"da-dk\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"82.192.128.87\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"55164\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333464438\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30888,10298,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333467523.61\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31038,10337,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333870071.45\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31039,10335,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333870153.06\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30874,10288,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333435535.56\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30875,10291,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333435559.24\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30862,10291,'akismet_result','false'),(30863,10291,'akismet_history','a:4:{s:4:\"time\";s:12:\"1333424001.1\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30864,10291,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:64:\"You Can Now View the Source on the iPad and iPhone | Down 3 feet\";s:18:\"comment_author_url\";s:63:\"http://d3ft.com/2012/04/02/you-can-now-view-source-ipad-iphone/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:238:\"[...] Apple fan (who also is a bit of a code junkie), I can&#8217;t tell you enough how great this View source on the iPad and iPhone bookmarklet is. It lets you view the source of a web page in the browser in your iPad or iPhone. [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:10:\"8.12.37.71\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"328\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:10:\"8.12.37.71\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"54598\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333423979\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30665,10225,'akismet_history','a:4:{s:4:\"time\";s:13:\"1332755785.58\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30659,10225,'akismet_result','false'),(30660,10225,'akismet_history','a:4:{s:4:\"time\";s:13:\"1332721691.92\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30661,10225,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:11:\"Jeremy Abel\";s:20:\"comment_author_email\";s:23:\"jeremy.abel11@gmail.com\";s:18:\"comment_author_url\";s:20:\"http://brandabel.org\";s:15:\"comment_content\";s:138:\"Thanks for the awesome post, Ole. I was looking for ways to view the source code of a page on my iPad this weekend. Very much appreciated!\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:10:\"74.70.97.6\";s:10:\"user_agent\";s:119:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.53.11 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:11:\"Jeremy Abel\";s:10:\"POST_email\";s:23:\"jeremy.abel11@gmail.com\";s:8:\"POST_url\";s:20:\"http://brandabel.org\";s:12:\"POST_comment\";s:138:\"Thanks for the awesome post, Ole. I was looking for ways to view the source code of a page on my iPad this weekend. Very much appreciated!\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"81732befdf\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:119:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.53.11 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10\";s:14:\"CONTENT_LENGTH\";s:3:\"321\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:10:\"74.70.97.6\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"62124\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1332721680\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30849,10285,'akismet_as_submitted','a:67:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:13:\"Ole Michelsen\";s:20:\"comment_author_email\";s:16:\"ole@michelsen.dk\";s:18:\"comment_author_url\";s:23:\"http://ole.michelsen.dk\";s:15:\"comment_content\";s:643:\"That was actually the primary reason. I\'m often testing pages over VPN for work, which my server doesn\'t have access to. \n\nAlso, at the time I made this bookmarklet, I was developing a 100% AJAX page, targeting <a href=\"https://developers.google.com/webmasters/ajax-crawling/docs/getting-started\" title=\"Making AJAX Applications Crawlable\" target=\"_blank\">Google\'s hash fragment crawling scheme</a>. Here I needed the DOM, since the base page only contained an empty body tag.\n\nBut I have considered adding a small control panel to the source-page, so you can request the \"real\" page instead, and perhaps also add line numbers and no-wrap etc.\";s:14:\"comment_parent\";s:5:\"10277\";s:7:\"user_ID\";s:1:\"2\";s:7:\"user_ip\";s:11:\"10.10.9.251\";s:10:\"user_agent\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:8:\"referrer\";s:38:\"http://ole.michelsen.dk/blog/wp-admin/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:13:\"administrator\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:22:\"POST_newcomment_author\";s:0:\"\";s:28:\"POST_newcomment_author_email\";s:0:\"\";s:26:\"POST_newcomment_author_url\";s:0:\"\";s:12:\"POST_user_ID\";s:1:\"2\";s:11:\"POST_action\";s:15:\"replyto-comment\";s:15:\"POST_comment_ID\";s:5:\"10277\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:11:\"POST_status\";s:0:\"\";s:13:\"POST_position\";s:2:\"-1\";s:13:\"POST_checkbox\";s:1:\"0\";s:9:\"POST_mode\";s:9:\"dashboard\";s:32:\"POST__ajax_nonce-replyto-comment\";s:10:\"6e7bf39230\";s:32:\"POST__wp_unfiltered_html_comment\";s:10:\"0aaae8338d\";s:12:\"POST_content\";s:643:\"That was actually the primary reason. I\'m often testing pages over VPN for work, which my server doesn\'t have access to. \n\nAlso, at the time I made this bookmarklet, I was developing a 100% AJAX page, targeting <a href=\"https://developers.google.com/webmasters/ajax-crawling/docs/getting-started\" title=\"Making AJAX Applications Crawlable\" target=\"_blank\">Google\'s hash fragment crawling scheme</a>. Here I needed the DOM, since the base page only contained an empty body tag.\n\nBut I have considered adding a small control panel to the source-page, so you can request the \"real\" page instead, and perhaps also add line numbers and no-wrap etc.\";s:7:\"POST_id\";s:2:\"68\";s:21:\"POST_comments_listing\";s:0:\"\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URL\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URI\";s:52:\"http://ole.michelsen.dk/blog/wp-admin/admin-ajax.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:14:\"CONTENT_LENGTH\";s:4:\"1005\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:21:\"HTTP_X_REQUESTED_WITH\";s:14:\"XMLHttpRequest\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:38:\"http://ole.michelsen.dk/blog/wp-admin/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:11:\"10.10.9.251\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:58:\"/var/www/michelsen.dk/web/ole/blog/wp-admin/admin-ajax.php\";s:11:\"REMOTE_PORT\";s:5:\"51535\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:8:\"PHP_SELF\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:12:\"REQUEST_TIME\";s:10:\"1333351845\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30847,10285,'akismet_result','false'),(30848,10285,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333351857.47\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:12:\"olemichelsen\";}'),(32328,10771,'akismet_result','false'),(32329,10771,'akismet_history','a:4:{s:4:\"time\";s:13:\"1337266122.53\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(32330,10771,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:69:\"How To View Page Source On Safari In An iPhone or iPad &laquo; TecHow\";s:18:\"comment_author_url\";s:84:\"http://techow.net/2012/05/17/how-to-view-page-source-on-safari-in-an-iphone-or-ipad/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:201:\"[...] you to view source of any webpage from an iPhone or iPad. The bookmarklet has been created by Michelsen.dk. In this article we will explain how to view page source on Safari in an iPhone or [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"216.151.210.27\";s:10:\"user_agent\";s:31:\"The Incutio XML-RPC PHP Library\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:31:\"The Incutio XML-RPC PHP Library\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"349\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"216.151.210.27\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"18841\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1337266114\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";s:25:\"comment_post_modified_gmt\";s:19:\"2012-04-05 11:31:44\";}'),(30980,10328,'akismet_result','false'),(30981,10328,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333751093.94\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30982,10328,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:3:\"340\";s:14:\"comment_author\";s:14:\"Aaron Bertrand\";s:20:\"comment_author_email\";s:24:\"aaron.bertrand@gmail.com\";s:18:\"comment_author_url\";s:21:\"http://sqlsentry.net/\";s:15:\"comment_content\";s:311:\"There is another caveat to the CTE method - it relies on there to be no gaps in the id column. You can get around this by first constructing row numbers in a separate CTE, and ensuring that you\'re correctly breaking any ties, but of course this adds a layer to the query and will surely make performance suffer.\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:14:\"74.103.206.102\";s:10:\"user_agent\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:8:\"referrer\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:14:\"Aaron Bertrand\";s:10:\"POST_email\";s:24:\"aaron.bertrand@gmail.com\";s:8:\"POST_url\";s:21:\"http://sqlsentry.net/\";s:12:\"POST_comment\";s:311:\"There is another caveat to the CTE method - it relies on there to be no gaps in the id column. You can get around this by first constructing row numbers in a separate CTE, and ensuring that you\'re correctly breaking any ties, but of course this adds a layer to the query and will surely make performance suffer.\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"340\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"d94cb4e39e\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:117:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3\";s:14:\"CONTENT_LENGTH\";s:3:\"504\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:12:\"HTTP_REFERER\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-us\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"74.103.206.102\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"57765\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333751081\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30983,10328,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333751393.06\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30822,10277,'akismet_result','false'),(30823,10277,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333296763.36\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30824,10277,'akismet_as_submitted','a:61:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:13:\"Joseph Silber\";s:20:\"comment_author_email\";s:24:\"contact@josephsilber.com\";s:18:\"comment_author_url\";s:23:\"http://josephsilber.com\";s:15:\"comment_content\";s:300:\"Thanks for sharing the source code.\r\n\r\nOut of curiosity: why are you dumping the [javascript] modified code to the server. Why not pull a clean copy of the HTML from the URL?\r\n\r\nThe only upside to dumping the actual DOM (that I can think of) is if the page in question is under  restricted access...?\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:13:\"68.195.232.10\";s:10:\"user_agent\";s:109:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19\";s:8:\"referrer\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:13:\"Joseph Silber\";s:10:\"POST_email\";s:24:\"contact@josephsilber.com\";s:8:\"POST_url\";s:23:\"http://josephsilber.com\";s:12:\"POST_comment\";s:300:\"Thanks for sharing the source code.\r\n\r\nOut of curiosity: why are you dumping the [javascript] modified code to the server. Why not pull a clean copy of the HTML from the URL?\r\n\r\nThe only upside to dumping the actual DOM (that I can think of) is if the page in question is under  restricted access...?\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"ae3e48f4d6\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"515\";s:18:\"HTTP_CACHE_CONTROL\";s:9:\"max-age=0\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:109:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:63:\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";s:12:\"HTTP_REFERER\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"68.195.232.10\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"63926\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333296752\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30825,10277,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333306668.36\";s:7:\"message\";s:51:\"olemichelsen changed the comment status to approved\";s:5:\"event\";s:15:\"status-approved\";s:4:\"user\";s:12:\"olemichelsen\";}'),(31008,10337,'akismet_result','false'),(31009,10337,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333828079.59\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(31010,10337,'akismet_as_submitted','a:43:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:78:\"Harvest Playback, April 7th Edition | HARVEST Time Tracking and Invoicing Blog\";s:18:\"comment_author_url\";s:74:\"http://www.getharvest.com/blog/2012/04/harvest-playback-april-7th-edition/\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:145:\"[...] way to view source on iPhone or iPad. We&#8217;re working on a project for the touch devices right now, and this handy bookmarklet is [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:13:\"72.251.221.76\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"339\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:13:\"72.251.221.76\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"44097\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333828066\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(31002,10335,'akismet_result','false'),(31003,10335,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333812400.28\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(31004,10335,'akismet_as_submitted','a:59:{s:15:\"comment_post_ID\";s:3:\"340\";s:14:\"comment_author\";s:11:\"Mark Stacey\";s:20:\"comment_author_email\";s:26:\"mstacey@pragmaticworks.com\";s:18:\"comment_author_url\";s:0:\"\";s:15:\"comment_content\";s:155:\"There is always the old \r\n\r\nUPDATE tableX\r\nSET columnX = @Value,\r\n@Value = @Value + ColumnX\r\n\r\nNew windowing functions will be great, looking forward to it\";s:12:\"comment_type\";s:0:\"\";s:14:\"comment_parent\";s:1:\"0\";s:7:\"user_ID\";s:1:\"0\";s:7:\"user_ip\";s:15:\"196.210.213.217\";s:10:\"user_agent\";s:63:\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\";s:8:\"referrer\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:11:\"POST_author\";s:11:\"Mark Stacey\";s:10:\"POST_email\";s:26:\"mstacey@pragmaticworks.com\";s:8:\"POST_url\";s:0:\"\";s:12:\"POST_comment\";s:155:\"There is always the old \r\n\r\nUPDATE tableX\r\nSET columnX = @Value,\r\n@Value = @Value + ColumnX\r\n\r\nNew windowing functions will be great, looking forward to it\";s:11:\"POST_submit\";s:12:\"Post Comment\";s:20:\"POST_comment_post_ID\";s:3:\"340\";s:19:\"POST_comment_parent\";s:1:\"0\";s:26:\"POST_akismet_comment_nonce\";s:10:\"ffe144cf16\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URL\";s:26:\"/blog/wp-comments-post.php\";s:10:\"SCRIPT_URI\";s:49:\"http://ole.michelsen.dk/blog/wp-comments-post.php\";s:11:\"HTTP_ACCEPT\";s:37:\"text/html, application/xhtml+xml, */*\";s:12:\"HTTP_REFERER\";s:74:\"http://ole.michelsen.dk/blog/calculate-a-running-total-in-sql-server-2012/\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:5:\"en-ZA\";s:15:\"HTTP_USER_AGENT\";s:63:\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:20:\"HTTP_ACCEPT_ENCODING\";s:13:\"gzip, deflate\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:14:\"CONTENT_LENGTH\";s:3:\"344\";s:15:\"HTTP_CONNECTION\";s:10:\"Keep-Alive\";s:18:\"HTTP_CACHE_CONTROL\";s:8:\"no-cache\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:15:\"196.210.213.217\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:55:\"/var/www/michelsen.dk/web/ole/blog/wp-comments-post.php\";s:11:\"REMOTE_PORT\";s:5:\"53590\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:26:\"/blog/wp-comments-post.php\";s:8:\"PHP_SELF\";s:26:\"/blog/wp-comments-post.php\";s:12:\"REQUEST_TIME\";s:10:\"1333812388\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30798,10269,'akismet_result','false'),(30799,10269,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333245424.63\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:0:\"\";}'),(30800,10269,'akismet_as_submitted','a:44:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:79:\"如何在移动版 Safari 浏览器上”查看源代码”[教程] | .i.分享\";s:18:\"comment_author_url\";s:41:\"http://www.looogle.com/archives/6421.html\";s:20:\"comment_author_email\";s:0:\"\";s:15:\"comment_content\";s:149:\"[...] PS：上面操作步骤中的代码来自 Michelsen.dk 网站，因此在执行时会将页面发送至该网站服务器进行处理。 [...]\";s:12:\"comment_type\";s:8:\"pingback\";s:7:\"user_ip\";s:14:\"182.50.130.134\";s:10:\"user_agent\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:8:\"referrer\";s:0:\"\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:0:\"\";s:21:\"akismet_comment_nonce\";s:6:\"failed\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URL\";s:16:\"/blog/xmlrpc.php\";s:10:\"SCRIPT_URI\";s:39:\"http://ole.michelsen.dk/blog/xmlrpc.php\";s:15:\"HTTP_USER_AGENT\";s:50:\"The Incutio XML-RPC PHP Library -- WordPress/3.3.1\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"CONTENT_TYPE\";s:8:\"text/xml\";s:20:\"HTTP_ACCEPT_ENCODING\";s:29:\"deflate;q=1.0, compress;q=0.5\";s:14:\"CONTENT_LENGTH\";s:3:\"306\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:14:\"182.50.130.134\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:45:\"/var/www/michelsen.dk/web/ole/blog/xmlrpc.php\";s:11:\"REMOTE_PORT\";s:5:\"47727\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.0\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:16:\"/blog/xmlrpc.php\";s:8:\"PHP_SELF\";s:16:\"/blog/xmlrpc.php\";s:12:\"REQUEST_TIME\";s:10:\"1333245408\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}'),(30786,10265,'akismet_result','false'),(30787,10265,'akismet_history','a:4:{s:4:\"time\";s:13:\"1333207950.67\";s:7:\"message\";s:28:\"Akismet cleared this comment\";s:5:\"event\";s:9:\"check-ham\";s:4:\"user\";s:12:\"olemichelsen\";}'),(30788,10265,'akismet_as_submitted','a:68:{s:15:\"comment_post_ID\";s:2:\"68\";s:14:\"comment_author\";s:13:\"Ole Michelsen\";s:20:\"comment_author_email\";s:16:\"ole@michelsen.dk\";s:18:\"comment_author_url\";s:23:\"http://ole.michelsen.dk\";s:15:\"comment_content\";s:146:\"Hi Mike and Benjamin, I have updated the article with the source-code (PHP) for the back end stuff. Feel free to improve on it for your own needs.\";s:14:\"comment_parent\";s:5:\"10263\";s:7:\"user_ID\";s:1:\"2\";s:7:\"user_ip\";s:11:\"81.7.190.50\";s:10:\"user_agent\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19\";s:8:\"referrer\";s:79:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?comment_status=approved\";s:4:\"blog\";s:28:\"http://ole.michelsen.dk/blog\";s:9:\"blog_lang\";s:5:\"en_US\";s:12:\"blog_charset\";s:5:\"UTF-8\";s:9:\"permalink\";s:64:\"http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/\";s:9:\"user_role\";s:13:\"administrator\";s:21:\"akismet_comment_nonce\";s:6:\"passed\";s:22:\"POST_newcomment_author\";s:0:\"\";s:28:\"POST_newcomment_author_email\";s:0:\"\";s:26:\"POST_newcomment_author_url\";s:0:\"\";s:12:\"POST_user_ID\";s:1:\"2\";s:11:\"POST_action\";s:15:\"replyto-comment\";s:15:\"POST_comment_ID\";s:5:\"10263\";s:20:\"POST_comment_post_ID\";s:2:\"68\";s:11:\"POST_status\";s:0:\"\";s:13:\"POST_position\";s:2:\"-1\";s:13:\"POST_checkbox\";s:1:\"1\";s:9:\"POST_mode\";s:6:\"detail\";s:32:\"POST__ajax_nonce-replyto-comment\";s:10:\"1e281a72a5\";s:32:\"POST__wp_unfiltered_html_comment\";s:10:\"9bb8d382bd\";s:12:\"POST_content\";s:146:\"Hi Mike and Benjamin, I have updated the article with the source-code (PHP) for the back end stuff. Feel free to improve on it for your own needs.\";s:7:\"POST_id\";s:2:\"68\";s:21:\"POST_comments_listing\";s:8:\"approved\";s:15:\"SERVER_SOFTWARE\";s:22:\"Apache/2.2.14 (Ubuntu)\";s:11:\"REQUEST_URI\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URL\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:10:\"SCRIPT_URI\";s:52:\"http://ole.michelsen.dk/blog/wp-admin/admin-ajax.php\";s:9:\"HTTP_HOST\";s:16:\"ole.michelsen.dk\";s:15:\"HTTP_CONNECTION\";s:10:\"keep-alive\";s:14:\"CONTENT_LENGTH\";s:3:\"445\";s:11:\"HTTP_ORIGIN\";s:23:\"http://ole.michelsen.dk\";s:21:\"HTTP_X_REQUESTED_WITH\";s:14:\"XMLHttpRequest\";s:15:\"HTTP_USER_AGENT\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19\";s:12:\"CONTENT_TYPE\";s:33:\"application/x-www-form-urlencoded\";s:11:\"HTTP_ACCEPT\";s:3:\"*/*\";s:12:\"HTTP_REFERER\";s:79:\"http://ole.michelsen.dk/blog/wp-admin/edit-comments.php?comment_status=approved\";s:20:\"HTTP_ACCEPT_ENCODING\";s:17:\"gzip,deflate,sdch\";s:20:\"HTTP_ACCEPT_LANGUAGE\";s:14:\"en-US,en;q=0.8\";s:19:\"HTTP_ACCEPT_CHARSET\";s:30:\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\";s:11:\"HTTP_COOKIE\";s:0:\"\";s:4:\"PATH\";s:28:\"/usr/local/bin:/usr/bin:/bin\";s:16:\"SERVER_SIGNATURE\";s:77:\"<address>Apache/2.2.14 (Ubuntu) Server at ole.michelsen.dk Port 80</address>\n\";s:11:\"SERVER_NAME\";s:16:\"ole.michelsen.dk\";s:11:\"SERVER_ADDR\";s:10:\"10.10.20.5\";s:11:\"SERVER_PORT\";s:2:\"80\";s:11:\"REMOTE_ADDR\";s:11:\"81.7.190.50\";s:13:\"DOCUMENT_ROOT\";s:25:\"/var/www/michelsen.dk/web\";s:12:\"SERVER_ADMIN\";s:22:\"webmaster@michelsen.dk\";s:15:\"SCRIPT_FILENAME\";s:58:\"/var/www/michelsen.dk/web/ole/blog/wp-admin/admin-ajax.php\";s:11:\"REMOTE_PORT\";s:5:\"44009\";s:17:\"GATEWAY_INTERFACE\";s:7:\"CGI/1.1\";s:15:\"SERVER_PROTOCOL\";s:8:\"HTTP/1.1\";s:14:\"REQUEST_METHOD\";s:4:\"POST\";s:12:\"QUERY_STRING\";s:0:\"\";s:11:\"SCRIPT_NAME\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:8:\"PHP_SELF\";s:29:\"/blog/wp-admin/admin-ajax.php\";s:12:\"REQUEST_TIME\";s:10:\"1333207939\";s:4:\"argv\";s:0:\"\";s:4:\"argc\";s:1:\"0\";}');
/*!40000 ALTER TABLE `ole_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_comments`
--

DROP TABLE IF EXISTS `ole_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`)
) ENGINE=MyISAM AUTO_INCREMENT=14403 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_comments`
--

LOCK TABLES `ole_comments` WRITE;
/*!40000 ALTER TABLE `ole_comments` DISABLE KEYS */;
INSERT INTO `ole_comments` VALUES (19,27,'zaia','zaia@sterlinginet.com','','64.134.238.188','2011-07-30 19:44:27','2011-07-30 18:44:27','you can\'t compile the code published below!\r\npublic static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n\r\n<strong>Admin: Have you implemented the two custom classes, MyPrincipal and MyIdentity and referenced the correct namespace?</strong>',0,'1','Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)','',0,0),(9,27,'Jeannine Maniar','dinkorup@gmail.com','http://smaller-computer.blogspot.com','117.102.99.42','2011-07-19 05:57:30','2011-07-19 04:57:30','This is certainly out of the books point of view your article is. Thanks for such a great read tonight',0,'1','Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)','',0,0),(26,27,'zaia','zaia@sterlinginet.com','','64.134.227.90','2011-08-05 17:32:56','2011-08-05 16:32:56','Yes, I have UserIdentity and UserPrinciple classes.  The compiler request to add get as following:\r\npublic static class UserContext \r\n    {\r\n        public static UserPrincipal User{ get{ return (UserPrincipal)User;} }\r\n        public static UserIdentity Identity { get { return (UserIdentity)User.Identity; } }\r\n    }\r\nThen it compiles.\r\nThanks,\r\nZaia',0,'1','Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)','',0,0),(14,27,'Haywood Shoyer','Andrich159@gmail.com','http://pingdopid.net','173.234.131.109','2011-07-22 21:06:37','2011-07-22 20:06:37','I got what you mean  ,  appreciate it for  putting up.Woh I am  thankful to find this website through google. \"Remember that what you believe will depend very much on what you are.\" by Noah Porter.',0,'1','Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)','',0,0),(151,247,'Aaron','aarone@codevalue.net','http://codevalue.net','99.237.137.37','2011-10-08 23:25:34','2011-10-08 22:25:34','Thanks for an interesting post',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.6 (KHTML, like Gecko) Chrome/16.0.899.0 Safari/535.6','',0,0),(427,68,'Erik','smets.erik@gmail.com','','78.29.194.141','2011-12-14 21:50:28','2011-12-14 20:50:28','I love it. Been looking for this a long time. Thank you very much.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0) Gecko/20100101 Firefox/9.0','',0,0),(531,277,'Richard Wrench','rwrench@gmail.com','','38.68.1.66','2011-12-27 19:54:37','2011-12-27 18:54:37','Very nice! - just what I was looking for.  I added a Total property in the Group class - converted to VB.  I think -\r\n  public class Group\r\n    {\r\n        public K Key;\r\n        public IEnumerable Values;\r\n    }\r\nshould be \r\n\r\n  public class Group\r\n\r\nbased on the example code    select new Group { Key = g.Key, Values = g };\r\nRegards',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7','',0,0),(627,27,'Al Delhierro','Gronert137@gmail.com','http://www.myfav-coffee1.com','116.66.206.189','2012-01-05 02:32:18','2012-01-05 01:32:18','Howdy. Just would like to leave a swift statement and question where you gathered your blog model I might be starting on own blogging site and tremendously appreciate your personal design.',0,'1','Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30)','',0,0),(630,27,'Craig','craig@cdlit.com.au','http://www.cdlit.com.au','101.172.24.250','2012-01-05 07:07:26','2012-01-05 06:07:26','zaia and Ole Michelsen,\r\n\r\nI was also having problems without the get and set on the wrapper classes, but know I have a problem saying the function is recursive on all paths.\r\n\r\nAny ideas, or any chance a code version could be posted?\r\n\r\nCheers\r\nCraig',0,'1','Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.63 Safari/535.7','',0,0),(11106,277,'Phil Saxton','psaxton@centershift.com','','67.137.121.106','2012-06-08 19:31:20','2012-06-08 18:31:20','Including your <code>tbody</code> tags within the outer <code>foreach</code> loop will allow for html grouping within the table as well per http://www.w3.org/TR/html5/the-table-element.html#the-table-element and http://www.w3.org/TR/html4/struct/tables.html#h-11.5 .  This can then be used to preserve grouping when used with client side sorting, such as jQuery.TableSort with very little modification.\r\ni.e.<pre lang=\"csharp\" line=\"12\">@foreach (var group in Model)\r\n\r\n{\r\n    @group.Key\r\n    foreach (var book in group.Values)\r\n    {\r\n        @book.Author@book.Title@book.Price.ToString(\"c\")\r\n    }\r\n\r\n}</pre>',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5','',0,0),(11107,277,'Phil Saxton','psaxton@centershift.com','','67.137.121.106','2012-06-08 19:32:58','2012-06-08 18:32:58','Lines 13 and 20 in the previous comment should be &lt;tbody&gt; and &lt;/tbody&gt; respectively. (Preview would have been nice :))',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5','',0,0),(11211,68,'Cómo ver el código fuente de una web en un iPad o iPhone | ceslava | diseño &amp; cursos','','http://ceslava.com/blog/como-ver-el-codigo-fuente-de-una-web-en-un-ipad-o-iphone/','92.43.17.190','2012-06-14 17:37:13','2012-06-14 16:37:13','[...] })();Cuando visites una web y pinches en el marcador se te redireccionará al servidor de su autor Ole Michelsen donde se procesará para que puedas ver el código fuente. Lo ha publicado en github por si lo [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.4','pingback',0,0),(11195,68,'How to View Website Source Codes on iPad / iPhone [Quicktip] | Best Web Consulting company in Nashik, India with Creative and Professional Website Design, Content Management Systems, Wordpress Experts, Ecommerce SEO, and more..','','http://www.venkateshtech.com/how-to-view-website-source-codes-on-ipad-iphone-quicktip/','174.120.232.194','2012-06-13 12:43:18','2012-06-13 11:43:18','[...] from your mobile device. Take note that the code you will be using will redirect you to the creator’s website, where the source is presented in highlighted syntax and clickable URL for easier [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.2.1','pingback',0,0),(11196,68,'How to View Website Source Codes on iPad / iPhone [Quicktip] | Android News','','http://www.androidfools.com/2012/android-news/how-to-view-website-source-codes-on-ipad-iphone-quicktip/','50.22.91.3','2012-06-13 12:46:55','2012-06-13 11:46:55','[...] from your mobile device. Take note that the code you will be using will redirect you to the creator&#8217;s website, where the source is presented in highlighted syntax and clickable URL for easier [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.2','pingback',0,0),(11193,68,'How to View Website Source Codes on iPad / iPhone [Quicktip] | FunWP.com','','http://funwp.com/how-to-view-website-source-codes-on-ipad-iphone-quicktip/','74.208.180.188','2012-06-13 11:59:36','2012-06-13 10:59:36','[...] from your mobile device. Take note that the code you will be using will redirect you to the creator&#8217;s website, where the source is presented in highlighted syntax and clickable URL for easier [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.2','pingback',0,0),(11194,68,'How to View Website Source Codes on iPad / iPhone [Quicktip]','','http://usefultips.org/how-to-view-website-source-codes-on-ipad-iphone-quicktip.html','69.175.122.250','2012-06-13 12:02:32','2012-06-13 11:02:32','[...] from your mobile device. Take note that the code you will be using will redirect you to the creator’s website, where the source is presented in highlighted syntax and clickable URL for easier [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10817,68,'iPhoneやAndroidでページのHTMLソースを表示する方法 | ミニミニ大作戦','','http://www.minimini-daisakusen.com/webcreate/iphond-androidhtmlsource.html','210.188.201.62','2012-05-20 04:36:42','2012-05-20 03:36:42','[...] 参考にしたのはこちらの記事。 View source on the iPad and iPhone [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.2','pingback',0,0),(10771,68,'How To View Page Source On Safari In An iPhone or iPad &laquo; TecHow','','http://techow.net/2012/05/17/how-to-view-page-source-on-safari-in-an-iphone-or-ipad/','216.151.210.27','2012-05-17 15:48:42','2012-05-17 14:48:42','[...] you to view source of any webpage from an iPhone or iPad. The bookmarklet has been created by Michelsen.dk. In this article we will explain how to view page source on Safari in an iPhone or [...]',0,'1','The Incutio XML-RPC PHP Library','pingback',0,0),(10629,247,'Ole Michelsen','ole@michelsen.dk','http://ole.michelsen.dk','10.10.9.251','2012-05-07 10:45:29','2012-05-07 09:45:29','Hi Tim, I would suggest that you extend the TreeNode class to include either the URL or RouteData, that you need for creating links in the DisplayTemplate. I don\'t know what\'s wrong with your treeview styling, perhaps you need to apply some css classes?',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:12.0) Gecko/20100101 Firefox/12.0','',10591,2),(10591,247,'Tim','tttbsn@gmail.com','','144.230.63.58','2012-05-04 20:31:32','2012-05-04 19:31:32','Thanks for this post...!!! I\'ve been looking for something this simple..! Kudos to you for taking the time on this...!!\r\nI have 2 questions for you on it.... \r\nBased on your code here, how do you apply html.ActionLink or Url.Action to each menu item to define navigation? \r\nI have treeview styling built in. It works with your index page but when it goes to the Display_Template it loses the styling for treeview. Any idea why that would be happening?\r\n\r\nAgain, great job on this and thank you for your time.. :)',0,'1','Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19','',0,0),(10563,68,'Steven','sas@sasnet.com','','72.229.237.222','2012-05-02 05:30:16','2012-05-02 04:30:16','Thanks so much. And totally easy. I went from my desktop to my devices in seconds! What a welcomed addition to mobile Safari! Excellent job.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3','',0,0),(10445,68,'Mark Perkins','mark@allmarkedup.com','http://allmarkedup.com','213.123.197.180','2012-04-19 10:49:57','2012-04-19 09:49:57','Thanks for this. I made a similar bookmarklet called Snoopy (http://snoopy.allmarkedup.com/) a while ago that will give you highlighted source code (both \'actual\' and generated) on iOS browsers (without a server-side component), which may be of interest. You can\'t follow the links like you can on this though :-)',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1096.1 Safari/536.6','',0,0),(10722,247,'jgedean','dean1981701112@hotmail.com','','210.209.146.83','2012-05-14 12:23:52','2012-05-14 11:23:52','Thanks for this post!\r\nHow will I put it in the sitemap?',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.168 Safari/535.19','',0,0),(10263,68,'Mike Hessling','mike@cherrypj.com','','69.140.1.208','2012-03-31 12:37:07','2012-03-31 11:37:07','I agree, this is good stuff. Would you post the source? I\'d love to put this on my own server, rather than relying upon your continued good will (and wallet, you know--bandwidth could get out of hand).',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_5_8) AppleWebKit/534.50.2 (KHTML, like Gecko) Version/5.0.6 Safari/533.22.3','',0,0),(10258,68,'Visualizza sorgente su iPad | Mac Blog','','http://www.blogmac.eu/2012/03/31/visualizza-sorgente-su-ipad/','205.186.172.29','2012-03-31 08:35:28','2012-03-31 07:35:28','[...] Visualizza sorgente su iPad [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10259,68,'Ville','vkaravir@gmail.com','http://villekaravirta.com/','89.27.98.4','2012-03-31 09:48:39','2012-03-31 08:48:39','Thanks for posting this, extremely useful!',0,'1','Mozilla/5.0 (iPad; CPU OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A405 Safari/7534.48.3','',0,0),(10251,68,'Gary','Gary@zots.com','','67.161.81.99','2012-03-30 20:34:08','2012-03-30 19:34:08','Or you could use icab.',0,'1','Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176','',0,0),(10252,68,'Benjamin','benjamin@benjaminthomas.org','http://benjaminthomas.org/','75.71.166.199','2012-03-30 21:12:45','2012-03-30 20:12:45','Are you going to post the source code anywhere?  Would love to fork!  Line numbers and no line wrapping would be incredible!',0,'1','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1081.2 Safari/536.5','',0,0),(10254,68,'How to “View Source” from Safari on an iPad or iPhone |','','http://www.lionosx.net/?p=1714','74.220.207.146','2012-03-31 02:54:05','2012-03-31 01:54:05','[...] a custom bookmarklet you can view source of any web page right in iOS. This awesome tip comes from Michelsen.dk, and here’s how to set it [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10312,68,'Mathias Bynens','mathias@qiwi.be','http://mathiasbynens.be/','78.20.165.163','2012-04-05 08:37:29','2012-04-05 07:37:29','Any chance support for <a href=\"http://paulirish.com/2010/the-protocol-relative-url/\" rel=\"nofollow\">scheme-relative URLs</a>, e.g. <code>//example.com/</code> can be added? Currently these links break in the source view.\r\n\r\nTo fix this, you could simply replace <code>//</code> at the start of any URLs with <code>http://</code> if the original page was served over HTTP, or <code>https://</code> if it used SSL.\r\n\r\nNice work!',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6','',0,0),(10306,68,'Ole Michelsen has created a View Source bookmarklet for the iPad&#8230; &laquo; 13fqcs','','http://1edqw.wordpress.com/2012/04/04/ole-michelsen-has-created-a-view-source-bookmarklet-for-the-ipad/','216.151.210.18','2012-04-04 17:43:32','2012-04-04 16:43:32','[...] Michelsen has created a View Source bookmarklet for the iPad and iPhone with syntax highlighting, formatted/selectable text, and clickable links.   [...]',0,'1','The Incutio XML-RPC PHP Library','pingback',0,0),(10303,68,'Aaron T. Grogg','aarontgrogg@gmail.com','http://aarontgrogg.com/','212.43.69.178','2012-04-04 07:37:11','2012-04-04 06:37:11','This is so cool, I hate to add a request, but here goes... :-)\r\n\r\nAlong with the line numbers/no-wrap above, adding appropriate indents to the source would make readability much much easier...\r\n\r\nCheers on a great bookmarklet!\r\n\r\nAtg',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.83 Safari/535.11','',0,0),(10302,68,'Hans Grimm','hans@grimm.nl','http://www.grimm.nl','83.128.57.212','2012-04-04 06:16:07','2012-04-04 05:16:07','This is what I was missing; sorely.. \r\nTHANKS!!!',0,'1','Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B176','',0,0),(10298,68,'Nicolas Kristoffersen','nk@nicolaskristoffersen.com','http://nicolaskristoffersen.com','82.192.128.87','2012-04-03 15:47:31','2012-04-03 14:47:31','Brilliant. Thanks.',0,'1','Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3','',0,0),(10291,68,'You Can Now View the Source on the iPad and iPhone | Down 3 feet','','http://d3ft.com/2012/04/02/you-can-now-view-source-ipad-iphone/','8.12.37.71','2012-04-03 04:33:21','2012-04-03 03:33:21','[...] Apple fan (who also is a bit of a code junkie), I can&#8217;t tell you enough how great this View source on the iPad and iPhone bookmarklet is. It lets you view the source of a web page in the browser in your iPad or iPhone. [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10225,68,'Jeremy Abel','jeremy.abel11@gmail.com','http://brandabel.org','74.70.97.6','2012-03-26 01:28:11','2012-03-26 00:28:11','Thanks for the awesome post, Ole. I was looking for ways to view the source code of a page on my iPad this weekend. Very much appreciated!',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.53.11 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10','',0,0),(10288,68,'Como ver el código fuente de una web en Safari desde iPhone o iPad | SomosIphone.com','','http://somosiphone.com/como-ver-el-codigo-fuente-en-safari-desde-iphone-o-ipad','91.192.108.91','2012-04-02 23:34:51','2012-04-02 22:34:51','[...] Paso 1. Abre Safari desde tu iDevice y teclea la siguiente dirección (o pincha en el siguiente enlace si lo abres desde tu iPhone o iPad) http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/ [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.1','pingback',0,0),(10285,68,'Ole Michelsen','ole@michelsen.dk','http://ole.michelsen.dk','10.10.9.251','2012-04-02 08:30:57','2012-04-02 07:30:57','That was actually the primary reason. I\'m often testing pages for work over VPN, which my server doesn\'t have access to. \n\nAlso, at the time I made this bookmarklet, I was developing a 100% AJAX page, targeting <a href=\"https://developers.google.com/webmasters/ajax-crawling/docs/getting-started\" title=\"Making AJAX Applications Crawlable\" target=\"_blank\" rel=\"nofollow\">Google\'s hash fragment crawling scheme</a>. Here I needed the DOM, since the base page only contained an empty body tag.\n\nBut I have considered adding a small control panel to the source-page, so you can request the \"real\" page instead, and perhaps also add line numbers and no-wrap etc.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3','',10277,2),(10277,68,'Joseph Silber','contact@josephsilber.com','http://josephsilber.com','68.195.232.10','2012-04-01 17:12:43','2012-04-01 16:12:43','Thanks for sharing the source code.\r\n\r\nOut of curiosity: why are you dumping the [javascript] modified code to the server. Why not pull a clean copy of the HTML from the URL?\r\n\r\nThe only upside to dumping the actual DOM (that I can think of) is if the page in question is under  restricted access...?',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19','',0,0),(10335,340,'Mark Stacey','mstacey@pragmaticworks.com','','196.210.213.217','2012-04-07 16:26:40','2012-04-07 15:26:40','There is always the old \r\n\r\nUPDATE tableX\r\nSET columnX = @Value,\r\n@Value = @Value + ColumnX\r\n\r\nNew windowing functions will be great, looking forward to it',0,'1','Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)','',0,0),(10337,68,'Harvest Playback, April 7th Edition | HARVEST Time Tracking and Invoicing Blog','','http://www.getharvest.com/blog/2012/04/harvest-playback-april-7th-edition/','72.251.221.76','2012-04-07 20:47:59','2012-04-07 19:47:59','[...] way to view source on iPhone or iPad. We&#8217;re working on a project for the touch devices right now, and this handy bookmarklet is [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10328,340,'Aaron Bertrand','aaron.bertrand@gmail.com','http://sqlsentry.net/','74.103.206.102','2012-04-06 23:24:53','2012-04-06 22:24:53','There is another caveat to the CTE method - it relies on there to be no gaps in the id column. You can get around this by first constructing row numbers in a separate CTE, and ensuring that you\'re correctly breaking any ties, but of course this adds a layer to the query and will surely make performance suffer.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.5 Safari/534.55.3','',0,0),(10269,68,'如何在移动版 Safari 浏览器上”查看源代码”[教程] | .i.分享','','http://www.looogle.com/archives/6421.html','182.50.130.134','2012-04-01 02:57:04','2012-04-01 01:57:04','[...] PS：上面操作步骤中的代码来自 Michelsen.dk 网站，因此在执行时会将页面发送至该网站服务器进行处理。 [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.1','pingback',0,0),(10265,68,'Ole Michelsen','ole@michelsen.dk','http://ole.michelsen.dk','81.7.190.50','2012-03-31 16:32:30','2012-03-31 15:32:30','Hi Mike and Benjamin, I have updated the article with the source-code (PHP) for the back end stuff. Feel free to improve on it for your own needs.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.142 Safari/535.19','',10263,2),(11224,68,'Jasonmcdermott &raquo; On &#8216;View Source&#8217; and mass creativity','','http://www.jasonmcdermott.net/2012/06/view-source/','173.254.28.18','2012-06-15 04:52:05','2012-06-15 03:52:05','[...] — there is such a thing as view source on the iPad, courtesy of some javascript magic from Ole Michelson, who says; As a web developer I’m frequently looking at the source code of various websites. [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.4','pingback',0,0),(11300,68,'Quellcode einer Webseite &laquo; iAppMag','','http://www.iappmag.de/2012/06/quellcode-einer-webseite/','84.19.175.41','2012-06-19 14:40:59','2012-06-19 13:40:59','[...] einer Webseite zu sehen, mit dem iPad oder dem iPhone ist dies jetzt auch möglich. Der Entwickler Ole Michelsen hat ein kleines Script entwickelt, wodurch man ganz einfach den Quellcode anzeigen lassen [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.3.2','pingback',0,0),(11709,340,'Ralf','ralf.hermanns@gmx.de','','91.102.136.106','2012-07-09 15:24:53','2012-07-09 14:24:53','Die genau gleiche Syntax der Aggregatrangfunktion gab es schon seit SQL Server 2012, da wurde aber nicht die LAUFENDE Summe sondern immer das Total für die Partition des OVER-Abschnittes zurückgegeben.\r\nIch habe selber noch keinen SQL Server 2012 benutzt - ist es wirklich so dass die gleiche Syntax jetzt andere Ergebnisse erzeugt??',0,'1','Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)','',0,0),(11710,340,'Ralf','ralf.hermanns@gmx.de','','91.102.136.106','2012-07-09 15:27:32','2012-07-09 14:27:32','Oh my, I am sorry, I was shown this page through a language translator and did not realize it was in English. Here the translated remark:\r\nThe same function did exist since SQL 2005, you could issue a SUM() OVER (partition / order). The result was a total for all rows in the partition, but the same on every row (no running total, just... total)\r\nDid the beaviour really change? Does the same syntax generate a different in SQL 2012?? I never used one so I could not test yet.',0,'1','Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; .NET4.0E)','',0,0),(11711,340,'Ole Michelsen','ole@michelsen.dk','http://ole.michelsen.dk','10.45.4.9','2012-07-09 15:38:46','2012-07-09 14:38:46','Hi Ralf, yes this is true, but using SUM() with OVER(PARTITION) will not give you a <em>running total</em>. The running total is the sum of all previous lines including the current one. Your version gives the sum for all rows. Try to compare the test results in my script with your version to see the difference.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1','',11710,2),(13070,68,'Michael','hw.dengxiong@gmail.com','','121.34.124.34','2012-09-10 14:49:53','2012-09-10 13:49:53','It\'s really useful! Thank you very much!',0,'1','Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19','',0,0),(11415,68,'How to View Website Source Codes on iPad / iPhone [Quicktip] | Indoor Digital Billboards','','http://indoorbillboards.cc/how-to-view-website-source-codes-on-ipad-iphone-quicktip','184.168.152.139','2012-06-25 09:07:09','2012-06-25 08:07:09','[...] from your mobile device. Take note that the code you will be using will redirect you to the creator&#8217;s website, where the source is presented in highlighted syntax and clickable URL for easier [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.2.1','pingback',0,0),(11617,68,'Ben','troubadour2404@yahoo.fr','','126.226.205.87','2012-07-05 01:01:47','2012-07-05 00:01:47','Hello! \r\nI just wanted to say thanks for this neat piece of code : I\'ve been trying many apps but none of them were effective. I finally found your page and followed the very simple tutorial. Now, the viewing of the source code is made easier with the standard colors and it\'s pretty quick. Thanks for your time and efforts. \r\nBen.',0,'1','Mozilla/5.0 (iPhone; CPU iPhone OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3','',0,0),(12202,68,'在手機和平板上觀看網站原始碼 | 超級電腦網','','http://s3131212.tw/mobile-view-source/','31.170.160.76','2012-08-01 10:09:56','2012-08-01 09:09:56','[...] 程式開發:http://ole.michelsen.dk/blog/view-source-on-the-ipad-and-iphone/ 註:如果對這個程式有興趣，很好奇server-side [...]',0,'1','The Incutio XML-RPC PHP Library -- WordPress/3.4.1','pingback',0,0),(11627,153,'Ich','Ich@example.com','','213.128.122.2','2012-07-05 12:40:53','2012-07-05 11:40:53','Brillant!!! Many thanks!',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1','',0,0),(13766,300,'Doug','douglas.tarr@gmail.com','','174.62.122.38','2012-10-02 17:26:19','2012-10-02 16:26:19','It\'d be great if you made this into a Nuget package.',0,'1','Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.79 Safari/537.4','',0,0),(12665,68,'David Giragosian','dgiragosian@gmail.com','','143.111.80.31','2012-08-20 13:45:09','2012-08-20 12:45:09','Ole, I am wondering if you are logging the source code that is rendered when I use your resource?If so, would you please use my email to respond, and I can explain further. \r\nThank you for your excellent work.',0,'1','Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.79 Safari/537.1','',0,0),(12668,68,'Ole Michelsen','ole@michelsen.dk','http://ole.michelsen.dk','10.45.4.9','2012-08-20 15:04:48','2012-08-20 14:04:48','Hi David,\n\nNo, I am not logging anything from the posted requests. They are only sent to the server to be formatted for display.',0,'1','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:14.0) Gecko/20100101 Firefox/14.0.1','',12665,2);
/*!40000 ALTER TABLE `ole_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_links`
--

DROP TABLE IF EXISTS `ole_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=MyISAM AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_links`
--

LOCK TABLES `ole_links` WRITE;
/*!40000 ALTER TABLE `ole_links` DISABLE KEYS */;
INSERT INTO `ole_links` VALUES (1,'http://codex.wordpress.org/','Documentation','','','','Y',1,0,'0000-00-00 00:00:00','','',''),(2,'http://wordpress.org/news/','WordPress Blog','','','','Y',1,0,'0000-00-00 00:00:00','','','http://wordpress.org/news/feed/'),(3,'http://wordpress.org/extend/ideas/','Suggest Ideas','','','','Y',1,0,'0000-00-00 00:00:00','','',''),(4,'http://wordpress.org/support/','Support Forum','','','','Y',1,0,'0000-00-00 00:00:00','','',''),(5,'http://wordpress.org/extend/plugins/','Plugins','','','','Y',1,0,'0000-00-00 00:00:00','','',''),(6,'http://wordpress.org/extend/themes/','Themes','','','','Y',1,0,'0000-00-00 00:00:00','','',''),(7,'http://planet.wordpress.org/','WordPress Planet','','','','Y',1,0,'0000-00-00 00:00:00','','','');
/*!40000 ALTER TABLE `ole_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_options`
--

DROP TABLE IF EXISTS `ole_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(64) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=MyISAM AUTO_INCREMENT=3413 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_options`
--

LOCK TABLES `ole_options` WRITE;
/*!40000 ALTER TABLE `ole_options` DISABLE KEYS */;
INSERT INTO `ole_options` VALUES (1,'siteurl','http://ole.michelsen.dk/blog','yes'),(2,'blogname','Ole Michelsen','yes'),(3,'blogdescription','In liu of a Generic&lt;Tagline&gt;','yes'),(4,'users_can_register','0','yes'),(5,'admin_email','ole@michelsen.dk','yes'),(6,'start_of_week','1','yes'),(7,'use_balanceTags','','yes'),(8,'use_smilies','1','yes'),(9,'require_name_email','1','yes'),(10,'comments_notify','1','yes'),(11,'posts_per_rss','10','yes'),(12,'rss_use_excerpt','0','yes'),(13,'mailserver_url','mail.example.com','yes'),(14,'mailserver_login','login@example.com','yes'),(15,'mailserver_pass','password','yes'),(16,'mailserver_port','110','yes'),(17,'default_category','1','yes'),(18,'default_comment_status','open','yes'),(19,'default_ping_status','open','yes'),(20,'default_pingback_flag','1','yes'),(21,'default_post_edit_rows','10','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','F j, Y','yes'),(24,'time_format','H:i','yes'),(25,'links_updated_date_format','F j, Y g:i a','yes'),(26,'links_recently_updated_prepend','<em>','yes'),(27,'links_recently_updated_append','</em>','yes'),(28,'links_recently_updated_time','120','yes'),(29,'comment_moderation','0','yes'),(30,'moderation_notify','1','yes'),(31,'permalink_structure','/%postname%/','yes'),(32,'gzipcompression','0','yes'),(33,'hack_file','0','yes'),(34,'blog_charset','UTF-8','yes'),(35,'moderation_keys','','no'),(36,'active_plugins','a:7:{i:0;s:33:\"addthis/addthis_social_widget.php\";i:1;s:19:\"akismet/akismet.php\";i:2;s:50:\"google-analytics-for-wordpress/googleanalytics.php\";i:3;s:24:\"wordpress-seo/wp-seo.php\";i:4;s:29:\"wp-dbmanager/wp-dbmanager.php\";i:5;s:26:\"wp-footnotes/footnotes.php\";i:6;s:23:\"wp-syntax/wp-syntax.php\";}','yes'),(37,'home','http://ole.michelsen.dk/blog','yes'),(38,'category_base','','yes'),(39,'ping_sites','http://rpc.pingomatic.com/','yes'),(40,'advanced_edit','0','yes'),(41,'comment_max_links','2','yes'),(42,'gmt_offset','1','yes'),(43,'default_email_category','1','yes'),(44,'recently_edited','a:5:{i:0;s:81:\"/var/www/clients/client5/web22/web/ole/blog/wp-content/themes/michelsen/style.css\";i:1;s:82:\"/var/www/clients/client5/web22/web/ole/blog/wp-content/plugins/akismet/akismet.php\";i:2;s:111:\"/customers/michelsen.dk/michelsen.dk/httpd.www/ole/blog/wp-content/plugins/google-sitemap-generator/sitemap.php\";i:3;s:104:\"/customers/michelsen.dk/michelsen.dk/httpd.www/ole/blog/wp-content/themes/twentyten/editor-style-rtl.css\";i:4;s:0:\"\";}','no'),(45,'template','michelsen','yes'),(46,'stylesheet','michelsen','yes'),(47,'comment_whitelist','1','yes'),(48,'blacklist_keys','','no'),(49,'comment_registration','0','yes'),(51,'html_type','text/html','yes'),(52,'use_trackback','0','yes'),(53,'default_role','subscriber','yes'),(54,'db_version','21707','yes'),(55,'uploads_use_yearmonth_folders','1','yes'),(56,'upload_path','','yes'),(57,'blog_public','1','yes'),(58,'default_link_category','2','yes'),(59,'show_on_front','posts','yes'),(60,'tag_base','','yes'),(61,'show_avatars','1','yes'),(62,'avatar_rating','G','yes'),(63,'upload_url_path','','yes'),(64,'thumbnail_size_w','150','yes'),(65,'thumbnail_size_h','150','yes'),(66,'thumbnail_crop','1','yes'),(67,'medium_size_w','300','yes'),(68,'medium_size_h','300','yes'),(69,'avatar_default','mystery','yes'),(70,'enable_app','','yes'),(71,'enable_xmlrpc','1','yes'),(72,'large_size_w','1024','yes'),(73,'large_size_h','1024','yes'),(74,'image_default_link_type','file','yes'),(75,'image_default_size','','yes'),(76,'image_default_align','','yes'),(77,'close_comments_for_old_posts','0','yes'),(78,'close_comments_days_old','14','yes'),(79,'thread_comments','1','yes'),(80,'thread_comments_depth','5','yes'),(81,'page_comments','0','yes'),(82,'comments_per_page','50','yes'),(83,'default_comments_page','newest','yes'),(84,'comment_order','asc','yes'),(85,'sticky_posts','a:0:{}','yes'),(86,'widget_categories','a:3:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}i:3;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(87,'widget_text','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(88,'widget_rss','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(89,'timezone_string','','yes'),(90,'embed_autourls','1','yes'),(91,'embed_size_w','','yes'),(92,'embed_size_h','600','yes'),(93,'page_for_posts','0','yes'),(94,'page_on_front','0','yes'),(95,'ole_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:63:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:9:\"add_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:15:\"manage_database\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(96,'widget_search','a:3:{i:2;a:1:{s:5:\"title\";s:0:\"\";}i:3;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(97,'widget_recent-posts','a:3:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}i:3;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(98,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(99,'widget_archives','a:3:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}i:3;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(100,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(101,'sidebars_widgets','a:8:{s:19:\"wp_inactive_widgets\";a:13:{i:0;s:7:\"pages-2\";i:1;s:10:\"calendar-2\";i:2;s:7:\"links-2\";i:3;s:6:\"text-2\";i:4;s:5:\"rss-2\";i:5;s:11:\"tag_cloud-2\";i:6;s:10:\"nav_menu-2\";i:7;s:14:\"recent-posts-2\";i:8;s:17:\"recent-comments-2\";i:9;s:12:\"categories-2\";i:10;s:6:\"meta-2\";i:11;s:8:\"search-3\";i:12;s:10:\"archives-3\";}s:19:\"primary-widget-area\";a:5:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-3\";i:2;s:12:\"categories-3\";i:3;s:10:\"archives-2\";i:4;s:11:\"tag_cloud-3\";}s:21:\"secondary-widget-area\";a:0:{}s:24:\"first-footer-widget-area\";a:0:{}s:25:\"second-footer-widget-area\";a:0:{}s:24:\"third-footer-widget-area\";a:0:{}s:25:\"fourth-footer-widget-area\";a:0:{}s:13:\"array_version\";i:3;}','yes'),(102,'cron','a:8:{i:1288942723;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1288942734;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1308310766;a:1:{s:8:\"do_pings\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1312561976;a:1:{s:24:\"akismet_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1313654859;a:1:{s:13:\"sm_build_cron\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1325709207;a:1:{s:29:\"akismet_schedule_cron_recheck\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1347576004;a:1:{s:25:\"wpseo_ping_search_engines\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}s:7:\"version\";i:2;}','yes'),(103,'_transient_doing_cron','1350811739.4146270751953125000000','yes'),(3354,'_site_transient_timeout_theme_roots','1350811757','yes'),(3355,'_site_transient_theme_roots','a:3:{s:9:\"michelsen\";s:7:\"/themes\";s:12:\"twentyeleven\";s:7:\"/themes\";s:9:\"twentyten\";s:7:\"/themes\";}','yes'),(109,'widget_pages','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(564,'default_post_format','','yes'),(144,'mods_Twenty Ten','a:1:{s:12:\"header_image\";s:87:\"http://ole.michelsen.dk/blog/wp-content/themes/twentyten/images/headers/forestfloor.jpg\";}','yes'),(2748,'_site_transient_update_themes','O:8:\"stdClass\":3:{s:12:\"last_checked\";i:1350809958;s:7:\"checked\";a:3:{s:9:\"michelsen\";s:3:\"1.0\";s:12:\"twentyeleven\";s:3:\"1.4\";s:9:\"twentyten\";s:3:\"1.4\";}s:8:\"response\";a:0:{}}','yes'),(110,'widget_calendar','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(111,'widget_links','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(112,'widget_tag_cloud','a:3:{i:2;a:0:{}i:3;a:2:{s:5:\"title\";s:0:\"\";s:8:\"taxonomy\";s:8:\"post_tag\";}s:12:\"_multiwidget\";i:1;}','yes'),(113,'widget_nav_menu','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(114,'dashboard_widget_options','a:4:{s:25:\"dashboard_recent_comments\";a:1:{s:5:\"items\";i:5;}s:24:\"dashboard_incoming_links\";a:5:{s:4:\"home\";s:28:\"http://ole.michelsen.dk/blog\";s:4:\"link\";s:104:\"http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:http://ole.michelsen.dk/blog/\";s:3:\"url\";s:137:\"http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=10&output=rss&partner=wordpress&q=link:http://ole.michelsen.dk/blog/\";s:5:\"items\";i:10;s:9:\"show_date\";b:0;}s:17:\"dashboard_primary\";a:7:{s:4:\"link\";s:26:\"http://wordpress.org/news/\";s:3:\"url\";s:31:\"http://wordpress.org/news/feed/\";s:5:\"title\";s:14:\"WordPress Blog\";s:5:\"items\";i:2;s:12:\"show_summary\";i:1;s:11:\"show_author\";i:0;s:9:\"show_date\";i:1;}s:19:\"dashboard_secondary\";a:7:{s:4:\"link\";s:28:\"http://planet.wordpress.org/\";s:3:\"url\";s:33:\"http://planet.wordpress.org/feed/\";s:5:\"title\";s:20:\"Other WordPress News\";s:5:\"items\";i:5;s:12:\"show_summary\";i:0;s:11:\"show_author\";i:0;s:9:\"show_date\";i:0;}}','yes'),(998,'current_theme','Michelsen','yes'),(995,'theme_mods_michelsen-2.0','a:1:{i:0;b:0;}','yes'),(996,'widget_widget_twentyeleven_ephemera','a:2:{i:2;a:0:{}s:12:\"_multiwidget\";i:1;}','yes'),(523,'ftp_credentials','a:3:{s:8:\"hostname\";s:10:\"10.10.20.5\";s:8:\"username\";s:15:\"om_dk_michelsen\";s:15:\"connection_type\";s:3:\"ftp\";}','yes'),(2377,'category_children','a:0:{}','yes'),(3396,'_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a','1350820981','yes'),(3411,'_site_transient_update_plugins','O:8:\"stdClass\":3:{s:12:\"last_checked\";i:1350811426;s:7:\"checked\";a:9:{s:33:\"addthis/addthis_social_widget.php\";s:3:\"3.0\";s:19:\"akismet/akismet.php\";s:5:\"2.5.6\";s:50:\"google-analytics-for-wordpress/googleanalytics.php\";s:5:\"4.2.8\";s:9:\"hello.php\";s:3:\"1.6\";s:36:\"plus-one-button/mfields-plus-one.php\";s:5:\"0.1.2\";s:24:\"wordpress-seo/wp-seo.php\";s:7:\"1.2.8.7\";s:29:\"wp-dbmanager/wp-dbmanager.php\";s:4:\"2.63\";s:26:\"wp-footnotes/footnotes.php\";s:3:\"4.2\";s:23:\"wp-syntax/wp-syntax.php\";s:6:\"0.9.13\";}s:8:\"response\";a:0:{}}','yes'),(3397,'_site_transient_poptags_40cd750bba9870f18aada2478b24840a','a:40:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";s:4:\"3211\";}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"Post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";s:4:\"2116\";}s:6:\"plugin\";a:3:{s:4:\"name\";s:6:\"plugin\";s:4:\"slug\";s:6:\"plugin\";s:5:\"count\";s:4:\"1981\";}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";s:4:\"1623\";}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";s:4:\"1562\";}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";s:4:\"1387\";}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";s:4:\"1109\";}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";s:4:\"1090\";}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";s:4:\"1084\";}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";s:4:\"1051\";}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";s:4:\"1006\";}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";s:3:\"923\";}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";s:3:\"845\";}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";s:3:\"792\";}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"Facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";s:3:\"746\";}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";s:3:\"676\";}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";s:3:\"674\";}s:9:\"wordpress\";a:3:{s:4:\"name\";s:9:\"wordpress\";s:4:\"slug\";s:9:\"wordpress\";s:5:\"count\";s:3:\"660\";}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";s:3:\"650\";}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";s:3:\"602\";}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";s:3:\"579\";}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";s:3:\"565\";}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"AJAX\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";s:3:\"547\";}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";s:3:\"547\";}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";s:3:\"479\";}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";s:3:\"471\";}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";s:3:\"471\";}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";s:3:\"457\";}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";s:3:\"456\";}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";s:3:\"453\";}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";s:3:\"437\";}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";s:3:\"419\";}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";s:3:\"413\";}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";s:3:\"402\";}s:8:\"category\";a:3:{s:4:\"name\";s:8:\"category\";s:4:\"slug\";s:8:\"category\";s:5:\"count\";s:3:\"390\";}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";s:3:\"388\";}s:5:\"stats\";a:3:{s:4:\"name\";s:5:\"stats\";s:4:\"slug\";s:5:\"stats\";s:5:\"count\";s:3:\"388\";}s:5:\"flash\";a:3:{s:4:\"name\";s:5:\"flash\";s:4:\"slug\";s:5:\"flash\";s:5:\"count\";s:3:\"367\";}s:7:\"comment\";a:3:{s:4:\"name\";s:7:\"comment\";s:4:\"slug\";s:7:\"comment\";s:5:\"count\";s:3:\"361\";}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";s:3:\"360\";}}','yes'),(1652,'dbmanager_options','a:12:{s:13:\"mysqldumppath\";s:18:\"/usr/bin/mysqldump\";s:9:\"mysqlpath\";s:14:\"/usr/bin/mysql\";s:4:\"path\";s:64:\"/var/www/clients/client5/web22/web/ole/blog/wp-content/backup-db\";s:10:\"max_backup\";i:10;s:6:\"backup\";i:1;s:11:\"backup_gzip\";i:0;s:13:\"backup_period\";i:604800;s:12:\"backup_email\";s:16:\"ole@michelsen.dk\";s:8:\"optimize\";i:3;s:15:\"optimize_period\";i:86400;s:6:\"repair\";i:2;s:13:\"repair_period\";i:604800;}','yes'),(1296,'akismet_available_servers','a:4:{s:12:\"72.233.69.89\";b:1;s:12:\"66.135.58.61\";b:1;s:12:\"66.135.58.62\";b:1;s:12:\"72.233.69.88\";b:1;}','yes'),(1297,'akismet_connectivity_time','1312530979','yes'),(1298,'wordpress_api_key','91428b71e05b','yes'),(1299,'akismet_discard_month','false','yes'),(1300,'akismet_show_user_comments_approved','false','yes'),(1569,'wpseo_xml','a:11:{s:26:\"ignore_blog_public_warning\";s:0:\"\";s:20:\"ignore_page_comments\";s:0:\"\";s:16:\"ignore_permalink\";s:0:\"\";s:15:\"ms_defaults_set\";s:0:\"\";s:16:\"enablexmlsitemap\";s:2:\"on\";s:15:\"xml_ping_google\";s:2:\"on\";s:13:\"xml_ping_bing\";s:2:\"on\";s:14:\"xml_ping_yahoo\";s:2:\"on\";s:12:\"xml_ping_ask\";s:2:\"on\";s:34:\"taxonomies-category-not_in_sitemap\";s:2:\"on\";s:34:\"taxonomies-post_tag-not_in_sitemap\";s:2:\"on\";}','yes'),(1570,'wpseo','a:39:{s:26:\"ignore_blog_public_warning\";s:0:\"\";s:20:\"ignore_page_comments\";s:0:\"\";s:16:\"ignore_permalink\";s:0:\"\";s:15:\"ms_defaults_set\";s:0:\"\";s:10:\"title-home\";s:12:\"%%sitedesc%%\";s:13:\"metadesc-home\";s:0:\"\";s:10:\"title-post\";s:24:\"%%title%% | %%sitename%%\";s:13:\"metadesc-post\";s:11:\"%%excerpt%%\";s:10:\"title-page\";s:0:\"\";s:13:\"metadesc-page\";s:0:\"\";s:16:\"title-attachment\";s:0:\"\";s:19:\"metadesc-attachment\";s:0:\"\";s:14:\"title-category\";s:22:\"%%tag%% | %%sitename%%\";s:17:\"metadesc-category\";s:0:\"\";s:14:\"title-post_tag\";s:27:\"%%category%% | %%sitename%%\";s:17:\"metadesc-post_tag\";s:0:\"\";s:12:\"title-author\";s:0:\"\";s:15:\"metadesc-author\";s:0:\"\";s:13:\"title-archive\";s:0:\"\";s:16:\"metadesc-archive\";s:0:\"\";s:12:\"title-search\";s:0:\"\";s:9:\"title-404\";s:0:\"\";s:14:\"noindex-author\";s:0:\"\";s:14:\"disable-author\";s:0:\"\";s:15:\"noindex-archive\";s:0:\"\";s:16:\"noindex-category\";s:0:\"\";s:16:\"noindex-post_tag\";s:0:\"\";s:19:\"noindex-post_format\";s:0:\"\";s:16:\"noindex-subpages\";s:0:\"\";s:12:\"hide-rsdlink\";s:0:\"\";s:14:\"hide-feedlinks\";s:0:\"\";s:16:\"hide-wlwmanifest\";s:0:\"\";s:14:\"hide-shortlink\";s:0:\"\";s:10:\"title_test\";b:1;s:7:\"version\";s:7:\"1.2.8.7\";s:11:\"ignore_tour\";s:6:\"ignore\";s:14:\"yoast_tracking\";s:2:\"on\";s:14:\"tracking_popup\";s:2:\"on\";s:4:\"hash\";s:32:\"7a746e7eb8ed7577f339906c296e375f\";}','yes'),(679,'recently_activated','a:1:{s:36:\"plus-one-button/mfields-plus-one.php\";i:1350810645;}','yes'),(1575,'wpseo_internallinks','a:12:{s:26:\"ignore_blog_public_warning\";s:0:\"\";s:20:\"ignore_page_comments\";s:0:\"\";s:16:\"ignore_permalink\";s:0:\"\";s:15:\"ms_defaults_set\";s:0:\"\";s:18:\"breadcrumbs-enable\";s:2:\"on\";s:15:\"breadcrumbs-sep\";s:8:\"&rsaquo;\";s:16:\"breadcrumbs-home\";s:4:\"Blog\";s:18:\"breadcrumbs-prefix\";s:147:\"<span itemscope itemtype=\"http://data-vocabulary.org/Breadcrumb\"><a href=\"/\" itemprop=\"url\"><span itemprop=\"title\">Home</span></a></span> &rsaquo; \";s:25:\"breadcrumbs-archiveprefix\";s:0:\"\";s:24:\"breadcrumbs-searchprefix\";s:0:\"\";s:20:\"breadcrumbs-404crumb\";s:0:\"\";s:23:\"post_types-post-maintax\";s:1:\"0\";}','yes'),(1576,'wpseo_titles','a:34:{s:26:\"ignore_blog_public_warning\";s:0:\"\";s:20:\"ignore_page_comments\";s:0:\"\";s:16:\"ignore_permalink\";s:0:\"\";s:15:\"ms_defaults_set\";s:0:\"\";s:10:\"title-home\";s:12:\"%%sitedesc%%\";s:13:\"metadesc-home\";s:0:\"\";s:10:\"title-post\";s:24:\"%%title%% | %%sitename%%\";s:13:\"metadesc-post\";s:11:\"%%excerpt%%\";s:10:\"title-page\";s:0:\"\";s:13:\"metadesc-page\";s:0:\"\";s:16:\"title-attachment\";s:0:\"\";s:19:\"metadesc-attachment\";s:0:\"\";s:14:\"title-category\";s:22:\"%%tag%% | %%sitename%%\";s:17:\"metadesc-category\";s:0:\"\";s:14:\"title-post_tag\";s:27:\"%%category%% | %%sitename%%\";s:17:\"metadesc-post_tag\";s:0:\"\";s:12:\"title-author\";s:0:\"\";s:15:\"metadesc-author\";s:0:\"\";s:13:\"title-archive\";s:0:\"\";s:16:\"metadesc-archive\";s:0:\"\";s:12:\"title-search\";s:0:\"\";s:9:\"title-404\";s:0:\"\";s:14:\"noindex-author\";s:0:\"\";s:14:\"disable-author\";s:0:\"\";s:15:\"noindex-archive\";s:0:\"\";s:16:\"noindex-category\";s:0:\"\";s:16:\"noindex-post_tag\";s:0:\"\";s:19:\"noindex-post_format\";s:0:\"\";s:16:\"noindex-subpages\";s:0:\"\";s:12:\"hide-rsdlink\";s:0:\"\";s:14:\"hide-feedlinks\";s:0:\"\";s:16:\"hide-wlwmanifest\";s:0:\"\";s:14:\"hide-shortlink\";s:0:\"\";s:17:\"forcerewritetitle\";s:2:\"on\";}','yes'),(1623,'wpseo_taxonomy_meta','a:3:{s:8:\"post_tag\";a:1:{i:35;a:7:{s:11:\"wpseo_title\";s:0:\"\";s:10:\"wpseo_desc\";s:0:\"\";s:13:\"wpseo_bctitle\";s:0:\"\";s:15:\"wpseo_canonical\";s:0:\"\";s:21:\"wpseo_sitemap_include\";s:1:\"-\";s:13:\"wpseo_noindex\";b:0;s:14:\"wpseo_nofollow\";b:0;}}s:8:\"category\";a:1:{i:7;a:7:{s:11:\"wpseo_title\";s:0:\"\";s:10:\"wpseo_desc\";s:0:\"\";s:13:\"wpseo_bctitle\";s:0:\"\";s:15:\"wpseo_canonical\";s:0:\"\";s:21:\"wpseo_sitemap_include\";s:1:\"-\";s:13:\"wpseo_noindex\";b:0;s:14:\"wpseo_nofollow\";b:0;}}s:8:\"nav_menu\";a:1:{i:21;a:2:{s:13:\"wpseo_noindex\";b:0;s:14:\"wpseo_nofollow\";b:0;}}}','yes'),(3388,'_transient_timeout_plugin_slugs','1350897895','no'),(3389,'_transient_plugin_slugs','a:8:{i:0;s:33:\"addthis/addthis_social_widget.php\";i:1;s:19:\"akismet/akismet.php\";i:2;s:50:\"google-analytics-for-wordpress/googleanalytics.php\";i:3;s:9:\"hello.php\";i:4;s:24:\"wordpress-seo/wp-seo.php\";i:5;s:29:\"wp-dbmanager/wp-dbmanager.php\";i:6;s:26:\"wp-footnotes/footnotes.php\";i:7;s:23:\"wp-syntax/wp-syntax.php\";}','no'),(145,'Yoast_Google_Analytics','a:45:{s:16:\"trackcommentform\";b:1;s:16:\"ignore_userlevel\";s:2:\"11\";s:7:\"version\";s:5:\"4.2.8\";s:3:\"msg\";s:0:\"\";s:8:\"uastring\";s:13:\"UA-19571265-2\";s:12:\"dlextensions\";s:0:\"\";s:11:\"domainorurl\";s:6:\"domain\";s:8:\"position\";s:6:\"header\";s:6:\"domain\";s:0:\"\";s:8:\"ga_token\";s:0:\"\";s:10:\"extraseurl\";s:0:\"\";s:7:\"gajsurl\";s:0:\"\";s:15:\"gfsubmiteventpv\";s:0:\"\";s:11:\"trackprefix\";s:0:\"\";s:12:\"internallink\";s:0:\"\";s:17:\"internallinklabel\";s:0:\"\";s:7:\"extrase\";b:0;s:13:\"trackoutbound\";b:0;s:13:\"admintracking\";b:0;s:12:\"trackadsense\";b:0;s:11:\"allowanchor\";b:0;s:11:\"allowlinker\";b:0;s:14:\"rsslinktagging\";b:0;s:16:\"advancedsettings\";b:0;s:17:\"trackregistration\";b:0;s:13:\"theme_updated\";b:0;s:11:\"cv_loggedin\";b:0;s:13:\"cv_authorname\";b:0;s:11:\"cv_category\";b:0;s:17:\"cv_all_categories\";b:0;s:7:\"cv_tags\";b:0;s:7:\"cv_year\";b:0;s:12:\"cv_post_type\";b:0;s:16:\"outboundpageview\";b:0;s:17:\"downloadspageview\";b:0;s:16:\"gajslocalhosting\";b:0;s:15:\"manual_uastring\";b:1;s:11:\"taggfsubmit\";b:0;s:13:\"wpec_tracking\";b:0;s:14:\"shopp_tracking\";b:0;s:11:\"anonymizeip\";b:0;s:5:\"debug\";b:0;s:11:\"firebuglite\";b:0;s:14:\"tracking_popup\";s:4:\"done\";s:14:\"yoast_tracking\";b:0;}','yes'),(152,'_transient_random_seed','b19352d32fdfcb7d9158aaca6c92d362','yes'),(1957,'initial_db_version','18226','yes'),(2594,'_site_transient_timeout_browser_2970ac2362d4ebac0a9a827a40937278','1337605106','yes'),(565,'db_upgraded','','yes'),(158,'sm_options','a:58:{s:18:\"sm_b_prio_provider\";s:41:\"GoogleSitemapGeneratorPrioByCountProvider\";s:13:\"sm_b_filename\";s:11:\"sitemap.xml\";s:10:\"sm_b_debug\";b:0;s:8:\"sm_b_xml\";b:1;s:9:\"sm_b_gzip\";b:1;s:9:\"sm_b_ping\";b:1;s:14:\"sm_b_pingyahoo\";b:0;s:13:\"sm_b_yahookey\";s:0:\"\";s:12:\"sm_b_pingask\";b:1;s:12:\"sm_b_pingmsn\";b:1;s:19:\"sm_b_manual_enabled\";b:0;s:17:\"sm_b_auto_enabled\";b:1;s:15:\"sm_b_auto_delay\";b:1;s:15:\"sm_b_manual_key\";s:32:\"f0b892050fe212d47e00ef1f057c493c\";s:11:\"sm_b_memory\";s:0:\"\";s:9:\"sm_b_time\";i:-1;s:14:\"sm_b_max_posts\";i:-1;s:13:\"sm_b_safemode\";b:0;s:18:\"sm_b_style_default\";b:1;s:10:\"sm_b_style\";s:0:\"\";s:11:\"sm_b_robots\";b:1;s:12:\"sm_b_exclude\";a:0:{}s:17:\"sm_b_exclude_cats\";a:0:{}s:18:\"sm_b_location_mode\";s:4:\"auto\";s:20:\"sm_b_filename_manual\";s:67:\"/customers/michelsen.dk/michelsen.dk/httpd.www/ole/blog/sitemap.xml\";s:19:\"sm_b_fileurl_manual\";s:40:\"http://ole.michelsen.dk/blog/sitemap.xml\";s:10:\"sm_in_home\";b:1;s:11:\"sm_in_posts\";b:1;s:15:\"sm_in_posts_sub\";b:0;s:11:\"sm_in_pages\";b:1;s:10:\"sm_in_cats\";b:0;s:10:\"sm_in_arch\";b:0;s:10:\"sm_in_auth\";b:0;s:10:\"sm_in_tags\";b:0;s:9:\"sm_in_tax\";a:0:{}s:13:\"sm_in_lastmod\";b:1;s:10:\"sm_cf_home\";s:5:\"daily\";s:11:\"sm_cf_posts\";s:7:\"monthly\";s:11:\"sm_cf_pages\";s:6:\"weekly\";s:10:\"sm_cf_cats\";s:6:\"weekly\";s:10:\"sm_cf_auth\";s:6:\"weekly\";s:15:\"sm_cf_arch_curr\";s:5:\"daily\";s:14:\"sm_cf_arch_old\";s:6:\"yearly\";s:10:\"sm_cf_tags\";s:6:\"weekly\";s:10:\"sm_pr_home\";d:1;s:11:\"sm_pr_posts\";d:0.59999999999999997779553950749686919152736663818359375;s:15:\"sm_pr_posts_min\";d:0.200000000000000011102230246251565404236316680908203125;s:11:\"sm_pr_pages\";d:0.59999999999999997779553950749686919152736663818359375;s:10:\"sm_pr_cats\";d:0.299999999999999988897769753748434595763683319091796875;s:10:\"sm_pr_arch\";d:0.299999999999999988897769753748434595763683319091796875;s:10:\"sm_pr_auth\";d:0.299999999999999988897769753748434595763683319091796875;s:10:\"sm_pr_tags\";d:0.299999999999999988897769753748434595763683319091796875;s:12:\"sm_i_donated\";b:0;s:17:\"sm_i_hide_donated\";b:0;s:17:\"sm_i_install_date\";i:1287650814;s:14:\"sm_i_hide_note\";b:1;s:15:\"sm_i_hide_works\";b:1;s:16:\"sm_i_hide_donors\";b:0;}','yes'),(159,'sm_status','O:28:\"GoogleSitemapGeneratorStatus\":34:{s:10:\"_startTime\";d:1313588241.6658198833465576171875;s:8:\"_endTime\";d:1313588252.2909939289093017578125;s:11:\"_hasChanged\";b:1;s:12:\"_memoryUsage\";i:19398656;s:9:\"_lastPost\";i:6;s:9:\"_lastTime\";d:1313588241.6826970577239990234375;s:8:\"_usedXml\";b:1;s:11:\"_xmlSuccess\";b:1;s:8:\"_xmlPath\";s:55:\"/var/www/clients/client5/web22/web/ole/blog/sitemap.xml\";s:7:\"_xmlUrl\";s:40:\"http://ole.michelsen.dk/blog/sitemap.xml\";s:8:\"_usedZip\";b:1;s:11:\"_zipSuccess\";b:1;s:8:\"_zipPath\";s:58:\"/var/www/clients/client5/web22/web/ole/blog/sitemap.xml.gz\";s:7:\"_zipUrl\";s:43:\"http://ole.michelsen.dk/blog/sitemap.xml.gz\";s:11:\"_usedGoogle\";b:1;s:10:\"_googleUrl\";s:108:\"http://www.google.com/webmasters/sitemaps/ping?sitemap=http%3A%2F%2Fole.michelsen.dk%2Fblog%2Fsitemap.xml.gz\";s:15:\"_gooogleSuccess\";b:1;s:16:\"_googleStartTime\";d:1313588241.699369907379150390625;s:14:\"_googleEndTime\";d:1313588241.93875789642333984375;s:10:\"_usedYahoo\";b:0;s:9:\"_yahooUrl\";s:0:\"\";s:13:\"_yahooSuccess\";b:0;s:15:\"_yahooStartTime\";i:0;s:13:\"_yahooEndTime\";i:0;s:8:\"_usedAsk\";b:1;s:7:\"_askUrl\";s:93:\"http://submissions.ask.com/ping?sitemap=http%3A%2F%2Fole.michelsen.dk%2Fblog%2Fsitemap.xml.gz\";s:11:\"_askSuccess\";b:0;s:13:\"_askStartTime\";d:1313588241.939762115478515625;s:11:\"_askEndTime\";d:1313588251.9415340423583984375;s:8:\"_usedMsn\";b:1;s:7:\"_msnUrl\";s:101:\"http://www.bing.com/webmaster/ping.aspx?siteMap=http%3A%2F%2Fole.michelsen.dk%2Fblog%2Fsitemap.xml.gz\";s:11:\"_msnSuccess\";b:0;s:13:\"_msnStartTime\";d:1313588251.9426209926605224609375;s:11:\"_msnEndTime\";d:1313588252.289536952972412109375;}','no'),(701,'aioseop_options','a:34:{s:9:\"aiosp_can\";i:1;s:12:\"aiosp_donate\";i:0;s:16:\"aiosp_home_title\";N;s:22:\"aiosp_home_description\";s:0:\"\";s:19:\"aiosp_home_keywords\";N;s:23:\"aiosp_max_words_excerpt\";s:9:\"something\";s:20:\"aiosp_rewrite_titles\";i:1;s:23:\"aiosp_post_title_format\";s:27:\"%post_title% | %blog_title%\";s:23:\"aiosp_page_title_format\";s:27:\"%page_title% | %blog_title%\";s:27:\"aiosp_category_title_format\";s:31:\"%category_title% | %blog_title%\";s:26:\"aiosp_archive_title_format\";s:21:\"%date% | %blog_title%\";s:22:\"aiosp_tag_title_format\";s:20:\"%tag% | %blog_title%\";s:25:\"aiosp_search_title_format\";s:23:\"%search% | %blog_title%\";s:24:\"aiosp_description_format\";s:13:\"%description%\";s:22:\"aiosp_404_title_format\";s:33:\"Nothing found for %request_words%\";s:18:\"aiosp_paged_format\";s:14:\" - Part %page%\";s:20:\"aiosp_use_categories\";i:0;s:32:\"aiosp_dynamic_postspage_keywords\";i:1;s:22:\"aiosp_category_noindex\";i:1;s:21:\"aiosp_archive_noindex\";i:1;s:18:\"aiosp_tags_noindex\";i:0;s:14:\"aiosp_cap_cats\";i:1;s:27:\"aiosp_generate_descriptions\";i:0;s:16:\"aiosp_debug_info\";N;s:20:\"aiosp_post_meta_tags\";s:0:\"\";s:20:\"aiosp_page_meta_tags\";s:0:\"\";s:20:\"aiosp_home_meta_tags\";s:0:\"\";s:13:\"aiosp_enabled\";i:0;s:17:\"aiosp_enablecpost\";i:0;s:26:\"aiosp_use_tags_as_keywords\";i:1;s:16:\"aiosp_seopostcol\";i:1;s:18:\"aiosp_seocustptcol\";i:0;s:21:\"aiosp_posttypecolumns\";a:2:{i:0;s:4:\"post\";i:1;s:4:\"page\";}s:12:\"aiosp_do_log\";N;}','yes'),(895,'mfields_plus_one','a:8:{s:9:\"alignment\";s:4:\"none\";s:8:\"language\";s:5:\"en-US\";s:10:\"show_count\";s:4:\"true\";s:4:\"size\";s:8:\"standard\";s:8:\"singular\";a:1:{i:0;s:13:\"after_content\";}s:6:\"markup\";s:4:\"html\";s:8:\"multiple\";a:0:{}s:10:\"post_types\";a:1:{i:0;s:4:\"post\";}}','yes'),(702,'aiosp_home_description','Thoughts and articles on web development with ASP.NET, MVC, HTML5, JavaScript and PHP and coding tips from my experiences.','yes'),(703,'aiosp_home_title','Web Development and Computer Science','yes'),(704,'psp_canonical','on','yes'),(705,'aiosp_home_keywords','web,development,asp,mvc,javascript,html5,css3,coding,seo,uri,ajax,php','yes'),(706,'aiosp_rewrite_titles','on','yes'),(707,'aiosp_use_categories','on','yes'),(708,'psp_use_tags','','yes'),(709,'psp_category_noindex','','yes'),(710,'psp_archive_noindex','on','yes'),(711,'psp_tags_noindex','','yes'),(712,'psp_comnts_pages_noindex','on','yes'),(713,'psp_comnts_feeds_noindex','on','yes'),(714,'psp_rss_feeds_noindex','on','yes'),(715,'psp_search_results_noindex','on','yes'),(716,'psp_sub_pages_home_noindex','on','yes'),(717,'psp_author_archives_noindex','on','yes'),(718,'psp_noodp_metatag','on','yes'),(719,'psp_noydir_metatag','on','yes'),(720,'psp_nofollow_cat_pages','','yes'),(721,'psp_nofollow_cat_posts','','yes'),(722,'psp_nofollow_arc_pages','','yes'),(723,'psp_nofollow_arc_posts','','yes'),(724,'psp_nofollow_ext_links','','yes'),(725,'psp_nofollow_login_reg','on','yes'),(726,'psp_nofollow_tag_pages','','yes'),(727,'psp_permalink_redirect','on','yes'),(728,'aiosp_generate_descriptions','','yes'),(729,'aiosp_post_title_format','%post_title% | %blog_title%','yes'),(730,'aiosp_page_title_format','%page_title% | %blog_title%','yes'),(731,'aiosp_category_title_format','%category_title% | %blog_title%','yes'),(732,'psp_taxonomy_title_format','%term% | %blog_title%','yes'),(733,'aiosp_archive_title_format','%date% | %blog_title%','yes'),(734,'aiosp_tag_title_format','%tag% | %blog_title%','yes'),(735,'aiosp_search_title_format','%search% | %blog_title%','yes'),(736,'aiosp_description_format','%description%','yes'),(737,'aiosp_paged_format',' - Part %page%','yes'),(738,'aiosp_404_title_format','Nothing found for %request_words%','yes'),(739,'aiosp_post_meta_tags','','yes'),(740,'aiosp_page_meta_tags','','yes'),(741,'aiosp_home_meta_tags','','yes'),(742,'aiosp_do_log','','yes'),(743,'psp_link_home','','yes'),(896,'swas_footnote_options','a:20:{s:11:\"superscript\";b:1;s:12:\"pre_backlink\";s:2:\" [\";s:8:\"backlink\";s:7:\"&#8617;\";s:13:\"post_backlink\";s:1:\"]\";s:14:\"pre_identifier\";s:0:\"\";s:15:\"list_style_type\";s:7:\"decimal\";s:15:\"post_identifier\";s:0:\"\";s:17:\"list_style_symbol\";s:8:\"&dagger;\";s:13:\"pre_footnotes\";s:0:\"\";s:14:\"post_footnotes\";s:0:\"\";s:11:\"style_rules\";s:45:\"ol.footnotes{font-size:0.8em; color:#666666;}\";s:15:\"no_display_home\";b:0;s:18:\"no_display_archive\";b:0;s:15:\"no_display_date\";b:0;s:19:\"no_display_category\";b:0;s:17:\"no_display_search\";b:1;s:15:\"no_display_feed\";b:1;s:23:\"combine_identical_notes\";b:0;s:8:\"priority\";s:2:\"11\";s:7:\"version\";s:3:\"4.2\";}','yes'),(746,'psp_max_words_excerpt','','yes'),(747,'psp_debug_info','','yes'),(2897,'_site_transient_timeout_wporg_theme_feature_list','1342705859','yes'),(2898,'_site_transient_wporg_theme_feature_list','a:5:{s:6:\"Colors\";a:15:{i:0;s:5:\"black\";i:1;s:4:\"blue\";i:2;s:5:\"brown\";i:3;s:4:\"gray\";i:4;s:5:\"green\";i:5;s:6:\"orange\";i:6;s:4:\"pink\";i:7;s:6:\"purple\";i:8;s:3:\"red\";i:9;s:6:\"silver\";i:10;s:3:\"tan\";i:11;s:5:\"white\";i:12;s:6:\"yellow\";i:13;s:4:\"dark\";i:14;s:5:\"light\";}s:7:\"Columns\";a:6:{i:0;s:10:\"one-column\";i:1;s:11:\"two-columns\";i:2;s:13:\"three-columns\";i:3;s:12:\"four-columns\";i:4;s:12:\"left-sidebar\";i:5;s:13:\"right-sidebar\";}s:5:\"Width\";a:2:{i:0;s:11:\"fixed-width\";i:1;s:14:\"flexible-width\";}s:8:\"Features\";a:18:{i:0;s:8:\"blavatar\";i:1;s:10:\"buddypress\";i:2;s:17:\"custom-background\";i:3;s:13:\"custom-colors\";i:4;s:13:\"custom-header\";i:5;s:11:\"custom-menu\";i:6;s:12:\"editor-style\";i:7;s:21:\"featured-image-header\";i:8;s:15:\"featured-images\";i:9;s:20:\"front-page-post-form\";i:10;s:19:\"full-width-template\";i:11;s:12:\"microformats\";i:12;s:12:\"post-formats\";i:13;s:20:\"rtl-language-support\";i:14;s:11:\"sticky-post\";i:15;s:13:\"theme-options\";i:16;s:17:\"threaded-comments\";i:17;s:17:\"translation-ready\";}s:7:\"Subject\";a:3:{i:0;s:7:\"holiday\";i:1;s:13:\"photoblogging\";i:2;s:8:\"seasonal\";}}','yes'),(750,'theme_mods_michelsen','a:2:{s:12:\"header_image\";s:84:\"http://ole.michelsen.dk/blog/wp-content/themes/michelsen/images/headers/keyboard.jpg\";s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:21;}}','yes'),(802,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(1325,'akismet_spam_count','13599','yes'),(2989,'_transient_timeout_feed_cbd2b3760852e41c6fbfed1d636ba836','1347341811','no'),(2990,'_transient_feed_cbd2b3760852e41c6fbfed1d636ba836','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:1:\" \";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:29:\"                             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:8:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"http://yoast.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Tweaking Websites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Sep 2012 14:07:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"http://wordpress.org/?v=3.4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"image\";a:1:{i:0;a:6:{s:4:\"data\";s:5:\"     \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:3:\"url\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://yoast.com/wp-content/themes/yoast-v2/images/yoast-logo-rss.png\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"http://yoast.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"width\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"144\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:6:\"height\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"103\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Tweaking Websites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}s:4:\"item\";a:20:{i:0;a:6:{s:4:\"data\";s:15:\"               \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WooThemes chooses WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/LKmy1Veod_c/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/welcome-woothemes-users/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Sep 2012 14:07:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:16:\"WordPress Themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=46021\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:838:\"<p>WooThemes once again showed that they are at the forefront of WordPress development today: they deprecated their WooFramework&#8217;s SEO functionality and recommend their users to switch to WordPress SEO by Yoast. I&#8217;ve worked closely with Matt Cohen, WooThemes CTO, to build an import functionality for WooThemes users straight into WordPress SEO. I recently added statistics&#8230;</p><p><a\nhref=\"http://yoast.com/welcome-woothemes-users/\">WooThemes chooses WordPress SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3313:\"<p><img\nclass=\"alignright size-full wp-image-45991\" title=\"WooThemes chooses WordPress SEO\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress.png\" alt=\"WooThemes chooses WordPress SEO\" width=\"203\" height=\"137\" />WooThemes once again showed that they are at the forefront of WordPress development today: they <a\nhref=\"http://www.woothemes.com/2012/09/every-line-of-code-audited/\">deprecated their WooFramework&#8217;s SEO functionality</a> and recommend their users to switch to <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO by Yoast</a>. I&#8217;ve worked closely with Matt Cohen, WooThemes CTO, to build an import functionality for WooThemes users straight into WordPress SEO.</p><p>I recently added statistics tracking to my two main plugins, and about 125,000 of you have already kindly agreed to send me some anonymous data. Because of that, I now know that <a\nhref=\"http://www.woothemes.com/2012/06/canvas/\">WooThemes Canvas</a> is actually one of the 10 most used themes <em>and</em> is used as a parent theme quite often as well, and their dozens of other themes are very, very popular, so this could mean a lot of new users for my SEO plugin. I welcome you all!</p><h2>WooSEO Import</h2><p>The WooSEO import functionality is very simple, activate the WordPress SEO plugin, go to SEO -&gt; Import and you&#8217;ll see this:</p><p><img\nclass=\"alignnone size-full wp-image-46022\" title=\"WooThemes Import at work: check the import from Woothemes box, press import\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import.png\" alt=\"WooThemes Import at work: check the import from Woothemes box, press import\" width=\"527\" height=\"281\" /></p><p>You can check if the data has imported ok by opening up some posts and seeing if your WordPress SEO box contains the titles and meta descriptions you had entered in WooSEO. If it has imported ok, repeat the process above but check the &#8220;Delete the old data&#8221; checkbox, this will make sure your database is as clean as can be by deleting the old WooSEO values from the database.</p><h2>Thank you to WooThemes!</h2><p>By doing this, WooThemes is finally doing what I&#8217;ve been proposing theme companies do <a\nhref=\"http://yoast.com/wordpress-seo-theme/\">for ages now</a>: stop trying to provide an SEO framework and focus on good code, great design and the functionality to change that design. That&#8217;s a step I thank &amp; applaud them for and I fully hope other theme vendors will do the same. I&#8217;m open to working with everybody on building import functionality when they decide to take this step.</p><p>Let me know what you think in the comments, and if you&#8217;re a recent &#8220;convert&#8221; coming from WooSEO, I&#8217;d seriously love to hear that too!</p><p><a\nhref=\"http://yoast.com/welcome-woothemes-users/\">WooThemes chooses WordPress SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/LKmy1Veod_c\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/welcome-woothemes-users/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:2:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:65:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WooThemes chooses WordPress SEO\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:69:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WooThemes Import at work: check the import from Woothemes box, press import\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import-180x114.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/welcome-woothemes-users/#utm_source=rss&utm_medium=rss&utm_campaign=welcome-woothemes-users\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:15:\"               \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Twitter Cards in action\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/uQYktVK1qOM/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/twitter-cards-in-action/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Sep 2012 20:22:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45981\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:749:\"<p>I first wrote about Twitter Cards in June, when Twitter had just announced them, today I got a tweet from Paul Savage who noticed that they were now enabled for yoast.com. That&#8217;s super awesome news as it means that the implementation I did in my WordPress SEO plugin works. Of course I had to do&#8230;</p><p><a\nhref=\"http://yoast.com/twitter-cards-in-action/\">Twitter Cards in action</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3768:\"<p><img\nclass=\"alignright size-full wp-image-45989\" title=\"Twitter Cards in action\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter.png\" alt=\"Twitter Cards in action\" width=\"203\" height=\"137\" />I first wrote about <a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards</a> in June, when Twitter had just announced them, today I got a tweet from <a\nhref=\"http://twitter.com/paulsavage\">Paul Savage</a> who noticed that they were now enabled for yoast.com. That&#8217;s super awesome news as it means that the implementation I did in my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> works.</p><p>Of course I had to do some tweaking afterwards, because as it turns out Twitter&#8217;s scraper for the Twitter Card data is easily confused (it doesn&#8217;t understand how to parse multiple og:images meta tags). But let me show you what it means if it works well; if you tweet an article from this site, you&#8217;ll see a normal tweet with a new &#8220;View Summary&#8221; link:</p><p><img\nclass=\"alignnone size-full wp-image-45983\" title=\"Tweet with summary button\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/tweet-summary-button.png\" alt=\"Tweet with summary button\" width=\"513\" height=\"88\" /></p><p>When you click that View summary link, the link &#8220;expands&#8221; and you&#8217;ll see this, the complete Twitter Card:</p><p><img\nclass=\"alignnone size-full wp-image-45982\" title=\"Expanded Twitter Card\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card.png\" alt=\"Expanded Twitter Card\" width=\"513\" height=\"314\" /></p><p>As you might notice my Twitter account is there twice, the top one is because I&#8217;m the author of that article, the second one is because I set the @yoast account as the main account for this site. So if you see an article tweeted that&#8217;s been written by Michiel, you&#8217;ll see his twitter account on top and the main @yoast account in the bottom:</p><p><img\nclass=\"size-full wp-image-45984 alignnone\" title=\"Twitter Card Michiel\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel.png\" alt=\"Twitter Card Michiel\" width=\"448\" height=\"187\" /></p><h2>Can I have Twitter Cards for my site?</h2><p>I know you&#8217;re asking yourself that question. I tested some sites that are running my SEO plugin on which I knew the Twitter Cards implementation in it is activated, but unfortunately couldn&#8217;t find any working examples outside of my own site yet. It seems that you really have to <a\nhref=\"https://dev.twitter.com/form/participate-twitter-cards\">apply to participate</a> with your site next to having the functionality active on your site (you can activate it on the SEO -&gt; Social menu).</p><p>So, the next step is another update of my SEO plugin which improves a bit on the current Twitter Card implementation now that I can test properly, expect that somewhere early next week. This update will also rely on OpenGraph when activated too where possible so you don&#8217;t have another 10 lines of Twitter meta data but instead only 3 or 4 lines for Twitter and the rest of the data coming from OpenGraph. Looking forward to seeing this work on other sites that run my SEO plugin!</p><p><a\nhref=\"http://yoast.com/twitter-cards-in-action/\">Twitter Cards in action</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/uQYktVK1qOM\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/twitter-cards-in-action/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"31\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:4:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:72:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Twitter Cards in action\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/tweet-summary-button.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Tweet with summary button\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/tweet-summary-button-125x88.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:82:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Expanded Twitter Card\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:90:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Twitter Card Michiel\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/twitter-cards-in-action/#utm_source=rss&utm_medium=rss&utm_campaign=twitter-cards-in-action\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"WordPress Archive Pages: the tutorial\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/ituadafIpro/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/wordpress-archive-pages/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Aug 2012 13:26:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45944\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:813:\"<p>On any bigger site, you&#8217;ll get archive pages of some sort. Whether they are taxonomy or category archives, like this SEO category, Custom Post Type archives like this one for our WordPress plugin reviews or my speaking engagements, or even date archives: they all share the same common traits. In WordPress an archive will, by default, consist&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-archive-pages/\">WordPress Archive Pages: the tutorial</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8281:\"<p><img\nclass=\"alignright size-full wp-image-45974\" title=\"WordPress Archive Pages\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1.png\" alt=\"WordPress Archive Pages\" width=\"203\" height=\"137\" />On any bigger site, you&#8217;ll get archive pages of some sort. Whether they are taxonomy or category archives, like this <a\nhref=\"http://yoast.com/cat/seo/\">SEO category</a>, Custom Post Type archives like this one for our <a\nhref=\"http://yoast.com/wp-plugin-review/\">WordPress plugin reviews</a> or my <a\nhref=\"http://yoast.com/speaking/\">speaking engagements</a>, or even date archives: they all share the same common traits. In WordPress an archive will, by default, consist only of a listing of posts. As these pages will get visited by normal people, that means those visitors are &#8220;thrown&#8221; upon a page that doesn&#8217;t try to tell them where they are.</p><p>This lack of introduction gives visitors only two options: leave immediately because they don&#8217;t understand where they&#8217;ve ended up, or click through to an article, without you having had <em>any</em> chance of pushing them in the right direction.</p><p>Because of that, every decent archive needs an &#8220;introduction&#8221;. This can be as simple as just a header that stands out, but for more important sections of your site, it actually pays of to write a bit of content.</p><p>Before you write that content though, you first have to make sure that the content you write actually displays on those archive pages.</p><h2>Show introductory content on archive pages</h2><h3>Categories, Tags and Custom Taxonomies</h3><p>For category, tag or custom taxonomy archives, you can simply create a custom template by creating a file. For categories, for instance, this file would be called category.php. If you don&#8217;t know how template hierarchy works within WordPress, check out <a\nhref=\"http://yoast.com/wordpress-theme-anatomy/\">our infographic</a> on the topic.</p><p>In this template, above the standard WordPress loop, you add the following code:</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php if ( !get_query_var( \'paged\' ) ) { ?--&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;/h1&gt;\n&lt;pre&gt;\n  &lt;!--?php echo wpautop( term_description() ); ?--&gt;\n&lt;!--?php } ?--&gt;</pre><p>This uses the title you set for the category / tag / custom taxonomy, as well as the description, which you can fill in the WordPress backend.</p><p>If you uses <a\nhref=\"http://yoast.com/wp-theme/genesis/\">Genesis</a>, you don&#8217;t need to create an extra file, you can probably just check the box in your Genesis theme settings:</p><p><img\nclass=\"alignnone\" title=\"Genesis Archive Settings\" src=\"http://cdn3.yoast.com/wp-content/uploads/2011/09/genesis-archive-settings.png\" alt=\"Genesis Archive Settings\" width=\"575\" height=\"99\" /></p><p>Or if that doesn&#8217;t work, you can just add this to your child theme&#8217;s functions.php (there&#8217;s still no need to make that file):</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php &lt;br ?--&gt;function yoast_term_archive_intro() {\n  if ( !is_category() &amp;&amp; !is_tag() &amp;&amp; !is_tax() )\n    return;\n\n  if( get_query_var( \'paged\' ) )\n    return;\n\n  echo \'&lt;/pre&gt;\n&lt;h1 class=&quot;entry-title&quot;&gt;\'.single_term_title(\'\', false).\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n  echo \'&lt;/pre&gt;\n&lt;div class=&quot;entry-content&quot;&gt;\'.wpautop( term_description() ).\'&lt;/div&gt;\n&lt;pre&gt;\n\';\n}\nadd_action( \'genesis_before_loop\', \'yoast_term_archive_intro\', 20 );</pre><p>Of course you can add some extra code or classes in there to style those boxes a bit more.</p><h3>Custom Post Type archives</h3><p>For custom post type archives, this might actually be a bit harder. The beginning of the process is the same: you can create a new file, the name of which should contain your post type: <em>archive-{posttype}.php</em>.</p><p>Then you could output the name of the post type using the following code:</p><pre class=\"brush: php; title: ; notranslate\">if ( !get_query_var( \'paged\' ) ) {\n$pt = get_post_type_object( get_post_type() );\necho \'&lt;/pre&gt;\n&lt;h1&gt;\'.$pt-&gt;labels-&gt;name.\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n}</pre><p>This is where the tricky bit comes in though: there is no backend in WordPress to input descriptions for these types of pages, nor is there a preferred way of storing that data. I added input fields for these to my Genesis child theme settings, which is too much to explain here, of course you could also hardcode it but that&#8217;s a bit ugly&#8230;</p><p>Within Genesis, with the data coming from my child theme settings, I output the text using the following code in my functions.php (again, no reason to create a new file):</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php &lt;br ?--&gt;function yoast_cpt_intro() {\n  if ( !is_post_type_archive() )\n    return;\n\n  if( get_query_var( \'paged\' ) )\n    return;\n\n  $pt = get_post_type();\n  if ( genesis_get_option( $pt.\'-title\', \'child-settings\' ) ) {\n    echo \'&lt;/pre&gt;\n&lt;h1&gt;\'.genesis_get_option( $pt.\'-title\', \'child-settings\' ).\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n    echo wpautop( genesis_get_option( $pt.\'-intro\', \'child-settings\' ) );\n  }\n}\nadd_action( \'genesis_before_loop\', \'yoast_cpt_intro\', 20 );</pre><h2>Prevent duplicate content</h2><p>To avoid <a\nhref=\"http://yoast.com/articles/duplicate-content/\">duplicate content</a>, we only add the introduction to the first page of an archive, if that archive is a paginated one. With the introduction of <a\nhref=\"http://yoast.com/rel-next-prev-paginated-archives/\">rel=&#8221;next&#8221; and rel=&#8221;previous&#8221;</a>, sites that have implemented this well will be getting more visitors to the first page of a paginated series of archives anyway, but we still don&#8217;t want to show the same content on multiple pages.</p><p>You might have noticed this line of code in the Genesis examples above:</p><pre class=\"brush: php; title: ; notranslate\">if( get_query_var( \'paged\' ) )\nreturn;</pre><p>This does exactly that: prevent the duplicate content.</p><h2>Styling the archive introduction text</h2><p>You should make sure that your introductory text for your archive really stands out. Remember, it&#8217;s not &#8220;just&#8221; there for SEO reasons, it&#8217;s there because people will read it! It&#8217;s very tempting to make it look just like another post, but you should take a bit more time and style it properly.</p><p>I personally like the way we&#8217;ve done that in our recent redesign, this is for instance what the <a\nhref=\"http://yoast.com/cat/wordpress/\">WordPress category</a> intro looks like:</p><p><img\nclass=\"alignnone size-full wp-image-45947\" title=\"WordPress category introduction\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction.png\" alt=\"WordPress category introduction\" width=\"560\" height=\"187\" /></p><p>Of course, the text for that introduction is a bit poor. I should probably do a much better job myself of explaining people where to go for what kinds of content, so I&#8217;ll get right on that once I finish this post&#8230; Which brings me to the last bit:</p><h2>HTML in category descriptions</h2><p>HTML in descriptions for categories, tags and custom taxonomies is currently disallow by default. I think that&#8217;s changing in an upcoming release, but for now you&#8217;ll have to fix that. If you&#8217;re using my WordPress SEO plugin, this has already been fixed for you, if not, AppThemes has quite a <a\nhref=\"http://docs.appthemes.com/tutorials/allow-html-in-taxonomy-descriptions/\">good tutorial</a> on it.</p><p>Let me know what you did with your archive pages in the comments, I&#8217;m very curious to see good examples!</p><p><a\nhref=\"http://yoast.com/wordpress-archive-pages/\">WordPress Archive Pages: the tutorial</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/ituadafIpro\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/wordpress-archive-pages/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"34\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:78:\"http://cdn2.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:70:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"WordPress Archive Pages\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:78:\"http://cdn2.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn3.yoast.com/wp-content/uploads/2011/09/genesis-archive-settings.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Genesis Archive Settings\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress category introduction\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:91:\"http://cdn.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/wordpress-archive-pages/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-archive-pages\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"Why relative URLs should be forbidden for web developers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/qPbEHoWyZgc/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/relative-urls-issues/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Aug 2012 09:52:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Webdesign & development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45908\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:782:\"<p>Twitter is the website / web service most of us love and sometimes hate, a service that has become an integral part of most of our online identities. It&#8217;s one of the services we expect to be there when we Google ourselves or other people. So when you Google yourself and instead of twitter.com, you&#8230;</p><p><a\nhref=\"http://yoast.com/relative-urls-issues/\">Why relative URLs should be forbidden for web developers</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:10926:\"<p>Twitter is the website / web service most of us love and sometimes hate, a service that has become an integral part of most of our online identities. It&#8217;s one of the services we expect to be there when we Google ourselves or other people. So when you Google yourself and instead of twitter.com, you see a weird result, you think &#8220;huh&#8221;. Then, when you&#8217;re like me, you try to figure out what caused that and once you figure it, you think &#8220;d0h!&#8221;. You&#8217;d think the people at Twitter would know better than to use relative URLs or even worse, a HOST header to determine the domain, resulting in this result when you search for my name:</p><p><img\nclass=\"aligncenter size-full wp-image-45910\" title=\"yoast - twitter\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-twitter.png\" alt=\"yoast - twitter\" width=\"522\" height=\"83\" /></p><p>Relative URLs stink. They really do. All sorts of SEO problems on the web are caused by the use of relative URLs in links, canonicals and more. We find issues with them in our <a\nhref=\"http://yoast.com/hire-me/website-review/\">website reviews</a> on a regular basis, but as you can see bigger sites like Twitter also have massive issues because of them. I&#8217;ll try to explain why you shouldn&#8217;t use them and what you could do instead, as it might be simple things like this that hold you back from performing well with your website.</p><h2>What are relative URLs?</h2><p>Relative URLs are all URLs that do not contain a fully qualified domain name and path, but instead just the path or a portion of the path. So when your website is example.com, you could be linking to your contact page from your homepage like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;contact.html&quot;&gt;Contact&lt;/a&gt;</pre><p>And back to your homepage from your contact page like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</pre><p>The / refers to the directory / on the domain. So even when you&#8217;re three levels deep in a directory structure, linking to / would link to the frontpage. Lastly, when you&#8217;re on the corporate page of your about section, for instance <em>example.com/about/corporate.html</em>, you could link to your contact page like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;../contact.html&quot;&gt;Contact&lt;/a&gt;</pre><p>All the resulting URLs are calculated by your browser based on the base URL. By default, this is the current URL that&#8217;s in your location bar, but using the <code>base</code> element, you could set it to something else, like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;base href=&quot;http://www.example.com/subdirectory/&quot;&gt;</pre><p>Doing this would make the second link above, the link to /, resolve to <em>http://www.example.com/subdirectory/</em>.</p><p>This was all fine when HTML was invented and websites consisted of real static HTML pages in directory structures. Now though, most of the web is built with content management systems, changing URLs is easier and some URLs might behave differently than what you&#8217;d expect. Because of that, relative URLs can cause a few different types of issues, all of which can be pretty detrimental for your SEO and your server performance.</p><h3>Why are relative URLs still being used?</h3><p>Relative URLs are often used because developers have a test environment on another hostname and it makes it easy for them to move stuff between their test environment and their live environment. Other reasons include that it&#8217;s &#8220;just easier in website maintenance&#8221;. They&#8217;re also, in my opinion falsely, <a\nhref=\"http://www.websiteoptimization.com/speed/tweak/relative/\">promoted</a> by some websites about site speed because they&#8217;re &#8220;shorter&#8221; and thus &#8220;faster&#8221;.</p><p>In reality, all of these reasons are false when you look at the bigger picture. The few minutes a developer might save by using relative URLs are offset by countless hours an SEO might be spending to solve the issues caused.</p><h2>Some of the problems caused by relative URLs</h2><p>Issues caused by the use of relative URLs are vast and plentiful, and any seasoned SEO can probably give you a few examples of clients that have had huge losses because of them. Let me show you a couple of them:</p><h3>A completely indexed test environment</h3><p>When you have a menu structure that relies on relative URLs, one wrong link in your content to your test environment would cause the entire test environment to be spidered and indexed, causing massive <a\nhref=\"http://yoast.com/articles/duplicate-content/\">duplicate content issues</a>. This happens more often than you think, in fact, have you checked whether the test environment you used to test your last few development projects are indexed by Google? I bet some of you will now find out that they are indexed.</p><h3>Spider traps</h3><p>Most of the times I&#8217;ve found what we call &#8220;spider traps&#8221; they&#8217;re caused by wrongly used relative URLs. Let me show you an example: a site linking to ./example instead of ../example/, from the /contact/ page. A link to ./ means you&#8217;re linking to the current directory. When the current URL ends in /contact/ this means that a link to ./example/ resolves to /contact/example/. So clicking that link would take me to http://www.example.com/contact/example/, if your CMS is set up to serve the same page for /contact/example/ as it serves for /contact/, which is a <em>very</em> common case, you&#8217;ll now have a spider trap. Because that /content/example/ page also links to ./example/, which now resolves to /contact/example/example/, which then links to ./example/ again and thus links to /contact/example/example/example/ etc. etc. etc. You probably get the issue, and I hope you also understand why this could be <em>very</em> detrimental for your search engine rankings.</p><p>These kinds of issues are <em>very</em> easily found using a tool like <a\nhref=\"http://www.screamingfrog.co.uk/seo-spider/\">Screaming Frog</a>, which I think every webmaster should have in its arsenal.</p><h3>Relative canonical URLs</h3><p>Issues can also be caused by using relative canonical URLs. A <a\nhref=\"http://yoast.com/canonical-url-links/\">canonical URL</a> is supposed to link to the &#8220;perfect&#8221; URL for a piece of content on your website. If you use a relative link and also have a subdomain or test environment that&#8217;s indexed, you suddenly have several versions of a piece of content that all proclaim themselves as the canonical version of that piece of content&#8230; You can understand a search engine having a hard time dealing with this.</p><h4>A little knowledge is a dangerous thing&#8230;</h4><p>At Twitter, they figured out that they shouldn&#8217;t use relative canonicals. So a developer there thought he was smart and probably defined the domain part of the canonical URL using the HOST header information. This causes the very issue that I talked about in the introduction above, because now the IP result in the screenshot above has a canonical URL pointing to itself, causing Google to show Twitter&#8217;s IP&#8217;s in search results everywhere instead of the proper domain&#8230;</p><h3>Protocol-relative URLs</h3><p>Another issue is the so-called protocol relative URL. This is a URL that leaves of the http:// or https:// bit. This type of relative URL does have its uses, but it should not be deployed outside of those useful cases. The useful cases are when it&#8217;s used inside JavaScript or CSS, so files are served over the same protocol as the current page, especially because when you&#8217;re on a https URL, serving anything over http basically breaks the security. Using protocol relative URLs within links or canonical URLs is a <em>very bad idea</em> though, because you can still have duplicate content issues between http and https versions of a website.</p><h2>The solution</h2><p>WordPress core has this solution solved in a very nice way, using a couple of solutions:</p><h3>Absolute URLs everywhere</h3><p>Whenever WordPress outputs a URL, it&#8217;s always a full, absolute URL. For the domain name part of that it uses the domain you set in the General settings. This is the type of solution everyone should use: the domain name should be in a configuration file, this would allow you to still easily migrate between development environment and live environment by just using different configuration files.</p><h3>Canonical Redirects</h3><p>Whenever WordPress detects that you are on a specific article but are not using the proper &#8220;canonical&#8221; URL, it&#8217;ll try to 301 redirect you to the correct version. For the cases when it doesn&#8217;t detect this (it for instance ignores query parameters added to the URL), there is:</p><h3>The canonical link URL element</h3><p>When you&#8217;re on a single post or page, WordPress puts out a <a\nhref=\"http://yoast.com/canonical-url-links/\">canonical link element</a>, based on what the URL of the current article should be, irregardless of what&#8217;s in your browsers location bar. My <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> extends this functionality to display canonical link elements just about everywhere within WordPress, and you should do this in your CMS too.</p><h2>Conclusion</h2><p>Twitter&#8217;s issue could be rather easily resolved, as we&#8217;ve discussed, by using proper absolute URLs everywhere in their code. There are no real good arguments against not doing that. While Twitter is not a direct e-commerce site and might not have the biggest of issues with losing a bit of traffic, I&#8217;ve had issues with relative URLs and relative canonicals at clients that have cost those clients upwards of a hundred thousand euro&#8217;s. The very small gain in web development time, if any, is never, ever, worth that.</p><p>So you should be using absolute URLs at all times, canonical redirects when possible and canonical link elements should ideally be on every page you serve out. After all, when you&#8217;re building a brand, do you really want to lose that brand in the search result pages? I think that&#8217;s a waste and I&#8217;m guessing you do too.</p><p><a\nhref=\"http://yoast.com/relative-urls-issues/\">Why relative URLs should be forbidden for web developers</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/qPbEHoWyZgc\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/relative-urls-issues/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"58\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-twitter-125x83.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:65:\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-twitter.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"yoast – twitter\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-twitter-125x83.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/relative-urls-issues/#utm_source=rss&utm_medium=rss&utm_campaign=relative-urls-issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Redesign and more :)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/Dzq5aIAuyBM/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://yoast.com/redesign-and-more/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Aug 2012 11:47:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Offtopic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45894\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:794:\"<p>Yoast keeps changing and growing in many, many ways. One of those is a redesign, which is now live. We&#8217;re finally using the theme framework we&#8217;ve been recommending to others for ages: StudioPress&#8217; Genesis. We used an external developer for most of the development, just because I&#8217;m too pressed for time myself and didn&#8217;t want&#8230;</p><p><a\nhref=\"http://yoast.com/redesign-and-more/\">Redesign and more :)</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2569:\"<p><img\nclass=\"alignright size-full wp-image-45895\" title=\"yoast redesign\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-redesign.png\" alt=\"yoast redesign\" width=\"347\" height=\"156\" />Yoast keeps changing and growing in many, many ways. One of those is a redesign, which is now live. We&#8217;re finally using the theme framework we&#8217;ve been recommending to others for ages: <a\nhref=\"http://yoast.com/out/genesis/\">StudioPress&#8217; Genesis</a>. We used an external developer for most of the development, just because I&#8217;m too pressed for time myself and didn&#8217;t want this to wait. His name is <a\nhref=\"http://www.billerickson.net/\">Bill Erickson</a> and he comes <em>highly</em> recommended, he&#8217;s been an absolute pleasure to work with.</p><p>I hope you like it, a longer story on the how and why of this will come soon, as we make sure we&#8217;ve fixed all small bugs.</p><h2>Other changes at Yoast</h2><p>But there&#8217;s more&#8230; While we work on the new design, we can also tell you that we&#8217;ve actually hired a part-time designer, who&#8217;ll be joining us September 1st to start out several new projects. We&#8217;re excited to have her on board but we won&#8217;t tell you more than that just yet!</p><p>Related to that I have finally convinced my wife that I need her in the company too, to head up our research &#8220;department&#8221; (she&#8217;s a Ph. D. in criminology/sociology). While she will continue to teach and do research at <a\nhref=\"http://www.studyatavans.com/en/home\">Avans</a>, she will also be helping us out with a research project, for which an intern will be starting soon as well.</p><p>One more thing&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress/video-seo/\">Video SEO</a>! It&#8217;s like, ready. We&#8217;re hard at work preparing documentation and the necessary infrastructure, but the plugin will go on sale within the next few weeks.</p><p>That&#8217;s it for now, enjoy the new design and make sure you subscribe to the newsletter so we can keep you up to date.</p><p><a\nhref=\"http://yoast.com/redesign-and-more/\">Redesign and more :)</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/Dzq5aIAuyBM\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/redesign-and-more/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"85\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-redesign-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-redesign.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"yoast redesign\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-redesign-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://yoast.com/redesign-and-more/#utm_source=rss&utm_medium=rss&utm_campaign=redesign-and-more\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:14:\"              \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Tag Optimization for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/99yY97SLdX4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://yoast.com/optimizing-tags/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Jul 2012 14:51:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45845\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:769:\"<p>In our website reviews we regularly encounter websites who&#8217;ve got just as many tags as posts, or 20,000 posts and 5,000 tags. This is undesirable as it means you&#8217;re not using tags to relate your posts together, which is what you should do. We usually tell them to optimize their tags but that&#8217;s easier to&#8230;</p><p><a\nhref=\"http://yoast.com/optimizing-tags/\">Tag Optimization for WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4501:\"<p>In our <a\nhref=\"http://yoast.com/hire-me/website-review/\">website reviews</a> we regularly encounter websites who&#8217;ve got just as many tags as posts, or 20,000 posts and 5,000 tags. This is undesirable as it means you&#8217;re not using tags to relate your posts together, which is what you should do. We usually tell them to optimize their tags but that&#8217;s easier to say than do. Deleting them is easy, but that&#8217;s not a solution. What you <em>should</em> be doing is merging multiple tags into one, adding more posts to a tag or delete &amp; redirect them to your homepage.</p><p>That&#8217;s not something you want to do manually, as it&#8217;s a lot of work. That&#8217;s why I built a tool called the Term Optimizer. This tool helps you find tags or other taxonomy terms that are used only once, or even less, and allows you to merge them, redirect them, etc.</p><h2>Optimize your WordPress Tags with the Term Optimizer</h2><p>It&#8217;s simple, once you&#8217;ve bought the file, you place it in your WordPress root directory, it needs to have <em>wp- load.php</em> in the same directory. You then open the URL and you&#8217;ll be seeing an interface like this (click for larger version):</p><p><a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast.png\"><img\nclass=\"alignnone size-large wp-image-45853\" title=\"Easy Tag Optimization with Term Optimizer by Yoast\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-590x533.png\" alt=\"Easy Tag Optimization with Term Optimizer by Yoast\" width=\"580\" height=\"523\" /></a></p><p>By default it&#8217;ll search for all tags that are used less than 4 times. As you can see, there&#8217;s a checkbox before each post. If you check them and use the drop down in the top, you can choose from several actions:</p><p><img\nclass=\"aligncenter size-full wp-image-45855\" title=\"With selected tags, do the following: merge, delete &amp; redirect, shows posts with term, search &amp; tag\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/with-selected-do.png\" alt=\"With selected tags, do the following: merge, delete &amp; redirect, shows posts with term, search &amp; tag\" width=\"372\" height=\"133\" /></p><p>If you choose merge and selected, you&#8217;ll be presented with a second screen that allows you to choose the tag you want to merge these tags with. Once that&#8217;s done, if your .htaccess file is writeable, the tool will automatically add the redirect lines to your .htaccess file.</p><p>Pressing delete will do something similar, you&#8217;ll be able to redirect to the homepage, to a category or to a custom URL:</p><p><img\nclass=\"aligncenter size-full wp-image-45849\" title=\"Delete &amp; redirect tag\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag.png\" alt=\"Delete &amp; redirect tag\" width=\"312\" height=\"199\" /></p><p>This allows you to optimize your tags with only a few minutes / hours work, instead of having to get a developer to do all this work for you.</p><h2>Quickly Adding Tags to Posts</h2><p>Sometimes you realize that you should have created a certain tag and it&#8217;s now a lot of work to do that through the interface. With the term optimizer you can do that quite simply (click for larger image):</p><p><a\nclass=\"thickbox\" href=\"http://cdn3.yoast.com/wp-content/uploads/2012/07/search-tag.png\"><img\nclass=\"aligncenter size-large wp-image-45860\" title=\"Search &amp; Tag posts\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/search-tag-590x632.png\" alt=\"Search &amp; Tag posts\" width=\"580\" height=\"621\" /></a></p><h2>Buy this Tool, start Optimizing your Tags Now!</h2><p>We&#8217;ll be making this available to our past website review customers who need it for free, if you&#8217;re not a website review customer but just want to clean up your tags or other terms, you can buy it now:</p><div\nclass=\"aligncenter\"><a\nclass=\"button\" href=\"http://gum.co/vyvF\">Buy Term Optimizer</a></div><p><a\nhref=\"http://yoast.com/optimizing-tags/\">Tag Optimization for WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/99yY97SLdX4\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://yoast.com/optimizing-tags/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"86\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:4:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:75:\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"Easy Tag Optimization with Term Optimizer by Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:68:\"http://cdn.yoast.com/wp-content/uploads/2012/07/with-selected-do.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"With selected tags, do the following: merge, delete & redirect, shows posts with term, search & tag\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/with-selected-do-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:72:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Delete & redirect tag\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/search-tag.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Search & Tag posts\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/07/search-tag-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://yoast.com/optimizing-tags/#utm_source=rss&utm_medium=rss&utm_campaign=optimizing-tags\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:14:\"              \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"Twitter Cards, Open Graph & Social Meta Data\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/QeKlh469Q54/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/twitter-cards/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 16 Jun 2012 06:22:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:9:\"OpenGraph\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45800\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:788:\"<p>Two days ago, Twitter introduced a new system called Twitter Cards (see their docs). It allows site owners to enhance the expanded tweets Twitter creates for their site, much in the same was as  OpenGraph tags give site owners the chance to determine what their posts &#38; pages will look like when shared on Facebook. In&#8230;</p><p><a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards, Open Graph &#038; Social Meta Data</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5576:\"<p><a\nhref=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary.png\"><img\nclass=\"alignright size-medium wp-image-45801\" title=\"Example Twitter Card\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-300x156.png\" alt=\"Example Twitter Card\" width=\"300\" height=\"156\" /></a>Two days ago, Twitter <a\nhref=\"https://dev.twitter.com/blog/twitter-cards\">introduced</a> a new system called Twitter Cards (see <a\nhref=\"https://dev.twitter.com/docs/cards\">their docs</a>). It allows site owners to enhance the expanded tweets Twitter creates for their site, much in the same was as  OpenGraph tags give site owners the chance to determine what their posts &amp; pages will look like when shared on Facebook. In fact, Twitter chose to fall back to OpenGraph data when their specific tags aren&#8217;t being used, just as Google+ does.</p><p>A while back Alex posted about <a\nhref=\"http://yoast.com/facebook-open-graph-protocol/\">OpenGraph</a> here and users of my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> will have noticed that quite some development went into (and actually still goes into) the OpenGraph settings of that plugin. With this change, that development has been worth while even more. Google+, Facebook and Twitter now all use the basic OpenGraph tags like og:url, <code>og:description</code>, <code>og:title</code> and <code>og:image</code>.</p><p>This means that for a full Twitter Cards implementation, you only really need to add three lines to your site. For instance for every post <a\nhref=\"http://yoast.com/author/michiel/\">Michiel</a> writes on this site, we&#8217;d need to add this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;meta name=&quot;twitter:card&quot; value=&quot;summary&quot;&gt;\n&lt;meta name=&quot;twitter:site&quot; value=&quot;@yoast&quot;&gt;\n&lt;meta name=&quot;twitter:creator&quot; value=&quot;@michielheijmans&quot;&gt;</pre><p>All the other data would be taken from the OpenGraph metadata that&#8217;s already there. When I noticed this, I realized that the Twitter Card implementation for my SEO plugin would be a breeze; so I went ahead and build it. I&#8217;m currently waiting for access to their beta so I can test it, but the implementation is mostly done. It&#8217;ll add a Twitter contact field to every user&#8217;s profile using the <a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">method I wrote about a few days ago</a>. Next to that it&#8217;ll allow you to set a site Twitter account and check a box to say you want to include the data, that&#8217;s it. If you want to have a play, the code is already in the WordPress SEO trunk, so you can download it from the <a\nhref=\"http://wordpress.org/extend/plugins/wordpress-seo/developers/\">developers page</a>.</p><h2>What Twitter Cards mean for OpenGraph</h2><p>As you&#8217;ll understand, Twitter Cards made OpenGraph even more important than it already was. No site on the web should be without the basic OpenGraph meta data anymore. Microsoft recently announced <a\nhref=\"http://blogs.msdn.com/b/ie/archive/2012/05/14/sharing-links-from-ie10-on-windows-8.aspx\">suport for OpenGraph in IE10</a> in Windows 8 as well, which just adds another reason.</p><p>It makes sense too: the OpenGraph protocol is relatively easy yet allows for a bit more than just a meta description and title tag. So go forth and implement OpenGraph!</p><h2>Merge it all into one standard</h2><p>There are some things that obviously need to be worked on though. The fact that Twitter requires the <code>twitter:card</code> meta tag sort of annoys me, as it seems to me they could have just mapped the <code>og:type</code> meta tag for that, which would make implementation even easier. The same goes for the <code>og:url</code> meta tag, Facebook falls back to the <code>rel=canonical</code> element when it&#8217;s there and there is no <code>og:url</code> element, I&#8217;m hoping Twitter will do the same but they haven&#8217;t specified it yet.</p><p>In the <a\nhref=\"https://www.facebook.com/groups/opengraph/\">Facebook group</a> that discusses the Open Graph Protocol I already saw <a\nhref=\"https://www.facebook.com/groups/opengraph/permalink/447342028623970/\">Tantek Çelik say</a> what I was thinking:</p><blockquote><p>og:&#8230; twitter:&#8230; &#8211; it&#8217;s like vendor prefixes for meta tags! looks like a good opportunity to create a microformat based on commonalities among all this vendor-specific work.</p></blockquote><p>All I can say is: yes! Hell yes! Because before you know it, Pinterest will create some meta tags too, StumbleUpon will follow and we&#8217;ll have even more code spaghetti in the <code>&lt;head&gt;</code>s of our pages.</p><p>For now though, I like what Twitter did with their Twitter Cards change, here&#8217;s to hoping I get into the beta soon.</p><p><strong>Update September 5th, 2012:</strong> it now works for yoast.com! Here are some <a\nhref=\"http://yoast.com/twitter-cards-in-action/\">more thoughts on the topic</a>.</p><p><a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards, Open Graph &#038; Social Meta Data</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/QeKlh469Q54\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"http://yoast.com/twitter-cards/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"35\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Example Twitter Card\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"http://yoast.com/twitter-cards/#utm_source=rss&utm_medium=rss&utm_campaign=twitter-cards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"User Contact Fields in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/gHUBwi4FUAk/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"http://yoast.com/user-contact-fields-wordpress/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Jun 2012 08:00:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:5:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Facebook\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:6:\"Google\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"http://yoast.com/?p=1593\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:778:\"<p>WordPress comes with a &#8220;default&#8221; set of user contact fields, which has always looked random to me: AIM, Yahoo IM and Jabber / Google Talk, instead of what I&#8217;d want to have there: Twitter, Facebook and Google+. A while back I got frustrated enough to have a look at how this was actually dealt with&#8230;</p><p><a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">User Contact Fields in WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3157:\"<p>WordPress comes with a &#8220;default&#8221; set of user contact fields, which has always looked random to me: AIM, Yahoo IM and Jabber / Google Talk, instead of what I&#8217;d want to have there: Twitter, Facebook and Google+. A while back I got frustrated enough to have a look at how this was actually dealt with in the backend of WordPress, and fix it, so in WordPress 2.9 an API was added as a result of ticket <a\nhref=\"http://core.trac.wordpress.org/ticket/10240\">#10240</a>.</p><p>This change allowed for developers to add user contact fields in a very simple way. The example code below adds Twitter and removes Yahoo IM, and yes, this is all the code that&#8217;s needed to do it:</p><pre class=\"brush: php; title: ; notranslate\">function add_twitter_contactmethod( $contactmethods ) {\n  // Add Twitter\n  if ( !isset( $contactmethods[\'twitter\'] ) )\n    $contactmethods[\'twitter\'] = \'Twitter\';\n\n  // Remove Yahoo IM\n  if ( isset( $contactmethods[\'yim\'] ) )\n    unset( $contactmethods[\'yim\'] );\n\n  return $contactmethods;\n}\nadd_filter( \'user_contactmethods\', \'add_twitter_contactmethod\', 10, 1 );</pre><p>Easy does it, right? Retrieving the user contact field isn&#8217;t much harder either, for example, if you&#8217;re on a singular page, use the following code:</p><pre class=\"brush: php; title: ; notranslate\">if ( is_singular() ) {\n  global $post;\n  $twitter = get_the_author_meta( \'twitter\', $post-&gt;post_author );\n}</pre><p>And there you have it! My <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> uses this exact method to add a Google+ profile field for users to be used in conjunction with the <a\nhref=\"http://yoast.com/highlighting-wordpress-authors-search/\">author highlighting</a> features of Google. If you&#8217;d want to echo the Google+ user contact field that plugin creates, do the following:</p><pre class=\"brush: php; title: ; notranslate\">if ( is_singular() ) {\n  global $post;\n  the_author_meta( \'googleplus\', $post-&gt;post_author );\n}</pre><p>As you can see this uses <code>the_author_meta</code> instead of <code>get_the_author_meta</code>. The <code>$post</code> global and the <code>$post-&gt;post_author</code> reference would strictly speaking not even be needed as they&#8217;re called from the global otherwise within the function, but this might prevent issues with retrieving the wrong user contact fields.</p><p>That&#8217;s it! Now you can add and remove user contact fields as you wish. You can do this in your theme&#8217;s <em>functions.php</em> or in a plugin, be sure to add the <code>isset</code> code around it to prevent notices though!</p><p><a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">User Contact Fields in WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/gHUBwi4FUAk\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://yoast.com/user-contact-fields-wordpress/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"20\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:120:\"http://yoast.com/user-contact-fields-wordpress/#utm_source=rss&utm_medium=rss&utm_campaign=user-contact-fields-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:17:\"                 \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress SEO 1.2 – Major Upgrade\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/9gwcWupQ9Is/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://yoast.com/wordpress-seo-1-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Jun 2012 13:11:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45751\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:751:\"<p>My WordPress SEO plugin has been updated to 1.2. A few weeks back I did a series of bug fix updates and while doing that I noticed there where things that were really bugging me in the plugin. Everybody seemed to focus on the settings and hardly anyone was working with the snippet preview and&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-seo-1-2/\">WordPress SEO 1.2 &#8211; Major Upgrade</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8046:\"<p>My WordPress SEO plugin has been updated to 1.2. A few weeks back I did a series of bug fix updates and while doing that I noticed there where things that were <em>really</em> bugging me in the plugin. Everybody seemed to focus on the settings and hardly anyone was working with the snippet preview and the page analysis functionality, in my opinion the most important pieces of the plugin. This update will try and gently push you to use that functionality more.</p><p>Next to that, I also did a major overhaul of the two most important settings pages, so let&#8217;s discuss these changes first:</p><h2>The new SEO settings pages</h2><p>The plugin used to have a &#8220;Titles&#8221; and an &#8220;Indexation&#8221; page. That was confusing as the titles page also covered the meta descriptions and had pieces for each (custom) post type and (custom) taxonomy and the Indexation page had other settings for these same post types and taxonomies. So I decided to merge them into one and divide them into tabs for the separate sections.</p><p>These sections now look as follows:</p><p><img\nclass=\"alignnone size-full wp-image-45755\" title=\"Titles Meta settings\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings.png\" alt=\"Titles Meta settings\" width=\"580\" height=\"631\" /></p><p>And the section for post types:</p><p><img\nclass=\"alignnone size-full wp-image-45756\" title=\"titles meta settings for post types\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types.png\" alt=\"titles meta settings for post types\" width=\"580\" height=\"502\" /></p><p>As you can see, they&#8217;re much cleaner. Both post types and taxonomies can now be noindex, followed straight from this interface as well, with the option to override the global setting on a per post or per term (eg. a tag or category) basis.</p><h2>Rel=&#8221;author&#8221;</h2><p>As I mentioned in my previous post about <a\nhref=\"http://yoast.com/push-rel-author-head/\">rel=&#8221;author&#8221; through your head</a>, this feature is now in WordPress SEO 1.2. Simply go to your author profile and fill your Google+ URL and it&#8217;ll be added to each post automagically.</p><h2>Default Settings</h2><p>The WordPress SEO plugin until now always lacked proper default settings. It had them but it didn&#8217;t show them to the user in the titles section and it didn&#8217;t have them for various other sections. While there&#8217;s still more work to do with guiding people to get the right settings, the plugin now sets defaults that should work well for 99% of sites on install.</p><p>This also means the plugin, when freshly installed, will now automatically enable XML Sitemaps and will detect automatically whether force rewrite needs to be enabled or not. That should save me some support headaches.</p><p>But, as I said, those sections aren&#8217;t really that important. This bit is:</p><h2>The Snippet Preview &amp; Focus keyword</h2><p>An enormous amount of bugs have been fixed in the snippet preview and the focus keyword functionality. Most of them are related to non-ascii characters and languages such as Russian and Arabian, but others involve keywords with dollar signs or even simple dashes. &#8220;<a\nhref=\"http://yoast.nl/seo-trainingen/in-company-seo-training/\">In-company SEO training</a>&#8221; for instance will now be properly recognized as a focus keyword.</p><p>The bolding of keywords in the snippet preview has also been fixed for all cases I knew went wrong. If you still have issues, be sure to let me know through the forums; but I fully expect this release to fix most of them.</p><h2>The Page Analysis functionality</h2><p>When I introduced this functionality in May 2011 I thought it was the best thing since sliced bread, but as I said, I couldn&#8217;t get enough people to use it properly. Linkdex, who contributed the original code, always calculated a &#8220;score&#8221; for each page based on that code and I had decided to not use that score. The reason I left it out was simple: I didn&#8217;t want people to optimize for that last percent.</p><p>For this release, I decided it was time to re-think that approach and come up with something better. Now, each post, page or other post type will get a &#8220;score&#8221;, but there are only 4 options:</p><ul><li>bad (red)</li><li>poor (orange)</li><li>ok (yellow)</li><li>good (green)</li></ul><p>They look as follows:</p><p><img\nclass=\"aligncenter size-full wp-image-45754\" title=\"Score buttons\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons.png\" alt=\"Score buttons\" width=\"164\" height=\"19\" /></p><p>This score is shown inside the publish box:</p><p><img\nclass=\"aligncenter size-full wp-image-45752\" title=\"SEO Score shown inside the publish box\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box.png\" alt=\"SEO Score shown inside the publish box\" width=\"288\" height=\"96\" /></p><p>But, more importantly, it&#8217;s also shown in the overview of posts and pages, alongside other key SEO info (click for large version):</p><p><a\nclass=\"thickbox\" href=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview.png\"><img\nclass=\"aligncenter size-large wp-image-45753\" title=\"SEO Score in the pages overview\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview-590x231.png\" alt=\"SEO Score in the pages overview\" width=\"580\" height=\"227\" /></a></p><p>As you can see, you can show the SEO score, the focus keyword, the meta description and the title; and you have the ability to sort by the first three of those values. This makes it easy to find posts that don&#8217;t have a focus keyword or have a low SEO score. You can also easily disable those columns that you&#8217;d rather not see. Within the posts overview, there are two colors for posts that aren&#8217;t a score. Grey means the post has no focus keyword and thus no score; blue means the post is set to noindex, so the score doesn&#8217;t matter.</p><h2>Questions and Answers about this release</h2><ul><li><strong>Why is this 1.2 and not 2.0?</strong><br\n/> I&#8217;ve decided my WordPress SEO plugin will follow the same version numbering as WordPress, so each point release is a major version increase. This prevents version number inflation so we don&#8217;t have WordPress SEO 25 in 4-5 years time.</li><li><strong>Will all my settings be saved when I upgrade?</strong><br\n/> Yes. But it won&#8217;t hurt you to go through all your settings and check whether you&#8217;re still doing what&#8217;s best for you. It won&#8217;t force the new defaults on you if you&#8217;ve already got the plugin installed, but there&#8217;s a button you can push if you want it to.</li><li><strong>Does this version do <em>X</em>?</strong><br\n/> It might. Why not download it and see for yourself? If it doesn&#8217;t, open a thread in the forums and let&#8217;s talk about it. Be warned though, I refuse most feature requests.</li><li><strong>You removed the setting for X, how can I change that now?</strong><br\n/> First of all, I tend to remove stuff for a good reason. Think about why I did that and see if you really need to change it. If you do, there&#8217;s a good chance the <a\nhref=\"http://yoast.com/wordpress/seo/api-docs/\">WordPress SEO API</a>, which has a ton of actions and filters added in this release, will allow you to change it programmatically.</li></ul><p>That&#8217;s it! Go and play with it and let me know what you think about this upgrade in the comments!</p><p><a\nhref=\"http://yoast.com/wordpress-seo-1-2/\">WordPress SEO 1.2 &#8211; Major Upgrade</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/9gwcWupQ9Is\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/wordpress-seo-1-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"370\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:5:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Titles Meta settings\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:76:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"titles meta settings for post types\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:83:\"http://cdn.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Score buttons\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons-125x19.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:74:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"SEO Score shown inside the publish box\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box-125x96.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"SEO Score in the pages overview\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:85:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://yoast.com/wordpress-seo-1-2/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-seo-1-2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:16:\"                \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Push rel=”author” through your head\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/Aq4UeMKt4bQ/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/push-rel-author-head/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 08 Jun 2012 12:36:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45687\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:848:\"<p>No this title wasn&#8217;t a pun. It&#8217;s dead serious. My buddy Arjan discovered yesterday that Google is now allowing rel=&#8221;author&#8221; markup through a &#60;link&#62; element in the head of your site. This makes adding rel=&#8221;author&#8221; to your site properly a lot easier, and allows me to add it to my WordPress SEO plugin. The rel=&#8221;author&#8221; link&#8230;</p><p><a\nhref=\"http://yoast.com/push-rel-author-head/\">Push rel=&#8221;author&#8221; through your head</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3833:\"<p><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\"><img\nclass=\"alignright size-full wp-image-45689\" title=\"rel=author in action\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\" alt=\"rel=author in action\" width=\"200\" height=\"102\" /></a>No this title wasn&#8217;t a pun. It&#8217;s dead serious. My buddy <a\nhref=\"http://www.uprise.nl/\">Arjan</a> discovered yesterday that Google is now allowing <a\nhref=\"http://yoast.com/wordpress-rel-author-rel-me/\">rel=&#8221;author&#8221;</a> markup through a &lt;link&gt; element in the head of your site. This makes adding rel=&#8221;author&#8221; to your site properly a lot easier, and allows me to add it to my WordPress SEO plugin.</p><h2>The rel=&#8221;author&#8221; link element</h2><p>So the element should look like this:</p><pre>&lt;link rel=\"author\" href=\"<a href=\"https://plus.google.com/115369062315673853712/posts\" target=\"_blank\">https://plus.google.com/115369062315673853712/posts</a>\"/&gt;</pre><p>Where the Google+ link should link to your Google+ profile. It&#8217;s really that simple. I reached out to Google  to get confirmation that this would work and would keep working and they confirmed. So making author highlights work is now a three step process:</p><h2>Getting author highlights</h2><p>It&#8217;s a simple three step process:</p><ol><li>Add the above link to the &lt;head&gt; of the URLs you&#8217;d like your face to appear on.</li><li>On your Google+ profile, you need to make sure to have a link pointing back to the site you want the author highlight to work on.</li><li>Make sure your +1&#8242;s are public on your Google+ profile or it won&#8217;t work.</li></ol><p>Once you&#8217;ve done the above, use the <a\nhref=\"http://www.google.com/webmasters/tools/richsnippets\">rich snippet testing tool</a> to confirm it works.</p><h2>rel=&#8221;author&#8221; in my WordPress SEO plugin</h2><p>This already works in the development version of my WordPress SEO plugin, you can download that from the <a\nhref=\"http://wordpress.org/extend/plugins/wordpress-seo/developers/\">developers page</a>. That version has a bucket load of improvements and some new features, so you might want to test that anyway, it&#8217;ll probably be released early next week.</p><p>If you&#8217;re looking for it in the development version, there are two spots: on each users profile page there&#8217;s a new Google+ contact method:</p><p\nstyle=\"text-align: center;\"><img\nclass=\"size-full wp-image-45693 aligncenter\" title=\"Google Plus for rel=&quot;author&quot;\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile.png\" alt=\"Google Plus for rel=&quot;author&quot;\" width=\"553\" height=\"285\" /></p><p>When a user fills this out, the link will automatically be added to each post or page he/she publishes. On the &#8220;new&#8221; Title&#8217;s &amp; Meta&#8217;s settings page under SEO, you&#8217;ll find a drop down which allows you to choose which author should be shown on the frontpage:</p><p><img\nclass=\"wp-image-45694 alignnone\" title=\"rel=author drop down for homepage\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/home-rel-author.png\" alt=\"rel=author drop down for homepage\" width=\"580\" /></p><p>That&#8217;s it. Let me know whether this works for you!</p><p><a\nhref=\"http://yoast.com/push-rel-author-head/\">Push rel=&#8221;author&#8221; through your head</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/Aq4UeMKt4bQ\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/push-rel-author-head/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/06/rel-author-125x102.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"rel=author in action\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/06/rel-author-125x102.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:71:\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Google Plus for rel=”author”\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:79:\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:68:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/home-rel-author.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"rel=author drop down for homepage\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:76:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/home-rel-author-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/push-rel-author-head/#utm_source=rss&utm_medium=rss&utm_campaign=push-rel-author-head\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Common sense for your website\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/6FCA-xZElVg/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://yoast.com/common-sense/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Jun 2012 13:34:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:22:\"Usability & Conversion\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45649\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:740:\"<p>I am the last one to tell a website owner that his job is to become the local SEO or usability expert. That would be unrealistic. Why should a constructor learn SEO? He should not. Why should a gardner know all about user experience? He should not. But how about applying some common sense to&#8230;</p><p><a\nhref=\"http://yoast.com/common-sense/\">Common sense for your website</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Michiel Heijmans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8071:\"<p>I am the last one to tell a website owner that his job is to become the local SEO or usability expert. That would be unrealistic. Why should a constructor learn SEO? He should not. Why should a gardner know all about user experience? He should not. But how about applying some common sense to your website?</p><p>Let&#8217;s go over an imaginary website, top to bottom:</p><h2>Browser</h2><p>Your browser has a couple of spots where your &lt;title&gt; is shown, like in the upper left and on a tab. That means your page title should start with he main subject of the page, not your site name. If it would start with your site name, all tabs would read the same title.</p><p>Next to that, you want your browser to display the website as quick as possible, meaning you should make your website as fast as possible. Sure, browser cache and compression might be way over your head, but how about not using a template with tables and combining your CSS and JavaScript files? Or lowering the number of CSS and JavaScript files by losing all &#8216;extra&#8217; WordPress plugins, assuming your site is in WordPress of course.</p><h2>Header</h2><p>Do your really think putting all these items in your header help visitors or Google:</p><ul><li>RSS, Facebook, Twitter, Google+</li><li>Telephone number</li><li>Additional menu for About Us, Privacy Policy, Contact, Directions, Terms &amp; Conditions</li><li>Subscription form for email newsletter</li><li>Banner for your own or even worse other company&#8217;s products</li><li>Quality Marks</li><li>etc</li></ul><p>And all that in the first 100px of your website. Squeezed together and made to be skipped anyway. That header area should contain only the necessary, all other items should be in a sidebar or footer area. If you want people to call you, list your phone number. Make it large, but no larger than your logo. If you are the best painter in Maine, make that statement in the header. No need for all the other fuzz.</p><p>With your header comes the menu (in most cases). If you would list 30 items in the menu, do you think that would add focus to your website or do you think just using six items would guide your visitor more? Consider creating a submenu and add that structure to your breadcrumbs as well.</p><p>So far I have not mentioned anything strange or difficult to implement, right? It&#8217;s all common sense and you have thought at least 10 times &#8220;I know that already&#8221;. So why are not all websites set up with these basics? Why is there so much crap on the web?</p><h2>Content</h2><p>Your page content should contain at least 300 words. That has a simple reason: would your page be a great source for the topic or keyword you want to rank for when it would only contain 50 words? Is that all there is to say about that keyword? I don&#8217;t believe that, you don&#8217;t believe that and Google does not believe that. There should be a significant amount of content for your page to be considered a great source of information.</p><p>Of course you will write some posts or pages that are much shorter, like your contact page, but do your really want to rank that page? No, not on most websites. Don&#8217;t go crazy over this on pages like that, that&#8217;s not worth the effort. Get them on your site with other pages and guide them to your contact form.</p><p>An easy way to do that is by using <a\ntitle=\"Where do you want me to click?\" href=\"http://yoast.com/call-to-action/\">a call-to-action</a>. Make that call-to-action stand out by using colors that are not overused in your design or use a much larger font. Surround the call-to-action with enough whitespace. If you are adding your fourth call-to-action, please realize that that again is killing all focus on the website. Stick to one and let the content do the rest.</p><p>Focus in your content can be achieved by adding subheadings to your text that should be structured in (again) a logical matter, pretty much the same way you should set up a Word document:</p><ul><li>H1<ul\nstyle=\"margin-bottom: 0;\"><li>H2<ul\nstyle=\"margin-bottom: 0;\"><li>H3</li><li>H3</li></ul></li><li>H2</li></ul></li></ul><p>That also means one H1 per page, being the site name on the homepage and the page title on the other pages.</p><p>I think we all agree nowadays that reading on a computer screen is not as pleasant as reading text on paper. But we should make things as convenient as possible: make short sentences and even more important, create short paragraphs. I&#8217;d like to create paragraphs that are four to eight lines long and I hope this is a nice read ;)</p><p>In these paragraphs you should link to your own pages as well as to other websites. The great thing about these links to your own pages is that these links are really valuable as they are surrounded with relevant, related content. Next to that, you can easily use your keywords of choice in the anchor text. Unfortunately most people seem to think that these links should only go to other websites. A regrettable misunderstanding.</p><h2>Sharing</h2><p>If you write great content.. Let me rephrase that: <strong>provided</strong> you write great content, people will be more than willing to tell others about your piece. Of course you should add social sharing buttons below the content. These buttons should not be styled in some fashionable way, but should look like the commonly used share buttons &#8211; see below this post ;) &#8211; for better recognition as sharing buttons.</p><p>I&#8217;d use Facebook, Twitter, Share-by-email and Google+ for all websites, Linkedin for business news / economy related websites and Pinterest only when you have that amazing image in the post that people might want to share. Do not list a share option, just because people you know are using it, but only use those sharing options you think are relevant for your website.</p><p>The fashionable buttons can be used for subscription options, like links to your Facebook profile or your Youtube channel. In most cases, the square icons are used for this, or the round icons you find on yoast.com.</p><h2>Footer</h2><p>This is not a great footer:</p><blockquote><p>© SomewebsiteImade.com. All rights reserved. Reproduction of this content only after written permission.</p></blockquote><p>First: really? Share buttons <em>and</em> telling people they should not use your content on other websites? We actually encountered this in one of the <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">websites we have reviewed</a>.</p><p>Next to that, I think the entire footer should be used for extra contact information (or a small form) and other information that you really want to list on your website like a small link list, perhaps some recent news items and a small category list (max 8 items or so). Not sure about this, but why not throw in some social profiles as well..</p><p>What I really dislike is a footer that has one million links in it. That reduces the value of all other links and all focus on the page.</p><p>So, in conclusion, I think you should not so much focus on hearsay about SEO, but think about what seems logical and makes the most sense. Only when your website makes common sense to you, you should go look for someone that can help you with the not so logical Search Engine and Usability optimization issues ;)</p><h3>Any additions?</h3><p>Common sense is not as easy as it looks for a lot of people. If you have any comments or additions to the list above, please drop me a line in the comments!</p><p><a\nhref=\"http://yoast.com/common-sense/\">Common sense for your website</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/6FCA-xZElVg\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://yoast.com/common-sense/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"43\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://yoast.com/common-sense/#utm_source=rss&utm_medium=rss&utm_campaign=common-sense\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Why should I visit your website?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/um_-AjHfIe4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/introductory-content/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 28 May 2012 19:18:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Usability & Conversion\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45638\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:775:\"<p>One thing we often recommend in our site analyses, is the use of introductory content on a homepage. We get quite a lot response on that, with people being unclear how to do that. &#8220;Where should I put that content?&#8221; or &#8220;How long should that content be?&#8221; or the one I dislike the most: &#8220;I&#8230;</p><p><a\nhref=\"http://yoast.com/introductory-content/\">Why should I visit your website?</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Michiel Heijmans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5554:\"<p>One thing we often recommend <a\ntitle=\"Our website reviews deal with SEO, usability and more\" href=\"http://yoast.com/hire-me/website-review/\">in our site analyses</a>, is the use of introductory content on a homepage. We get quite a lot response on that, with people being unclear how to do that. &#8220;Where should I put that content?&#8221; or &#8220;How long should that content be?&#8221; or the one I dislike the most: &#8220;I don&#8217;t need that&#8221;.</p><h2>The main goal of introductory content</h2><p>I can not emphasize this enough. Introductory content is meant for your most valued visitors: us people and Google. Introductory content helps those visitors to grasp the leitmotif of your website. It also tells the visitor why you are the source to turn to, whether or not in combination with the title of your website.</p><p>There are two main ways to list that introductory content:</p><h3>The right slogan or tagline as introductory content</h3><p><img\nclass=\"alignright size-full wp-image-45640\" title=\"Chicago Tribune logo\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/chicago-tribune.png\" alt=\"Chicago Tribune logo: notice the caption\" width=\"318\" height=\"79\" />If only things where always this simple. <a\ntitle=\"Chicago Tribune\" href=\"http://www.chicagotribune.com/\" rel=\"nofollow\">Chicago Tribune</a> has a small caption below the logo that tells all: We are a Chicago based news provider bringing you all the latest news and we are doing this for such a long time you can consider us a trustworthy source.</p><p>The Chicago Tribune can do that this way and get away with it. But if you are a local news agency that brings mainly local news, you might need a different approach. Just the tagline might not be enough.</p><p>Suppose you are running the website of that more local newsletter, for instance the <a\ntitle=\"Local newspaper for Stowe\" href=\"http://www.stowetoday.com/\" rel=\"nofollow\">Stowe Today</a>. I really love these kind of websites, since they seem to be made with more care and passion than most websites. But it totally lacks introductory content. You have to know Stowe Today to know what the website is about.</p><p>A huge number of inbound links is telling Google what the Chicago Tribune is about, but I can&#8217;t imagine Stowe Today benefitting from such a number of in-links. The website will have to tell Google itself what it is about. It&#8217;s not.</p><p>The website starts off with a lot of (local) banner ads and some featured articles, but nowhere on that page it tells me &#8216;bringing you local news from Stowe, including human interest stories, upcoming events and more&#8217;. If I would not have known better, it might also have been a blog from a very enthusiastic local student, earning an extra buck this way. I also checked the <a\ntitle=\"About Sowe Today\" href=\"http://www.stowetoday.com/site/about/\">About</a>. page of the website, but that only refers to other publications.</p><h3>Adding a few paragraphs as an introduction</h3><p>Most news websites or webshops think they have no space for a few extra paragraphs of introductory content. The website should start with either news or products. I call bullsh*t on that.</p><p>I&#8217;m not a big fan of the somewhat sneaky way the <a\ntitle=\"Hidden introductory content\" href=\"http://www.hypedc.com/\" rel=\"nofollow\">online sneakershop Hypedc.com</a> did this:</p><p><img\nclass=\"aligncenter size-large wp-image-45641\" title=\"Hypedc.com source code\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom-590x215.png\" alt=\"Hypedc.com source code\" width=\"580\" height=\"211\" /><br\n/> As you can see, the introduction is there, but is not shown on the page itself. You are serving that intro to Google, but not to your customers. Why not!?</p><p>But that is just one way. I&#8217;m a much bigger fan of the way <a\ntitle=\"WP Types introductory content\" href=\"http://wp-types.com/\">WP-Types.com</a> is doing this, for instance:</p><p><img\nclass=\"aligncenter size-full wp-image-45642\" title=\"wp-types\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/05/wp-types.png\" alt=\"WP-Types\" width=\"556\" height=\"288\" /></p><p>&#8220;But they just have a couple of products&#8221;. I hear you, that&#8217;s right. But how about the way <a\ntitle=\"Large intro for SurfStitch\" href=\"http://www.surfstitch.com/\" rel=\"nofollow\">SurfStitch</a> is doing this? That&#8217;s actually quite common for (Magento) webshops. List the products first, than the introduction.</p><p>I think that is a pretty good practice, since your products tell a global story and you are able to refine that with the additional introduction below.</p><h3>Your two cents</h3><p>I&#8217;d like to make a bold statement on introductory content for webshops and am looking forward to your opinion on that, as a webdesigner, SEO or customer:</p><blockquote><p>A webshop&#8217;s homepage does not need any overview of products. A great textual introduction works much better.</p></blockquote><p>Looking forward to your thoughts!</p><p><a\nhref=\"http://yoast.com/introductory-content/\">Why should I visit your website?</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/um_-AjHfIe4\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/introductory-content/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"27\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/chicago-tribune-125x79.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:67:\"http://cdn.yoast.com/wp-content/uploads/2012/05/chicago-tribune.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Chicago Tribune logo\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/chicago-tribune-125x79.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:61:\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Hypedc.com source code\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:69:\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:61:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/wp-types.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"wp-types\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:69:\"http://cdn3.yoast.com/wp-content/uploads/2012/05/wp-types-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/introductory-content/#utm_source=rss&utm_medium=rss&utm_campaign=introductory-content\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"Penguin, Panda, it’s not that black and white..\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/UDijxOyZ450/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/penguin-panda-issues/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 14 May 2012 12:37:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45611\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:818:\"<p>We&#8217;re getting quite a few site review requests and SEO consultancy requests recently for people that have been hit by a sudden drop in traffic after the recent Google Penguin update. Because there has been quite some news about Google&#8217;s Penguin update and before that its Panda update, people are blaming those. In our perspective,&#8230;</p><p><a\nhref=\"http://yoast.com/penguin-panda-issues/\">Penguin, Panda, it&#8217;s not that black and white..</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4523:\"<p><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/05/Yoast_penguin.jpg\"><img\nclass=\"alignright size-medium wp-image-45821\" title=\"Yoast - Penguin update\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-206x300.jpg\" alt=\"Yoast - Penguin update\" width=\"206\" height=\"300\" /></a>We&#8217;re getting quite a few <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">site review</a> requests and SEO consultancy requests recently for people that have been hit by a sudden drop in traffic after the recent Google Penguin update. Because there has been quite some news about Google&#8217;s Penguin update and before that its Panda update, people are blaming those. In our perspective, whether you&#8217;re blaming Penguin, Panda or another update from Google isn&#8217;t really that interesting if you&#8217;re not an SEO. What matters most is: you&#8217;ve lost traffic, how are you going to get it back?</p><h2>Why you&#8217;d want to know whether the Penguin update caused it</h2><p>The idea is that if you know which update caused your traffic to drop and you know what that update targeted, you only have to fix that specific issue and your rankings will be magically restored. The reality is that it&#8217;s <em>really </em>not that black and white. Quite often now people blame one update, but if we look at the SearchMetrics stats for their domain, they&#8217;ve had a gradual decline over the last few months with a bigger decline in recent weeks. If we based our actions solely on what Penguin update targeted (and that&#8217;s not even really clear yet within the SEO community) we might be missing other issues.</p><p>There were other updates that didn&#8217;t get named by Google in the same way but had a <em>huge</em> impact in some countries. We&#8217;ve seen sites with over-optimized anchor text being hit from the beginning of the year already, but suddenly people now attribute that to Penguin. The end result for you as a site owner: it doesn&#8217;t matter.</p><p>You need to fix <em>all</em> your issues, not just the ones that this specific update &#8220;targets&#8221;.</p><h2>How to get &#8220;your&#8221; traffic back</h2><p>First of all, it&#8217;s not your traffic. It&#8217;s Google&#8217;s traffic. Being mad at Google, or anyone else for that matter, won&#8217;t help you one bit, it&#8217;s Google&#8217;s traffic and they can do what they want with it. So to regain the traffic your website was getting from Google, you need to play by their rules and in all honesty: those rules haven&#8217;t changed all that much over the last 10 years. The only thing that&#8217;s happening is that all the ways people found of bending those rules are slowly breaking.</p><p>Don&#8217;t try and play a game with Google if you don&#8217;t understand what you&#8217;re doing. There are dozens of great blackhats out there whom I respect, but that&#8217;s because they do their own research and they don&#8217;t start complaining publicly when Google catches them. If you have to read about and apply other people&#8217;s tricks, you&#8217;re probably not going to win. As the old saying goes: if you can&#8217;t stand the heat, stay out of the kitchen.</p><p>So how <em>do</em> you get your traffic back? By getting your site re-aligned with Google&#8217;s values. If you&#8217;ve lost in the Panda update or Penguin update and now recently lost a lot of traffic <em>again</em>, Google is sending you a message: your website doesn&#8217;t fit our idea of quality. Fix that. Don&#8217;t try to remove the one or two links that you think might have hurt you.</p><p>Now of course, you&#8217;re more than welcome to <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">order a website review</a> and get our opinion, but please don&#8217;t expect us to come up with a silver bullet. There are no silver bullets in SEO, just a lot of shiny silver drops of sweat, coming from your forehead.</p><p><a\nhref=\"http://yoast.com/penguin-panda-issues/\">Penguin, Panda, it&#8217;s not that black and white..</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/UDijxOyZ450\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/penguin-panda-issues/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"85\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/Yoast_penguin.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Yoast – Penguin update\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/penguin-panda-issues/#utm_source=rss&utm_medium=rss&utm_campaign=penguin-panda-issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Having a blast at BlueGlass LA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/r_uYdP0kJkU/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://yoast.com/blast-blueglass-la/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Apr 2012 17:18:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:10:\"Conference\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45602\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:775:\"<p>I&#8217;m currently sitting in the conference room for BlueGlass LA, listening to Marty Weintraub and finishing my presentation I&#8217;ll be giving this afternoon. Which leads me to the point of this post as I&#8217;m going to try and prove a point, therefore the following video is not really meant for you to watch but for&#8230;</p><p><a\nhref=\"http://yoast.com/blast-blueglass-la/\">Having a blast at BlueGlass LA</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1452:\"<p>I&#8217;m currently sitting in the conference room for <a\nhref=\"http://www.blueglass.com/conferences/la/\">BlueGlass LA</a>, listening to <a\nhref=\"http://www.aimclearblog.com/author/aimclear/\">Marty Weintraub</a> and finishing my presentation I&#8217;ll be giving this afternoon. Which leads me to the point of this post as I&#8217;m going to try and prove a point, therefore the following video is not really meant for you to watch but for me to test something with:</p><p><iframe\nwidth=\"570\" height=\"321\" src=\"http://www.youtube.com/embed/CSMUB1u5VXI?fs=1&#038;feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p><p>As a side note, BlueGlass LA is probably the best conference I&#8217;ve been to in a while, with a ridiculous line-up of speakers, if you&#8217;re going to go to an internet marketing conference, BlueGlass conferences are seriously among the very best in the US, second only to SEOktoberfest.</p><p><a\nhref=\"http://yoast.com/blast-blueglass-la/\">Having a blast at BlueGlass LA</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/r_uYdP0kJkU\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://yoast.com/blast-blueglass-la/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:6:\"      \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/CSMUB1u5VXI\";s:8:\"duration\";s:3:\"245\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:5:{s:6:\"player\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/CSMUB1u5VXI\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"BlueGlass LA • Best Online Marketing Conf on the West Coast • Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"Having a blast at BlueGlass LA with some of the most awesome internet marketers in the world.\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:138:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/blueglass-la-e280a2-best-online-marketing-conf-on-the-west-coast-e280a2-yoast-300x225.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"keywords\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"BlueGlass,BlueGlass LA,conference,BlueGlass LA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://yoast.com/blast-blueglass-la/#utm_source=rss&utm_medium=rss&utm_campaign=blast-blueglass-la\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Why I dislike Bo.lt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/6OfPelIL784/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://yoast.com/dislike-bolt/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 21 Apr 2012 21:59:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45589\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:710:\"<p>When I released my updated WordPress SEO article a few weeks back, my buddy Avinash was kind enough to tweet it. He tweeted it, at first, with a bo.lt link. Bo.lt is a sharing service that allows you to basically make a copy of a page and add some notes or even some changes to&#8230;</p><p><a\nhref=\"http://yoast.com/dislike-bolt/\">Why I dislike Bo.lt</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4689:\"<p><img\nclass=\"alignright size-full wp-image-45593\" title=\"bo.lt logo\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/04/bo.lt-logo.jpg\" alt=\"bo.lt logo\" width=\"200\" height=\"200\" />When I released my updated <a\nhref=\"http://yoast.com/articles/wordpress-seo/\">WordPress SEO article</a> a few weeks back, my buddy <a\nhref=\"http://www.kaushik.net/avinash/\">Avinash</a> was kind enough to tweet it. He tweeted it, at first, with a <a\nhref=\"http://bo.lt\">bo.lt</a> link. Bo.lt is a sharing service that allows you to basically make a copy of a page and add some notes or even some changes to the page. The idea is nice, as a webmaster though, I hate it. Let me explain why.</p><p>You see, bo.lt makes a <em>copy</em> of the page at the moment it&#8217;s prepared for sharing, they say they do that because of speed. As Avinash tweets a lot, he probably made that copy a couple of hours before he shared it. This wouldn&#8217;t be so much of an issue if I hadn&#8217;t added stuff to the page in the mean time and fixed a lot of typo&#8217;s. Everyone who&#8217;d use Avinash&#8217;s link wouldn&#8217;t see those changes. And bo.lt decided that for me, without asking me anything, or even worse, giving me the option to opt-out.</p><h2>SEO Impact</h2><p>Surely those bo.lt guys are at least trying to give the rankings for those pages people share through its service their links back? No. They don&#8217;t. Well, not unless you&#8217;re not already adding <code>rel=\"canonical\"</code> elements to your site yourself. Each user has its own subdomain. Avinash&#8217;s subdomain is zqi.bo.lt. As you can <a\nhref=\"http://www.google.com/search?q=site%3Abo.lt+yoast&amp;pws=0\">see for yourself</a>, quite a few of his shared pages are indexed by Google. That shouldn&#8217;t be possible. Bo.lt should add a canonical back to the original page if there isn&#8217;t one in the source already.</p><h2>No Analytics</h2><p>They claim a webmaster gets all his normal stuff, ads and analytics etc. Except that for both Clicky and Google Analytics there are no views measured for that bo.lt link, because Clicky refuses pageviews from other domains and I&#8217;ve filtered those out of Google Analytics to prevent others from rendering my analytics useless (yes, people do try that). So, &#8220;my&#8221; visitors don&#8217;t get the changes I made to the copy, making me look stupid and I can&#8217;t track which visitors those were and where they came from&#8230; At this point, I want out.</p><h2>Opt Out</h2><p>I&#8217;ve gone through their documentation, both normal and for developers, and there simply is no documented way to opt-out. So I decided to dive a bit deeper and figure out which user-agent bo.lt uses. It turns out that they actually <em>do</em> have a <a\nhref=\"http://bo.lt/ua\">page about their user-agent</a>. The next step would normally be simple: add a line to your robots.txt blocking bo.lt. Unfortunately, in my tests, bo.lt never actually retrieved the robots.txt file so they&#8217;re not adhering to the robots.txt protocol. They <em>really</em> should. They&#8217;re taking my content, they&#8217;re not asking for permission and they&#8217;re not allowing me to opt-out. Someone could sue them over that. I&#8217;m just going to request, through this blog post:</p><p><strong>Bo.lt, please add an option to opt my sites out of your service.</strong></p><p>Also, in my opinion, if you&#8217;re using bo.lt, you should probably start considering alternatives.</p><p>Disclaimer: please be aware that I like Avinash a lot and don&#8217;t blame <em>him</em> for anything. He&#8217;s a great guy and an inspiration to a lot of us in the online marketing industry. It&#8217;s the bo.lt service I dislike and I think that after reading this he will switch to something else as well.</p><h2>A &#8220;hard&#8221; out</h2><p>I figured out a &#8220;hard&#8221; way to get out of bo.lt doing its thing, add the following to your <em>.htaccess</em> file:</p><pre class=\"brush: plain; title: ; notranslate\">RewriteBase /\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} bo.lt/ua\nRewriteRule . - [F,L]</pre><p>This will block bo.lt, giving it a &#8220;forbidden&#8221; page.</p><p><a\nhref=\"http://yoast.com/dislike-bolt/\">Why I dislike Bo.lt</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/6OfPelIL784\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://yoast.com/dislike-bolt/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"14\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/bo.lt-logo-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn3.yoast.com/wp-content/uploads/2012/04/bo.lt-logo.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"bo.lt logo\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/bo.lt-logo-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://yoast.com/dislike-bolt/#utm_source=rss&utm_medium=rss&utm_campaign=dislike-bolt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:12:\"            \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"WordPress Stats Infographic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/RkHT86bonB8/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://yoast.com/wordpress-stats/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Apr 2012 11:30:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45554\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:761:\"<p>My Google Analytics plugin recently hit 3 million downloads and my WordPress SEO plugin hit its first million downloads. I thought those stats were cool and I decided to have an infographic made with more WordPress stats and dive in a little bit more and gather some stats that I thought would be interesting. If you&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-stats/\">WordPress Stats Infographic</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3356:\"<p><div\nclass=\"alignright\"><a\nhref=\"http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fyoast.com%2Fwordpress-stats%2F&media=http%3A%2F%2Fcdn.yoast.com%2Fwp-content%2Fuploads%2F2012%2F04%2Fwordpress-stats-infographic-yoast-full.jpg&description=WordPress+Stats+infographic+by+Yoast\" class=\"pin-it-button\" count-layout=\"vertical\"><img\nborder=\"0\" src=\"//assets.pinterest.com/images/PinExt.png\" title=\"Pin It\" /></a><script type=\"text/javascript\" src=\"//assets.pinterest.com/js/pinit.js\"></script></div>My <a\nhref=\"http://yoast.com/wordpress/google-analytics/\">Google Analytics plugin</a> recently hit 3 million downloads and my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> hit its first million downloads. I thought those stats were cool and I decided to have an infographic made with more WordPress stats and dive in a little bit more and gather some stats that I thought would be interesting.</p><p>If you read any blogs in the world, by now you&#8217;ll know <a\nhref=\"http://royal.pingdom.com/2012/04/11/wordpress-completely-dominates-top-100-blogs/\">WordPress dominates the top 100 blogs in the world</a>, <a\nhref=\"http://ma.tt/2012/04/wordpress-and-the-top-100/\">Matt had some interesting comments</a> about that. We&#8217;ve seen more WordPress stats, like <a\nhref=\"http://lorelle.wordpress.com/2012/03/29/wordpress-stats-and-numbers-breaking-their-own-records/\">these by Lorelle</a>. I then started adding more stats on my own.</p><p>I asked <a\nhref=\"http://www.experian.com/hitwise/index.html\">Experian Hitwise</a> to give me some stats about visits to WordPress.org, Drupal.org and Joomla.org in the UK and US, which they did (thanks!). <a\nhref=\"https://www.odesk.com/trends/WordPress\">oDesk</a> and <a\nhref=\"http://www.freelancer.com/hire/Wordpress\">Freelancer.com</a> have some great WordPress stats pages and of course there&#8217;s a bit of info <a\nhref=\"http://wordpress.org/extend/plugins/\">on WordPress</a>.org itself. So, with all of that and some I&#8217;m probably forgetting, <a\nhref=\"http://www.designbysoap.co.uk/design/infographic-design/?utm_source=yoast&amp;utm_medium=post&amp;utm_campaign=wordpress-stats\">Design by Soap</a> made the following infographic for me, I hope you like it, if you do, please share it! (<a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast-full.jpg\">click here for a larger version</a>)</p><h2>WordPress Stats</h2><p><a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast-full.jpg\"><img\nclass=\"alignnone size-full wp-image-45559\" title=\"WordPress Stats infographic by Yoast\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1.jpg\" alt=\"WordPress Stats infographic by Yoast\" width=\"582\" height=\"3382\" /></a></p><p><a\nhref=\"http://yoast.com/wordpress-stats/\">WordPress Stats Infographic</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/RkHT86bonB8\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://yoast.com/wordpress-stats/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"57\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:56:\"http://yoast.com//assets.pinterest.com/images/PinExt.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:2:{i:0;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:56:\"http://yoast.com//assets.pinterest.com/images/PinExt.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"Pin It\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:87:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"WordPress Stats infographic by Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:94:\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://yoast.com/wordpress-stats/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-stats\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:10:\"          \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"The ethics of SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/YfVDkmGVt78/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://yoast.com/ethics-seo/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Apr 2012 08:29:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:4:\"Spam\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45531\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:774:\"<p>The type of SEO I help my clients do and promote to you using this blog is often labeled white hat SEO because it stays within Google&#8217;s and other search engines guidelines. Other SEO&#8217;s don&#8217;t care about Google&#8217;s guidelines as much and do what&#8217;s called &#8220;black hat SEO&#8221;. Far too often though, black hat SEO&#8230;</p><p><a\nhref=\"http://yoast.com/ethics-seo/\">The ethics of SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6527:\"<p>The type of SEO I help my clients do and promote to you using this blog is often labeled white hat SEO because it stays within Google&#8217;s and other search engines guidelines. Other SEO&#8217;s don&#8217;t care about Google&#8217;s guidelines as much and do what&#8217;s called &#8220;black hat SEO&#8221;. Far too often though, black hat SEO is confused with the hacking of sites and the use of other tactics not outside the laws of Google but the laws of our lands. I think it&#8217;s time for me to explain where I stand in this.</p><h2>My background</h2><p>As a former Theology student and as someone raised in the Christian tradition, I have a fairly specific (and in some eyes: stringent) set of ethics. I don&#8217;t work on gambling or porn related sites because of that. I&#8217;m aware that others have different opinions on this and I don&#8217;t judge others when they have other ethics with regards to their work. To each his own. Sometimes though, I draw the line. Among my friends are some of the world&#8217;s best black hat SEO&#8217;s. These are also guys that will <em>never</em> break a law or willfully hurt other people to get their rankings, they just game Google&#8217;s algorithms. I know <a\nhref=\"http://mattcutts.com/blog/\">Matt</a> knows at least some of them and there&#8217;s even a form of &#8220;honor&#8221; among them: he seems to appreciate their ability to outwit their algorithm. Unfortunately not everyone in the SEO &#8220;community&#8221; is that clean: some people <em>are </em>willing to break laws or hurt other people. After the last SES conference in Amsterdam, which I arranged the speakers for, one of the speakers (not the keynote :) ) admitted to me he wouldn&#8217;t mind teaching other people how to hack sites or how to build trojans to gain links. I was too startled to give a proper response but decided later that day that I would never allow him back on a conference I arranged speakers for.</p><h2>Spammy Link Building in the Netherlands</h2><p>The last few days there&#8217;s been <a\nhref=\"http://www.molblog.nl/bericht/douwe-egberts-kpn-pon-en-randstad-betrokken-bij-icomment-spam-i/\">an outcry</a> in the Netherlands over several companies using comment spam and forum spam as a method of gaining links. They&#8217;d been caught creating fake profiles on all sort of sites and pretending to interact while really only inserting their links. I had to laugh a bit, as would most of my UK, American and German friends, as that&#8217;s <em>so</em> common outside of the Netherlands nobody would be surprised to see that anymore. There was <a\nhref=\"http://www.molblog.nl/bericht/de-buzzmollen-van-groupon/\">one specific case</a> though that &#8220;hurt&#8221; more than others (which was by another company by the way). Someone had willfully created an account on a forum for MS (multiple sclerosis) patients, claiming to be a patient, while was spamming links there to health related offers. That&#8217;s so low that it hurts.</p><h2>Outing Non-ethical SEO practices: immoral?</h2><p>Recently Joe Hall, whom I respect a lot, did a post saying <a\nhref=\"http://joehall.me/seo-outing-is-immoral/29/\">SEO &#8220;outing&#8221; is immoral</a>. He mentions that while the outed practices themselves might be non-ethical, those people have families too, etc. Basically: people lose their jobs because of it. That&#8217;s true. And that&#8217;s sad. Especially as most of those people will not know what hit them. I will counter that though: those companies have grown by using their unethical methods, costing other people their jobs in other companies. This is a zero-sum game in most cases. Google doesn&#8217;t tell people what to buy, it helps them find <em>where</em> they can buy it. Keep this in your mind at all times: search doesn&#8217;t create demand, it merely funnels it. I refuse to let people who use unethical SEO methods &#8220;win&#8221; because they support families, simply because their more ethical competitors support families too. I recently <a\nhref=\"http://yoast.com/godaddy-link-building/\">outed GoDaddy</a> over using spammy link building techniques and got a lot of flack for that from other people in the industry. Some seem to think that it&#8217;s all of &#8220;us&#8221; (SEO&#8217;s) against &#8220;them&#8221; (Google). I wholeheartedly disagree. GoDaddy was using its paying customers to strengthen their own SEO without consulting them, in fact, they were specifically hiding what they were doing in their editor. I don&#8217;t mind them &#8220;playing&#8221; Google&#8217;s algorithms. I mind them abusing their customers websites without their consent. The only way of making that stop is to ask Google to remove the value that abuse has. In the same way I loathe WordPress plugin developers who add links to their users sites without consent. I will <em>not</em> &#8221;out&#8221; people for buying high quality, relevant links from high quality websites related to their own topic, I have less issues outing people who hack into my website to gain a few links. This happens more often than I dare to admit.</p><h2>Policing the web</h2><p>Joe goes further and says:</p><blockquote><p>&#8220;If your paycheck doesn’t say “Google” on it, it’s not your job to police the web.&#8221;</p></blockquote><p>My paycheck doesn&#8217;t say Google. I&#8217;m not policing the web. Neither is Google. Google is trying to maintain a set of rules <em>within its own index</em>. It has all the rights in the world to do that. My paycheck doesn&#8217;t say &#8220;WordPress&#8221; either, yet I help develop that project because we all benefit. There <em>really</em> is such a thing as &#8220;the common good&#8221;. That&#8217;s entirely different from outing every SEO I find that does something outside of Google&#8217;s guidelines, I&#8217;m smart enough to create my own set of ethics. I hope you are too. I for one intend to help them battle unethical SEO&#8217;s because I think we all benefit from that.</p><p><a\nhref=\"http://yoast.com/ethics-seo/\">The ethics of SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/YfVDkmGVt78\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://yoast.com/ethics-seo/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://yoast.com/ethics-seo/#utm_source=rss&utm_medium=rss&utm_campaign=ethics-seo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:15:\"               \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"7 ways to Increase Sales by creating Trust\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/1ssU1JMTUtQ/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://yoast.com/7-ways-to-increase-sales-by-creating-trust/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 26 Mar 2012 13:09:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:22:\"Usability & Conversion\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:28:\"Conversion Rate Optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45457\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:779:\"<p>The key to conversing a visitor into a client is the creation of trust. Your product can be the greatest thing on earth or the dullest office supply ever, both can be sold online when your visitor knows you are the best supplier for that product or service. We often advise on how to gain&#8230;</p><p><a\nhref=\"http://yoast.com/7-ways-to-increase-sales-by-creating-trust/\">7 ways to Increase Sales by creating Trust</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Michiel Heijmans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6688:\"<p>The key to conversing a visitor into a client is the creation of trust. Your product can be the greatest thing on earth or the dullest office supply ever, both can be sold online when your visitor knows you are the best supplier for that product or service.</p><p>We often advise on how to gain trust in our <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">website reviews</a>, and I&#8217;ve compiled a list of some of the advice we&#8217;ve given over time. Of course, trust can be earned in more ways than this, but we&#8217;ll give you these seven to start with.</p><h2>1. Use clear and normal language</h2><p>This is an often overseen issue that causes a lot of misgrief with your visitors. You should speak their language, not drown them in a sea of technical specs you don&#8217;t even understand yourself. Use a clear and direct style of writing. Keep your audience in mind. Do not focus on telling them what you want to tell them, focus on providing as many arguments as possible why their quality of life improves after buying that specific product.</p><h2>2. Testimonials</h2><p>Do not brag about your products yourself. If your products or services are really that good, I&#8217;m sure you&#8217;ll find someone else that can do the bragging for you. Make sure your visitor understand that the testimonial is written by an actual customer, by listing at least name and company and if the customer agrees, even a picture of him. Video seems to be the next big thing in testimonials, by the way. In my opinion, that video testimonial should be accompanied by a written excerpt:</p><div\nid=\"attachment_45461\" class=\"wp-caption alignright\" style=\"width: 590px\"><a\nhref=\"http://cdn.yoast.com/wp-content/uploads/2012/03/testimonials-cloversites.com_.png\"><img\nclass=\"size-large wp-image-45461\" title=\"Testimonials as seen on cloversites.com\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/testimonials-cloversites.com_-590x472.png\" alt=\"Testimonials as seen on cloversites.com\" width=\"580\" height=\"464\" /></a><p\nclass=\"wp-caption-text\">Testimonials as seen on cloversites.com</p></div><h2>3. Verified signs</h2><p>Everyone can create a verified sign, so don&#8217;t let those verified signs fool you. But the majority of your visitors actually believe that you are the &#8216;Most appreciated hairdresser of Mississippi&#8217; or the &#8216;Best Plummer 2006&#8242;. Man, I hate those signs. But when the signs are from well-known companies, they really do add value to a webshop:</p><div\nid=\"attachment_45459\" class=\"wp-caption alignright\" style=\"width: 590px\"><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/verified-signs-dx.com_.png\"><img\nclass=\"size-large wp-image-45459\" title=\"&quot;Verified&quot; signs\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/verified-signs-dx.com_-590x76.png\" alt=\"&quot;Verified&quot; signs\" width=\"580\" height=\"74\" /></a><p\nclass=\"wp-caption-text\">&quot;Verified&quot; signs</p></div><p>By investing in the guidelines of the right verification companies  the webshop shows that it has been keeping the customer in mind when setting up the website.</p><h2>4. Pictures</h2><p>If you recognize the woman on this picture, please call the following toll-free number&#8230;:</p><p><a\nhref=\"http://cdn3.yoast.com/wp-content/uploads/2012/03/picture-stock.png\"><img\nclass=\"alignright size-large wp-image-45460\" title=\"Stock photography\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/picture-stock-590x314.png\" alt=\"Stock photography\" width=\"580\" height=\"308\" /></a></p><p>You can do better than that stock photo. Listing actual pictures of yourself and/or your employees pushes conversion due to recognition and identification.</p><h2>5. List your physical address</h2><p>This one is really simple: people want to know there is a place to go to in case of problems (if any). Having an actual store next to your webshop works even better, especially if a lot of your customers are relatively local.</p><p>In the Netherlands <a\nhref=\"http://digitalstreet.nl/\">digitalstreet.nl</a> made this concept into a huge success, even though they&#8217;re located in the south-west of the Netherlands (quite near to where we are), people come from all over the Netherlands because they&#8217;d rather buy the product in the store. There are more stories like that, but even if you don&#8217;t want to do that, just listing your address on check-out pages increases trust a lot.</p><h2>6. What happens after check-out?</h2><p>There&#8217;s this hesitation in almost all buying decisions: right before you click the Pay Now button. What&#8217;s going to happen next? Am I charged for taxes, import, anything else? Can I select a wrapping paper? Explain what happens after clicking that button. That way the customer is included in your ordering process and there are absolutely no suprises. That can be done with just a few short lines of text:</p><p><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/checkout-bloomingdales.com_.png\"><img\nclass=\"alignright size-large wp-image-45458\" title=\"checkout message on bloomingdales.com\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/03/checkout-bloomingdales.com_-590x244.png\" alt=\"checkout message on bloomingdales.com\" width=\"580\" height=\"239\" /></a></p><h2>7. Show you care about more than making money</h2><p>The most important thing is that your website has to reflect your believe in the product or service you provide. Just a list of products is not enough. Also tell your customer about your company, your main values or mission statement. I really love the 1% for the Planet from Yvon Chouinard (Patagonia) and Craig Mathews (Blue Ribbon Flies) <a\nhref=\"http://www.onepercentfortheplanet.org/\">http://www.onepercentfortheplanet.org</a>. Next to showing that you are involved, it also creates a huge sympathy and trust factor.</p><h2>We&#8217;d love to hear your tips!</h2><p>If you are selling products or services on your website, you must have thought about this subject. I&#8217;m curious: What have you done on your website to increase trust? What are you going to do?</p><p><a\nhref=\"http://yoast.com/7-ways-to-increase-sales-by-creating-trust/\">7 ways to Increase Sales by creating Trust</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/1ssU1JMTUtQ\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://yoast.com/7-ways-to-increase-sales-by-creating-trust/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"44\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:90:\"http://cdn3.yoast.com/wp-content/uploads/2012/03/testimonials-cloversites.com_-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:4:{i:0;a:6:{s:4:\"data\";s:4:\"    \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:81:\"http://cdn.yoast.com/wp-content/uploads/2012/03/testimonials-cloversites.com_.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:3:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Testimonials as seen on cloversites.com\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Testimonials as seen on cloversites.com\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:90:\"http://cdn3.yoast.com/wp-content/uploads/2012/03/testimonials-cloversites.com_-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:4:\"    \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:75:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/verified-signs-dx.com_.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:3:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"“Verified” signs\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"\"Verified\" signs\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn.yoast.com/wp-content/uploads/2012/03/verified-signs-dx.com_-125x98.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn3.yoast.com/wp-content/uploads/2012/03/picture-stock.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Stock photography\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:74:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/picture-stock-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:80:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/checkout-bloomingdales.com_.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"checkout message on bloomingdales.com\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:87:\"http://cdn.yoast.com/wp-content/uploads/2012/03/checkout-bloomingdales.com_-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:146:\"http://yoast.com/7-ways-to-increase-sales-by-creating-trust/#utm_source=rss&utm_medium=rss&utm_campaign=7-ways-to-increase-sales-by-creating-trust\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:9:\"         \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Over-Optimization vs Optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/B9ePvnQWSRs/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://yoast.com/over-optimization-vs-optimization/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 19 Mar 2012 14:10:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45454\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:776:\"<p>So Matt said something at SXSW last week about Google introducing a filter / penalty / change. As my inbox is already overflowing with emails from people asking whether they should stop optimizing their site and/or using my plugin, I thought I&#8217;d do a quick post. What Matt said was vague at best but he&#8230;</p><p><a\nhref=\"http://yoast.com/over-optimization-vs-optimization/\">Over-Optimization vs Optimization</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2235:\"<p>So <a\nhref=\"http://www.mattcutts.com/blog/\">Matt</a> said <a\nhref=\"http://searchengineland.com/too-much-seo-google%E2%80%99s-working-on-an-%E2%80%9Cover-optimization%E2%80%9D-penalty-for-that-115627\">something at SXSW</a> last week about Google introducing a filter / penalty / change. As my inbox is already overflowing with emails from people asking whether they should stop optimizing their site and/or using my plugin, I thought I&#8217;d do a quick post. What Matt said was vague at best but he said one thing that leaves little room for speculation:</p><blockquote><p>All those people doing, for lack of a better word, over optimization or overly SEO – versus those making great content and great site.</p></blockquote><p>So, Google wants to do something about <strong>over</strong>-optimization. That&#8217;s not saying they want to do something about SEO. As Matt said on that same panel one more time, they have nothing against SEO, they have something against spamming.</p><p>So, if you write texts with a keyword density of 25%, you maybe should be worried. If you install an <a\nhref=\"http://yoast.com/wordpress/seo/\">SEO plugin</a> that helps you write more search engine friendly content (and even <em>warns you</em> when it thinks the keyword density is too high) and optimizes most of the technicalities for you, there&#8217;s nothing to worry about. <a\nhref=\"http://www.seozen.com/about/\">Several</a> <a\nhref=\"http://www.filiwiese.com/about-fili/\">Googlers</a> use my plugin, do you really think they&#8217;d do that if they considered it over-optimization?</p><p>Now, stop over-analyzing everything Matt says and get back to work, building good websites for users.</p><p><a\nhref=\"http://yoast.com/over-optimization-vs-optimization/\">Over-Optimization vs Optimization</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/B9ePvnQWSRs\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"http://yoast.com/over-optimization-vs-optimization/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"95\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:128:\"http://yoast.com/over-optimization-vs-optimization/#utm_source=rss&utm_medium=rss&utm_campaign=over-optimization-vs-optimization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:14:\"              \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"SEO Campixx 2012\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/_LJSE4ckdDw/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/seo-campixx-2012/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 15 Mar 2012 08:28:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:10:\"Conference\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45444\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:749:\"<p>I spoke at SEO Campixx 2012 in Berlin last weekend. It was an awesome conference and I met up with loads of good friends. During that time I was interviewed and my presentation was recorded, so I&#8217;ll let you view both below: My presentation on how to use my WordPress SEO plugin (warning, I was a bit groggy&#8230;</p><p><a\nhref=\"http://yoast.com/seo-campixx-2012/\">SEO Campixx 2012</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1458:\"<p><img\nclass=\"alignright size-full wp-image-45445\" title=\"SEO Campixx 2012\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/03/seo-campixx-12.jpg\" alt=\"SEO Campixx 2012\" width=\"125\" height=\"79\" />I spoke at <a\nhref=\"http://www.seo-campixx-12.de/\">SEO Campixx 2012</a> in Berlin last weekend. It was an awesome conference and I met up with loads of good friends. During that time I was interviewed <em>and</em> my presentation was recorded, so I&#8217;ll let you view both below:</p><p>My presentation on how to use my WordPress SEO plugin (warning, I was a bit groggy and it shows), was <a\nhref=\"http://webschorle.de/seo-campixx-2012-wordpress-seo-with-yoast-joost-de-valk/\">recorded by Webschorle</a>.</p><p>My interview with <a\nhref=\"http://twitter.com/tobiasfox\">Tobias Fox</a>:</p><p><iframe\nwidth=\"570\" height=\"321\" src=\"http://www.youtube.com/embed/1yyh61xBGG4?fs=1&#038;feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p><p><a\nhref=\"http://yoast.com/seo-campixx-2012/\">SEO Campixx 2012</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/_LJSE4ckdDw\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://yoast.com/seo-campixx-2012/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"5\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:7:\"content\";a:2:{i:0;a:6:{s:4:\"data\";s:6:\"      \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/1yyh61xBGG4\";s:8:\"duration\";s:3:\"388\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:5:{s:6:\"player\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/1yyh61xBGG4\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"SEO Campixx 2012 • Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:300:\"I spoke at SEO Campixx 2012 in Berlin last weekend. It was an awesome conference and I met up with loads of good friends. During that time I was interviewed and my presentation was recorded, so I\'ll let you view both below: My presentation on how to use my WordPress SEO plugin (warning, I was a b\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:89:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/seo-campixx-2012-8226-yoast1-300x225.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"keywords\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:67:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/seo-campixx-12.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"SEO Campixx 2012\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:67:\"http://cdn2.yoast.com/wp-content/uploads/2012/03/seo-campixx-12.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:94:\"http://yoast.com/seo-campixx-2012/#utm_source=rss&utm_medium=rss&utm_campaign=seo-campixx-2012\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:2:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";s:4:\"href\";s:39:\"http://feeds.feedburner.com/joostdevalk\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"rel\";s:3:\"hub\";s:4:\"href\";s:32:\"http://pubsubhubbub.appspot.com/\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:5:{s:4:\"info\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"uri\";s:11:\"joostdevalk\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:14:\"emailServiceId\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"joostdevalk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:18:\"feedburnerHostname\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://feedburner.google.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"feedFlare\";a:7:{i:0;a:5:{s:4:\"data\";s:22:\"Subscribe with Podnova\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:82:\"http://www.podnova.com/add.srf?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:47:\"http://www.podnova.com/img_chicklet_podnova.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:24:\"Subscribe with NewsGator\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:103:\"http://www.newsgator.com/ngs/subscriber/subext.aspx?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:42:\"http://www.newsgator.com/images/ngsub1.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:23:\"Subscribe with Netvibes\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:89:\"http://www.netvibes.com/subscribe.php?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:44:\"http://www.netvibes.com/img/add2netvibes.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:25:\"Subscribe with Pageflakes\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:92:\"http://www.pageflakes.com/subscribe.aspx?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:87:\"http://www.pageflakes.com/ImageFile.ashx?instanceId=Static_4&fileName=ATP_blu_91x17.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:24:\"Subscribe with My Yahoo!\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:79:\"http://add.my.yahoo.com/rss?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:59:\"http://us.i1.yimg.com/us.yimg.com/i/us/my/addtomyyahoo4.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:19:\"Subscribe with ODEO\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:85:\"http://odeo.com/listen/subscribe?feed=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:43:\"http://odeo.com/img/badge-channel-black.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:21:\"Subscribe with Google\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:84:\"http://fusion.google.com/add?feedurl=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:51:\"http://buttons.googlesyndication.com/fusion/add.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"browserFriendly\";a:1:{i:0;a:5:{s:4:\"data\";s:195:\"This is the combined feed for Yoast.com and the WordPress podcast. Subscribe now to get WordPress & Magento tips & tricks, helping you optimize your site for speed, search engines and conversion!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:4:\"etag\";s:27:\"yk2RXno7+fDD7rqEqT75MHqsP6w\";s:13:\"last-modified\";s:29:\"Mon, 10 Sep 2012 17:09:22 GMT\";s:4:\"date\";s:29:\"Mon, 10 Sep 2012 17:36:51 GMT\";s:7:\"expires\";s:29:\"Mon, 10 Sep 2012 17:36:51 GMT\";s:13:\"cache-control\";s:18:\"private, max-age=0\";s:22:\"x-content-type-options\";s:7:\"nosniff\";s:16:\"x-xss-protection\";s:13:\"1; mode=block\";s:6:\"server\";s:3:\"GSE\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(3370,'_transient_timeout_feed_mod_867bd5c64f85878d03a060509cd2f92c','1350853171','no'),(3371,'_transient_feed_mod_867bd5c64f85878d03a060509cd2f92c','1350809971','no'),(3372,'_transient_timeout_dash_aa95765b5cc111c56d5993d476b1c2f0','1350853171','no'),(3373,'_transient_dash_aa95765b5cc111c56d5993d476b1c2f0','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/63uT1Tml_fU/\' title=\'Accord is an ideal theme for the autumn season, with a colorful scenic photo of a forest trail in the fall, using the rich, earthy colors of gold, orange, red, green, yellow, and brown. Eureka is a single column microblogging theme with customizable footer, menu and theme colors along with support for all post formats. [&hellip;]\'>Weblog Tools Collection: WordPress Theme Releases for 10/20</a></li><li><a class=\'rsswidget\' href=\'http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/YqsCKF0wj1I/\' title=\'New plugins Login Security Solution is simple way to lock down login security for multisite and regular WordPress installations. PanoPress allows easy embedding of 360° Panoramas &amp; Virtual Tours created with a variety of applications using Flash &amp; HTML5. Updated plugins P2 Resolved Posts is a lightweight GTD plugin for WordPress and the P2 theme whic [&hellip;]\'>Weblog Tools Collection: WordPress Plugin Releases for 10/18</a></li><li><a class=\'rsswidget\' href=\'http://alexking.org/blog/2012/10/17/twitter-tools-data-upgrade-process\' title=\'One of the important changes in Twitter Tools 3.0 is the way that tweet data is stored in your WordPress database. Instead of writing that content in a separate database table the tweets are now stored as a custom post type within the posts table. This gives us all sorts of great benefits: it utilizes current WordPress best practices, making it more forward  [&hellip;]\'>Alex King: Twitter Tools’ Data Upgrade Process</a></li><li><a class=\'rsswidget\' href=\'http://alexking.org/blog/2012/10/16/twitter-tools-3-0-1\' title=\'I released Twitter Tools 3.0.1 last night to address all confirmed bugs in version 3.0: Respect timezone offset for new posts from tweets Ensure categories and tags are set properly for new posts from tweets Make enabled/disabled accounts more visually explicit Use proper URL example in help text Want more details? Check out the diff. [&hellip;]\'>Alex King: Twitter Tools 3.0.1</a></li><li><a class=\'rsswidget\' href=\'http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/ms8Gq66bFRM/\' title=\'Haunted House is a Halloween theme for your blog. Mystic has a simple, moody, ethereal quality to its look using subtle transparencies and neutral metallics such as gold and silver as font colors. Uridimmu has several widget areas and allows per-post layouts. [&hellip;]\'>Weblog Tools Collection: WordPress Theme Releases for 10/16</a></li></ul></div>','no'),(3374,'_transient_timeout_feed_a5420c83891a9c88ad2a4f04584a5efc','1350853172','no'),(3375,'_transient_feed_a5420c83891a9c88ad2a4f04584a5efc','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:72:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"http://wordpress.org/extend/plugins/browse/popular/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"WordPress Plugins » View: Most Popular\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 21 Oct 2012 08:42:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:15:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Contact Form 7\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wordpress.org/extend/plugins/contact-form-7/#post-2141\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Aug 2007 12:45:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"2141@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Just another contact form plugin. Simple but flexible.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Takayuki Miyoshi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"WordPress SEO by Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wordpress.org/extend/plugins/wordpress-seo/#post-8321\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 01 Jan 2009 20:34:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"8321@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:131:\"Improve your WordPress SEO: Write better content and have a fully optimized WordPress site using the WordPress SEO plugin by Yoast.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"All in One SEO Pack\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wordpress.org/extend/plugins/all-in-one-seo-pack/#post-753\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 30 Mar 2007 20:08:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"753@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"WordPress SEO plugin to automatically optimize your Wordpress blog for Search Engines.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"uberdose\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Jetpack by WordPress.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/extend/plugins/jetpack/#post-23862\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 Jan 2011 02:21:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"23862@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:104:\"Supercharge your WordPress site with powerful features previously only available to WordPress.com users.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Michael Adams (mdawaffe)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Google Analytics for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wordpress.org/extend/plugins/google-analytics-for-wordpress/#post-2316\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 14 Sep 2007 12:15:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"2316@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:145:\"Track your WordPress site easily and with lots of metadata: views per author &#38; category, automatic tracking of outbound clicks and pageviews.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Google XML Sitemaps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wordpress.org/extend/plugins/google-sitemap-generator/#post-132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:31:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"132@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:105:\"This plugin will generate a special XML sitemap which will help search engines to better index your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Arne\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Akismet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wordpress.org/extend/plugins/akismet/#post-15\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 22:11:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"15@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"Akismet checks your comments against the Akismet web service to see if they look like spam or not.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WP Super Cache\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wordpress.org/extend/plugins/wp-super-cache/#post-2572\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 05 Nov 2007 11:40:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"2572@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"A very fast caching engine for WordPress that produces static html files.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Donncha O Caoimh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"WordPress Importer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wordpress.org/extend/plugins/wordpress-importer/#post-18101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 20 May 2010 17:42:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"18101@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"Import posts, pages, comments, custom fields, categories, tags and more from a WordPress export file.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Brian Colinger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"gtrans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"http://wordpress.org/extend/plugins/gtrans/#post-30417\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Sep 2011 11:48:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"30417@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"Make your website available to the world using Google Translate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"kikadev\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"NextGEN Gallery\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wordpress.org/extend/plugins/nextgen-gallery/#post-1169\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 23 Apr 2007 20:08:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"1169@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:109:\"NextGEN Gallery is a fully integrated image gallery plugin for WordPress with dozens of options and features.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Alex Rabe\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Ultimate TinyMCE\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://wordpress.org/extend/plugins/ultimate-tinymce/#post-32088\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 14 Nov 2011 09:06:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"32088@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:84:\"Description: Beef up your visual tinymce editor with a plethora of advanced options.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Josh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"WP-PageNavi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/extend/plugins/wp-pagenavi/#post-363\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 09 Mar 2007 23:17:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"363@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"Adds a more advanced paging navigation interface.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Lester Chan\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"AddThis\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"http://wordpress.org/extend/plugins/addthis/#post-8124\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Dec 2008 16:03:39 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"8124@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:127:\"The AddThis Social Bookmarking Widget allows any visitor to bookmark and share your site easily with over 330 popular services.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"_mjk_\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Wordfence Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/extend/plugins/wordfence/#post-29832\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 03:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"29832@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"Wordfence Security is a free enterprise class security plugin that includes a firewall, virus scanning, real-time traffic with geolocation and more.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"mmaunder\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:52:\"http://wordpress.org/extend/plugins/rss/view/popular\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:31 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:7:\"expires\";s:29:\"Sun, 21 Oct 2012 09:17:46 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Sun, 21 Oct 2012 08:42:46 +0000\";s:4:\"x-nc\";s:11:\"HIT luv 139\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(3376,'_transient_timeout_feed_mod_a5420c83891a9c88ad2a4f04584a5efc','1350853172','no'),(3377,'_transient_feed_mod_a5420c83891a9c88ad2a4f04584a5efc','1350809972','no'),(2595,'_site_transient_browser_2970ac2362d4ebac0a9a827a40937278','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"12.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3364,'_transient_timeout_feed_mod_41fc524cc256a45078ac52b92bf9189e','1350853169','no'),(3365,'_transient_feed_mod_41fc524cc256a45078ac52b92bf9189e','1350809969','no'),(3366,'_transient_timeout_dash_20494a3d90a6669585674ed0eb8dcd8f','1350853169','no'),(3367,'_transient_dash_20494a3d90a6669585674ed0eb8dcd8f','<p>This dashboard widget queries <a href=\"http://blogsearch.google.com/\">Google Blog Search</a> so that when another blog links to your site it will show up here. It has found no incoming links&hellip; yet. It&#8217;s okay &#8212; there is no rush.</p>\n','no'),(3362,'_transient_timeout_feed_41fc524cc256a45078ac52b92bf9189e','1350853169','no'),(3363,'_transient_feed_41fc524cc256a45078ac52b92bf9189e','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:4:\"\n  \n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:33:\"\n    \n    \n    \n    \n    \n    \n  \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:3:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"link:http://ole.michelsen.dk/blog/ - Google Blog Search\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://www.google.com/search?ie=utf-8&q=link:http://ole.michelsen.dk/blog/&tbm=blg&tbs=sbd:1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"Your search - <b>link:http://ole.michelsen.dk/blog/</b> - did not match any documents.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://a9.com/-/spec/opensearch/1.1/\";a:3:{s:12:\"totalResults\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:10:\"startIndex\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:12:\"itemsPerPage\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"10\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:12:\"content-type\";s:28:\"text/xml; charset=ISO-8859-1\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:29 GMT\";s:7:\"expires\";s:2:\"-1\";s:13:\"cache-control\";s:18:\"private, max-age=0\";s:10:\"set-cookie\";a:2:{i:0;s:143:\"PREF=ID=2153378e9fdc4cc3:FF=0:TM=1350809969:LM=1350809969:S=Gc7dDWG6o6bNBWls; expires=Tue, 21-Oct-2014 08:59:29 GMT; path=/; domain=.google.com\";i:1;s:212:\"NID=65=Rj9-RpxlHN--xoZMG6FhhL2y1rGcLnA5YoVGdP4lYZKpNdp33JQwtRGgD5uqOXnz_c1eq52HvLeQAjyYrNE9wYuUXthMToC6typio-wBHaMsY9wUR83J96FLEj_BeF7l; expires=Mon, 22-Apr-2013 08:59:29 GMT; path=/; domain=.google.com; HttpOnly\";}s:3:\"p3p\";s:122:\"CP=\"This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&answer=151657 for more info.\"\";s:6:\"server\";s:3:\"gws\";s:16:\"x-xss-protection\";s:13:\"1; mode=block\";s:15:\"x-frame-options\";s:10:\"SAMEORIGIN\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(3133,'_site_transient_timeout_browser_ab48b9a7153b06fc299c5902fb35bdfa','1348520988','yes'),(3134,'_site_transient_browser_ab48b9a7153b06fc299c5902fb35bdfa','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"15.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3322,'_site_transient_timeout_browser_a87cae39c0c588ade34b1d821df5a116','1350812777','yes'),(3323,'_site_transient_browser_a87cae39c0c588ade34b1d821df5a116','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:6:\"15.0.1\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3356,'_transient_timeout_yoast_tracking_active_plugins_hash','1351415550','no'),(3357,'_transient_yoast_tracking_active_plugins_hash','26c2db668ae054d5497840ea6addad45','no'),(3409,'_transient_timeout_yoast_tracking_cache','1351415559','no'),(3410,'_transient_yoast_tracking_cache','a:6:{s:4:\"site\";a:7:{s:4:\"hash\";s:32:\"7a746e7eb8ed7577f339906c296e375f\";s:3:\"url\";s:28:\"http://ole.michelsen.dk/blog\";s:4:\"name\";s:13:\"Ole Michelsen\";s:7:\"version\";s:5:\"3.4.2\";s:9:\"multisite\";b:0;s:5:\"users\";i:2;s:4:\"lang\";s:5:\"en_US\";}s:3:\"pts\";a:3:{s:4:\"post\";s:2:\"11\";s:4:\"page\";i:0;s:10:\"attachment\";i:0;}s:8:\"comments\";a:4:{s:5:\"total\";i:432;s:8:\"approved\";s:2:\"57\";s:4:\"spam\";s:3:\"375\";s:5:\"pings\";s:2:\"18\";}s:7:\"options\";a:1:{s:5:\"wpseo\";a:6:{s:12:\"xml_sitemaps\";i:1;s:13:\"force_rewrite\";i:1;s:9:\"opengraph\";i:0;s:7:\"twitter\";i:0;s:19:\"strip_category_base\";i:0;s:8:\"on_front\";s:5:\"posts\";}}s:5:\"theme\";a:6:{s:4:\"name\";s:9:\"Michelsen\";s:9:\"theme_uri\";s:24:\"http://ole.michelsen.dk/\";s:7:\"version\";s:3:\"1.0\";s:6:\"author\";s:13:\"Ole Michelsen\";s:10:\"author_uri\";s:0:\"\";s:8:\"template\";s:0:\"\";}s:7:\"plugins\";a:7:{s:7:\"addthis\";a:5:{s:7:\"version\";s:3:\"3.0\";s:4:\"name\";s:33:\"AddThis Social Bookmarking Widget\";s:10:\"plugin_uri\";s:22:\"http://www.addthis.com\";s:6:\"author\";s:16:\"The AddThis Team\";s:10:\"author_uri\";s:27:\"http://www.addthis.com/blog\";}s:7:\"akismet\";a:5:{s:7:\"version\";s:5:\"2.5.6\";s:4:\"name\";s:7:\"Akismet\";s:10:\"plugin_uri\";s:31:\"http://akismet.com/?return=true\";s:6:\"author\";s:10:\"Automattic\";s:10:\"author_uri\";s:40:\"http://automattic.com/wordpress-plugins/\";}s:30:\"google-analytics-for-wordpress\";a:5:{s:7:\"version\";s:5:\"4.2.8\";s:4:\"name\";s:30:\"Google Analytics for WordPress\";s:10:\"plugin_uri\";s:139:\"http://yoast.com/wordpress/google-analytics/#utm_source=wordpress&#038;utm_medium=plugin&#038;utm_campaign=wpgaplugin&#038;utm_content=v420\";s:6:\"author\";s:13:\"Joost de Valk\";s:10:\"author_uri\";s:17:\"http://yoast.com/\";}s:13:\"wordpress-seo\";a:5:{s:7:\"version\";s:7:\"1.2.8.5\";s:4:\"name\";s:13:\"WordPress SEO\";s:10:\"plugin_uri\";s:103:\"http://yoast.com/wordpress/seo/#utm_source=wpadmin&#038;utm_medium=plugin&#038;utm_campaign=wpseoplugin\";s:6:\"author\";s:13:\"Joost de Valk\";s:10:\"author_uri\";s:17:\"http://yoast.com/\";}s:12:\"wp-dbmanager\";a:5:{s:7:\"version\";s:4:\"2.63\";s:4:\"name\";s:12:\"WP-DBManager\";s:10:\"plugin_uri\";s:48:\"http://lesterchan.net/portfolio/programming/php/\";s:6:\"author\";s:20:\"Lester \'GaMerZ\' Chan\";s:10:\"author_uri\";s:21:\"http://lesterchan.net\";}s:12:\"wp-footnotes\";a:5:{s:7:\"version\";s:3:\"4.2\";s:4:\"name\";s:12:\"WP-Footnotes\";s:10:\"plugin_uri\";s:67:\"http://www.elvery.net/drzax/more-things/wordpress-footnotes-plugin/\";s:6:\"author\";s:12:\"Simon Elvery\";s:10:\"author_uri\";s:28:\"http://www.elvery.net/drzax/\";}s:9:\"wp-syntax\";a:5:{s:7:\"version\";s:6:\"0.9.13\";s:4:\"name\";s:9:\"WP-Syntax\";s:10:\"plugin_uri\";s:46:\"http://wordpress.org/extend/plugins/wp-syntax/\";s:6:\"author\";s:14:\"Steven A. Zahm\";s:10:\"author_uri\";s:26:\"http://connections-pro.com\";}}}','no'),(2425,'wpseo_social','a:5:{s:9:\"opengraph\";N;s:9:\"fb_pageid\";N;s:10:\"fb_adminid\";N;s:8:\"fb_appid\";N;s:12:\"fbconnectkey\";s:32:\"b84c77f1048bf99cdae7d20ebc049f8b\";}','yes'),(2673,'_site_transient_timeout_browser_14808cd56d08e0286a721b44fd32699c','1339752413','yes'),(2674,'_site_transient_browser_14808cd56d08e0286a721b44fd32699c','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:6:\"Safari\";s:7:\"version\";s:5:\"5.1.7\";s:10:\"update_url\";s:28:\"http://www.apple.com/safari/\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/safari.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/safari.png\";s:15:\"current_version\";s:3:\"5.1\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2910,'_site_transient_timeout_browser_c641ca620d19646545182b868b6e8fdd','1346076305','yes'),(3368,'_transient_timeout_feed_867bd5c64f85878d03a060509cd2f92c','1350853171','no'),(3369,'_transient_feed_867bd5c64f85878d03a060509cd2f92c','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:61:\"\n	\n	\n	\n	\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"WordPress Planet\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"en\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"WordPress Planet - http://planet.wordpress.org/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:50:{i:0;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"Weblog Tools Collection: WordPress Theme Releases for 10/20\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12128\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/63uT1Tml_fU/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:977:\"<p><img class=\"alignnone size-full wp-image-12129\" title=\"accord\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/accord.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://emptynestthemes.com/2012/10/19/accord-wordpress-blog-theme/\"><strong>Accord</strong></a> is an ideal theme for the autumn season, with a colorful scenic photo of a forest trail in the fall, using the rich, earthy colors of gold, orange, red, green, yellow, and brown.</p>\n<p><img class=\"alignnone size-full wp-image-12130\" title=\"eureka\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/eureka.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/eureka\"><strong>Eureka</strong></a> is a single column microblogging theme with customizable footer, menu and theme colors along with support for all post formats.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/63uT1Tml_fU\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 20 Oct 2012 14:45:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"Weblog Tools Collection: WordPress Plugin Releases for 10/18\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12121\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/YqsCKF0wj1I/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1345:\"<h3>New plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/login-security-solution/\"><strong>Login Security Solution</strong></a> is simple way to lock down login security for multisite and regular WordPress installations.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/panopress/\"><strong>PanoPress</strong></a> allows easy embedding of 360° Panoramas &amp; Virtual Tours created with a variety of applications using Flash &amp; HTML5.</p>\n<h3>Updated plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/p2-resolved-posts/\"><strong>P2 Resolved Posts</strong></a> is a lightweight GTD plugin for WordPress and <a href=\"http://p2theme.com\">the P2 theme</a> which allows you to mark a thread as &#8220;unresolved&#8221; when there&#8217;s something needing to be finished, and mark it as &#8220;resolved&#8221; when it&#8217;s been finished.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/social-web-links/\"><strong>Social Web Links</strong></a> will display elegant icons of your social profiles on a sidebar widget.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/twitter-tools/\"><strong>Twitter Tools</strong></a> creates a complete integration between your WordPress blog and your Twitter account.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/YqsCKF0wj1I\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 14:45:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"Alex King: Twitter Tools’ Data Upgrade Process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://alexking.org/?p=14742\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://alexking.org/blog/2012/10/17/twitter-tools-data-upgrade-process\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:5955:\"<p><img src=\"http://alexking.org/wp-content/uploads/2012/10/tweet-upgrade-notice-510x135.png\" alt=\"tweet-upgrade-notice\" width=\"480\" height=\"127\" class=\"alignnone size-medium-img wp-image-14806\" /></p>\n<p>One of the important changes in Twitter Tools 3.0 is the way that tweet data is stored in your WordPress database. Instead of writing that content in a separate database table the tweets are now stored as a custom post type within the posts table. This gives us all sorts of great benefits:</p>\n<ul>\n<li>it utilizes current WordPress best practices, making it more forward compatible</li>\n<li>an admin interface for editing and deleting tweets (a very common request)</li>\n<li>the ability to relate tweets via custom taxonomies (view your tweets by account, @mentions, #hashtags)</li>\n<li>the ability to store the original tweet data as post meta (and allow access to that data for display purposes)</li>\n<li>the ability to download and save an included photo as the featured image for the tweet (and resulting blog post, if that feature is enabled)</li>\n<li>theoretical WordPress.com compatibility</li>\n</ul>\n<p>The challenge is how best to implement the upgrade. There are two main things that need to happen in the upgrade process:</p>\n<ol>\n<li>Convert legacy data to the new format.</li>\n<li>Backfill full tweet data for the legacy data.</li>\n</ol>\n<p>These sound quite simple on the surface, but there are considerations that complicate matters. The first is that some folks have a <em>lot</em> of tweets. The second concern is with Twitter&#8217;s API limits. I didn&#8217;t want activity from Twitter Tools to use up all of the Twitter API calls for a given account. An upgrade process that handled these limitations was needed.</p>\n<p>First let&#8217;s look at the conversion process for the existing data. I&#8217;ve seen several people mention that they have 20,000+ tweets to upgrade with 3.0. With this amount of data, you can&#8217;t just pull it all in a database query and loop through it. Luckily I anticipated this and created a solution that would handle scale. The upgrade process first adds an &#8220;upgraded&#8221; column to the legacy tweets table so that it can keep track of status.</p>\n<p><img src=\"http://alexking.org/wp-content/uploads/2012/10/tweet-upgrade-510x235.png\" alt=\"tweet-upgrade\" width=\"480\" height=\"221\" class=\"alignnone size-medium-img wp-image-14804\" /></p>\n<p>The upgrade page itself has some JavaScript functionality on it to make everything work. When you click the Upgrade button, it makes an AJAX call to code that grabs <del>10</del> 25<sup id=\"fnref:1\"><a href=\"http://alexking.org/blog/topic/wordpress/feed#fn:1\" rel=\"footnote\">1</a></sup> tweets that need upgrading, creates new copies of those tweets as custom post types items, marks them as upgraded in the old table, then sends back a response. When that response is received, the progress bar is updated to let the user know things are moving along, and a new request is kicked off to upgrade the next 25 tweets. This continues until all tweets have been converted to custom post types.</p>\n<p><img src=\"http://alexking.org/wp-content/uploads/2012/10/tweet-upgrade-running-510x235.png\" alt=\"tweet-upgrade-running\" width=\"480\" height=\"221\" class=\"alignnone size-medium-img wp-image-14805\" /></p>\n<p>So that takes care of the initial conversion from the old data table to the nice elegant post types. Now we just need to get full tweet data for all of these tweets.</p>\n<p>I think it&#8217;s important to have the full tweet data stored locally because there are lots of interesting things you can do once you have this data. One thing I&#8217;m using this for is to create &#8220;in reply to X&#8221; links where appropriate.</p>\n<p><img src=\"http://alexking.org/wp-content/uploads/2012/10/tweet-in-reply-to-510x181.png\" alt=\"tweet-in-reply-to\" width=\"480\" height=\"170\" class=\"alignnone size-medium-img wp-image-14807\" /></p>\n<p>However I didn&#8217;t want your iPhone app to stop working because your WordPress site was trying to load in full data from Twitter and using up all of your <a href=\"https://dev.twitter.com/docs/rate-limiting\">API requests</a>. Since I don&#8217;t know how many other apps you might be using, I decided to be quite conservative with the process to fetch tweet data for each of the upgraded tweets.</p>\n<p>Every hour Twitter Tools makes requests to grab full content for 10 of the upgraded tweets, attaches that data (and processes it to attach @mentions and #hashtags), then clears the &#8220;this tweet needs more data&#8221; flag. The backfill process can stretch out over days/weeks/months if you have lots and lots of tweets, but that&#8217;s OK.</p>\n<p>This is data we didn&#8217;t have before, so we haven&#8217;t given up any features while we wait for it; and Twitter Tools is coded in such a way that this data is not required.</p>\n<hr />\n<p>The upgrade process seems to be taking a long time for some users. I can only assume this is due to limitations of their host or server configuration. For my ~4000 tweets the initial upgrade took about 5 minutes.</p>\n<p>When I see someone complaining about how long it is taking, I simply translate that in my head to the following compliment:</p>\n<blockquote><p>Wow, I can&#8217;t believe that Alex was thoughtful enough to create this elegant upgrade process. Not only does it handle my 20,000+ tweets, but it&#8217;s also fetching and filling in useful data in a way that respects the rate limit on my Twitter account.</p>\n<p>Thanks Alex!</p></blockquote>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn:1\">\nThis was changed in 3.0.1 in the hopes that it would be faster for users that are seeing slow upgrade times. Not sure that <a href=\"http://wordpress.org/support/topic/plugin-twitter-tools-upgrading-tweets-is-slowwwwwwww\">it has helped</a>.&#160;<a href=\"http://alexking.org/blog/topic/wordpress/feed#fnref:1\" rev=\"footnote\">&#8617;</a>\n</li>\n</ol>\n</div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Oct 2012 22:22:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Alex\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Alex King: Twitter Tools 3.0.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://alexking.org/?p=14780\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://alexking.org/blog/2012/10/16/twitter-tools-3-0-1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:577:\"<p>I released Twitter Tools 3.0.1 last night to address all confirmed bugs in <a href=\"http://alexking.org/blog/2012/10/11/twitter-tools-3-0\">version 3.0</a>:</p>\n<ul>\n<li>Respect timezone offset for new posts from tweets</li>\n<li>Ensure categories and tags are set properly for new posts from tweets</li>\n<li>Make enabled/disabled accounts more visually explicit</li>\n<li>Use proper URL example in help text</li>\n</ul>\n<p>Want more details? Check out <a href=\"https://github.com/crowdfavorite/wp-twitter-tools/commit/4a5068368de982c235c650c7823346a565e63d2e\">the diff</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Oct 2012 18:45:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Alex\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"Weblog Tools Collection: WordPress Theme Releases for 10/16\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12112\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/ms8Gq66bFRM/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1180:\"<p><img class=\"alignnone size-full wp-image-12113\" title=\"hauntedhouse\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/hauntedhouse.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/haunted-house\"><strong>Haunted House</strong></a> is a Halloween theme for your blog.</p>\n<p><img class=\"alignnone size-full wp-image-12114\" title=\"mystic\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/mystic.jpg\" alt=\"\" width=\"150\" height=\"112\" /></p>\n<p><a href=\"http://emptynestthemes.com/2012/10/15/5003/\"><strong>Mystic</strong></a> has a simple, moody, ethereal quality to its look using subtle transparencies and neutral metallics such as gold and silver as font colors.</p>\n<p><img class=\"alignnone size-full wp-image-12115\" title=\"uridimmu\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/uridimmu.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/uridimmu\"><strong>Uridimmu</strong></a> has several widget areas and allows per-post layouts.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/ms8Gq66bFRM\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Oct 2012 15:00:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"WordPress.tv: Wes Chyrchel: Formula For a Successful WordPress Project\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13565\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"http://wordpress.tv/2012/10/16/wes-churchill-formula-for-a-successful-wordpress-project/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:645:\"<div id=\"v-NLijOBkM-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13565/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13565/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13565&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/16/wes-churchill-formula-for-a-successful-wordpress-project/\"><img alt=\"Wes Churchill\" src=\"http://videos.videopress.com/NLijOBkM/wes-churchill_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Oct 2012 13:49:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"WordPress.tv: Andrew Spittle: WordPress as Your Publishing Hub\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13528\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wordpress.tv/2012/10/15/andrew-spittle-wordpress-as-your-publishing-hub/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:638:\"<div id=\"v-oryO3ZeE-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13528/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13528/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13528&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/15/andrew-spittle-wordpress-as-your-publishing-hub/\"><img alt=\"Andrew Spittle\" src=\"http://videos.videopress.com/oryO3ZeE/andrew-spittle_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Oct 2012 03:48:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"WordPress.tv: Aaron Campbell: Integration of WordPress With External APIs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13521\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"http://wordpress.tv/2012/10/15/aaron-campbell-integration-of-wordpress-with-external-apis/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:647:\"<div id=\"v-W6RGudiE-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13521/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13521/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13521&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/15/aaron-campbell-integration-of-wordpress-with-external-apis/\"><img alt=\"Aaron Cambell\" src=\"http://videos.videopress.com/W6RGudiE/aaron-cambell_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 15 Oct 2012 19:48:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"Weblog Tools Collection: Less Spam Since Jetpack Comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12095\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/0zri04QavxY/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1709:\"<p>A week ago, we made <a href=\"http://weblogtoolscollection.com/archives/2012/10/05/slight-under-the-hood-improvements-plus-jetpack-comments/\">a few minor changes</a> here, most notably a switch to <a href=\"http://jetpack.me/2012/06/14/jetpack-comments-now-available/\">Jetpack Comments</a>. Since then, spam has dropped dramatically. Prior to the change, we received an average of 10,000 spam comments a day. After Jetpack Comments, we have received a grand total of 429 spam comments for the entire week. So, that&#8217;s a drop from an average of 10,000 per day to an average of 61 per day, 9,939 less spam comments per day.</p>\n<p>Jetpack Comments makes use of javascript and iframes, which are both a bit too complicated for most spam bots, and that does line up with the almost complete lack of obvious bot-generated spam in our spam queue. Besides the comforting bot-breaking ability of Jetpack Comments, I have a feeling that our change from a basic form element comment form to <a href=\"http://codex.wordpress.org/Function_Reference/comment_form\">the comment_form tag</a> finally enabled our other anti-spam plugins to work properly. I honestly haven&#8217;t tested that last bit, because I really have no wish to open the flood gates again.</p>\n<p>For the record, we use <a href=\"http://akismet.com\">Akismet</a>, <a href=\"http://bad-behavior.ioerror.us\">Bad Behavior</a>, <a href=\"http://www.cloudflare.com\">CloudFlare</a>, <a href=\"http://ocaoimh.ie/cookies-for-comments/\">Cookies for Comments</a>, and now <a href=\"http://jetpack.me\">Jetpack</a> Comments to keep spam off of this site.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/0zri04QavxY\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 15 Oct 2012 14:00:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WordPress.tv: Robert Nienhuis: Planning & Prepping A Design For Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13562\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:90:\"http://wordpress.tv/2012/10/15/robert-nienhuis-planning-prepping-a-design-for-development/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:651:\"<div id=\"v-Nj5ywa4W-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13562/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13562/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13562&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/15/robert-nienhuis-planning-prepping-a-design-for-development/\"><img alt=\"Robert Nienhuis\" src=\"http://videos.videopress.com/Nj5ywa4W/robert-nienhuis_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 15 Oct 2012 13:45:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"WordPress.tv: Chris Ford: Information Architecture for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13542\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"http://wordpress.tv/2012/10/14/chris-ford-information-architecture-for-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:632:\"<div id=\"v-p8Le3BQm-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13542/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13542/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13542&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/14/chris-ford-information-architecture-for-wordpress/\"><img alt=\"Chris Ford\" src=\"http://videos.videopress.com/p8Le3BQm/chris-borg_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 14 Oct 2012 19:44:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"BuddyPress: BuddyCamp Vancouver 2012 happening now!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://buddypress.org/2012/10/buddycamp-vancouver-2012-happening-now/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://buddypress.org/2012/10/buddycamp-vancouver-2012-happening-now/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:720:\"<p>The first ever BuddyCamp is happening right now at BCIT Campus in Vancouver, BC. The whole BuddyPress core team (minus Paul) is here, along with WordPress co-founder Matt Mullenweg, and we all just participated in a panel discussion on the social web and BuddyPress&#8217;s place in it.</p>\n<p>If you weren&#8217;t able to make it out to Vancouver, don&#8217;t worry; the BuddyCamp Vancouver organizers setup a live stream. For $10 CAD, you can watch the whole event in the comfort of your own home. Check out the link below for details:</p>\n<p>http://2012.vancouver.buddypress.org/tickets/</p>\n<p>On behalf of Matt and the core team, we&#8217;re super happy to be here and hope that everyone has a fantastic day!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 14 Oct 2012 17:21:34 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"John James Jacoby\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"Weblog Tools Collection: WordPress Plugin Releases for 10/14\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12104\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/r9u9KVvVvN4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1291:\"<h3>New plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/html5-video-player-with-playlist/\"><strong>HTML5 Video Player with Playlist</strong></a> allows you to easily use the HTML5 video element to enable native video playback within the browser.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/wp-antiproxy/\"><strong>WP-antiProxy</strong></a> will fetch and auto-correct the client&#8217;s IP address in the event that he is hidden behind a proxy or load balancer.</p>\n<h3>Updated plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/automatic-updater/\"><strong>Automatic Updater</strong></a> will automatically download and install plugin, theme, and core updates as soon as they become available.</p>\n<p><a href=\"http://bad-behavior.ioerror.us/\"><strong>Bad Behavior</strong></a> complements other link spam solutions by acting as a gatekeeper, preventing spammers from ever delivering their junk, and in many cases, from ever reading your site in the first place.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/twitter-tools/\"><strong>Twitter Tools</strong></a> creates a complete integration between your WordPress blog and your Twitter account.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/r9u9KVvVvN4\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 14 Oct 2012 15:15:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"WordPress.tv: Jared Atchison: Custom Post Types and Taxonomies\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13547\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wordpress.tv/2012/10/14/jared-atchison-custom-post-types-and-taxonomies/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:638:\"<div id=\"v-F2ZLp4de-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13547/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13547/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13547&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/14/jared-atchison-custom-post-types-and-taxonomies/\"><img alt=\"Jared Atchison\" src=\"http://videos.videopress.com/F2ZLp4de/jared-atchison_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 14 Oct 2012 13:44:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"WordPress.tv: Andrew Norcross: Stay Classy, WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13525\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wordpress.tv/2012/10/13/andrew-norcross-stay-classy-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:630:\"<div id=\"v-Q51RdYex-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13525/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13525/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13525&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/13/andrew-norcross-stay-classy-wordpress/\"><img alt=\"Andrew Norcross\" src=\"http://videos.videopress.com/Q51RdYex/andrew-norcross_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 14 Oct 2012 03:43:22 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"WordPress.tv: Lance Willett: Theme Busters “R” Us\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13559\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://wordpress.tv/2012/10/13/lance-willett-theme-busters-r-us/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:621:\"<div id=\"v-XLJ1Ogbk-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13559/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13559/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13559&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/13/lance-willett-theme-busters-r-us/\"><img alt=\"lance willett\" src=\"http://videos.videopress.com/XLJ1Ogbk/lance-willett_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 19:40:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"Weblog Tools Collection: WordPress 3.5 Beta 2 Released\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12099\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/6wH8eOwOauw/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1117:\"<p><a href=\"http://wordpress.org/\">WordPress</a> 3.5 Beta 2 <a href=\"http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/\">has been released</a>. Since <a href=\"http://weblogtoolscollection.com/archives/2012/09/27/wordpress-3-5-beta-1-and-twenty-twelve-released/\">the first beta</a>, this beta has added new interfaces for image galleries and front page settings, as well as a new image editing API.</p>\n<p>As before, this is not yet meant for live sites, but please do try it on a test installation, especially if you are a plugin or theme developer. If you run into any bugs, please check the <a href=\"http://core.trac.wordpress.org/report/5\">known</a> and <a href=\"http://core.trac.wordpress.org/query?status=closed&group=component&milestone=3.5\">fixed</a> issues first, <a href=\"http://codex.wordpress.org/Reporting_Bugs\">report them</a> if they have not already been reported or fixed, and visit <a href=\"http://wordpress.org/support/forum/alphabeta\">the support forums</a> if you need any help.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/6wH8eOwOauw\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 15:15:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"WordPress.tv: Zack Tollman: Caching for Coders\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13568\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"http://wordpress.tv/2012/10/13/zack-tollman-caching-for-coders/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:618:\"<div id=\"v-duG1Wgts-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13568/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13568/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13568&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/13/zack-tollman-caching-for-coders/\"><img alt=\"Zack Tollman\" src=\"http://videos.videopress.com/duG1Wgts/zack-tollman_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 13:39:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"WordPress.tv: Brandon Dove: Premium Plugins & Adhering To The GPL\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13539\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"http://wordpress.tv/2012/10/12/brandon-dove-premium-plugins-adhering-to-the-gpl/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:635:\"<div id=\"v-gQSPc5PM-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13539/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13539/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13539&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/12/brandon-dove-premium-plugins-adhering-to-the-gpl/\"><img alt=\"Brandon Dove\" src=\"http://videos.videopress.com/gQSPc5PM/brandon-dove_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 03:38:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Dev Blog: WordPress 3.5 Beta 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2458\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1836:\"<p>Two weeks after the first beta, WordPress 3.5 Beta 2 is now available for download and testing.</p>\n<p>This is software still in development, so we don’t recommend that you run it on a production site. Set up a test site to play with the new version. To test WordPress 3.5, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"http://wordpress.org/wordpress-3.5-beta2.zip\">download the beta here</a> (zip).</p>\n<p>For more, <a title=\"WordPress 3.5 Beta 1\" href=\"http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/\"><strong>check out the extensive Beta 1 blog post</strong></a>, which covers what&#8217;s new in version 3.5 and how you can help. What&#8217;s new since beta 1? I&#8217;m glad you asked:</p>\n<ul>\n<li>New workflow for working with image galleries, including drag-and-drop reordering and quick caption editing.</li>\n<li>New user interface for setting static front pages for the Reading Settings screen. (<a title=\"Ticket 16379\" href=\"http://core.trac.wordpress.org/ticket/16379\">#16379</a>)</li>\n<li>New image editing API. (<a title=\"Ticket 6821\" href=\"http://core.trac.wordpress.org/ticket/6821\">#6821</a>)</li>\n</ul>\n<p>As always, if you think you’ve found a bug, you can post to the <a href=\"http://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a reproducible bug report, <a href=\"http://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"http://core.trac.wordpress.org/report/5\">a list of known bugs</a> and <a href=\"http://core.trac.wordpress.org/query?status=closed&group=component&milestone=3.5\">everything we’ve fixed</a> so far. Happy testing!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 00:02:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:20;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Alex King: Twitter Tools 3.0 FAQ\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://alexking.org/?p=14746\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://alexking.org/blog/2012/10/12/twitter-tools-3-0-faq\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:6587:\"<p>Wherein I attempt to answer some of the more common questions I&#8217;ve seen surrounding yesterday&#8217;s launch of <a href=\"http://alexking.org/blog/2012/10/11/twitter-tools-3-0\">Twitter Tools 3.0</a>.</p>\n<p><strong>Why am I <em>forced</em> to use the Social plugin to use Twitter Tools?</strong></p>\n<p>I assure you, no one is forcing you to do anything.</p>\n<p><strong>Why is Twitter Tools now dependent on Social?</strong></p>\n<p>When Twitter moved to OAuth it caused the user experience for installing Twitter Tools to take a <a href=\"http://alexking.org/blog/2010/08/15/twitter-tools-2-4\">huge nose dive</a>. Social solves the problem of how to connect a Twitter account in a more user-friendly way (standard OAuth flow to the &#8220;app&#8221; that MailChimp hosts for us).</p>\n<p>One of the main tenets of Open Source is &#8220;don&#8217;t solve problems that have already been solved&#8221;. So Twitter Tools integrates with Social to leverage this feature.</p>\n<p><strong>Why doesn&#8217;t Twitter Tools do broadcasting anymore?</strong></p>\n<p>See above &#8211; Social includes really nice broadcasting features so Twitter Tools doesn&#8217;t need to replicate that functionality.</p>\n<p><strong>But I don&#8217;t want to use [Feature X] of Social!</strong></p>\n<p>Turn it off! You can disable (individually) the following Social features from the settings screen:</p>\n<ul>\n<li>comment display (includes logging in with Twitter/Facebook to comment)</li>\n<li>checking for reactions on Twitter/Facebook</li>\n<li>broadcasting</li>\n<li>etc.</li>\n</ul>\n<p><strong>Do you know that X bug exists in Social?</strong></p>\n<p>A number of bugs have recently been fixed in Social for an upcoming 2.6 release. We haven&#8217;t got everything wrapped up, but this does address &#8220;auto-broadcasting&#8221; for XML-RPC posts and posts by email, <a href=\"https://github.com/crowdfavorite/wp-social/issues?milestone=3&page=1&state=closed\">among other changes</a>.</p>\n<p>Grab <a href=\"https://github.com/crowdfavorite/wp-social/zipball/2.6rc2\">version 2.6rc2</a> if you want to try it out.</p>\n<p><strong>Why release Twitter Tools before Social 2.6 is ready?</strong></p>\n<p>Yesterday Twitter <a href=\"https://dev.twitter.com/discussions/10803\">shut off the old API endpoints</a> that the previous version of Twitter Tools was using. Since the new version was ready to go, it seemed like a better idea to release it and follow up with Social shortly thereafter than leaving Twitter Tools in a completely broken state.</p>\n<p><strong>Are Twitter Tools and Social compatible with the current Twitter API?</strong></p>\n<p>Yes.</p>\n<p><strong>What about the upcoming Twitter 1.1 API changes?</strong></p>\n<p>Twitter Tools is ready as of version 3.0, Social will be ready with the 2.6 release. Adding in those changes is what has delayed the new version of Social.</p>\n<p><strong>How do I integrate a shorturl service?</strong></p>\n<p>Social&#8217;s broadcasting feature uses the standard WordPress short URL API; so any URL shortening plugin can be used. This is outlined in the <a href=\"http://wordpress.org/extend/plugins/social/faq/\">Social documentation</a>.</p>\n<p><strong>What happened to the digest feature?</strong></p>\n<p>It never worked right and wasn&#8217;t something I used, so it&#8217;s cut. There are <a href=\"http://wordpress.org/extend/plugins/twitter-digest/\">alternatives</a> out there, or someone could pretty easily use the underlying data and features of Twitter Tools to script this up as a separate plugin. Everyone is better off if someone who cares about the feature is the one maintaining it.</p>\n<p><strong>You talk about new features in Twitter Tools but all I see is things taken away &#8211; what gives?</strong></p>\n<p>Twitter Tools 3.0 has a ton of new (and often requested) features:</p>\n<ul>\n<li>ability to connect multiple accounts</li>\n<li>ability to edit/delete tweets</li>\n<li>clean architecture using custom post types and taxonomies</li>\n<li>ability to browse tweets on your own site</li>\n<li>compatible with current API (and proposed 1.1 changes)</li>\n<li>ability to send different broadcasts to each account (or multiple different broadcasts to a single account) &#8211; via Social</li>\n<li>freedom to create whatever broadcast format you like (remove the required &#8220;New Blog Post:&#8221; prefix)</li>\n</ul>\n<p><strong>Why do tweets need upgrading?</strong></p>\n<p>Since the data is being stored differently (to match current WordPress best practices), the old data needs to be converted to the new format.</p>\n<p><strong>Why aren&#8217;t my new tweets coming in?</strong></p>\n<p>Make sure you&#8217;ve enabled Twitter Tools for the accounts you want it active for on the Settings page. This is required because of the new feature to support multiple accounts.</p>\n<p><strong>Why didn&#8217;t you test this before you released it?</strong></p>\n<p>It&#8217;s been working great on my site (and a few friends&#8217; sites) for months now. I released <a href=\"http://alexking.org/thread/twitter-tools\">two betas and a release candidate</a> for testing.</p>\n<p><strong>Something is broken for me, how do I get help?</strong></p>\n<p>First let&#8217;s be clear that Twitter Tools is non-commercial GPL software provided with no support whatsoever. From the license:</p>\n<blockquote><p>\n  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n</p></blockquote>\n<p>I created it because it is something I wanted, and I polished it up and released it because I thought others might want to use it. My feelings <em>will not be hurt</em> if it doesn&#8217;t work for you, for whatever reason.</p>\n<p>That said, I certainly want to fix bugs, so if you think you&#8217;ve found a problem here are two ways to get me to look at it:</p>\n<ol>\n<li>Fix it create a pull request on <a href=\"https://github.com/crowdfavorite/wp-twitter-tools\">GitHub</a>.</li>\n<li>Send a description of the problem including observed behavior, expected behavior, information about your server and WordPress environment and detailed steps to reproduce.</li>\n</ol>\n<p><strong>I relied on [feature X] that doesn&#8217;t appear to be part of Twitter Tools 3.0 or Social, what do I do?</strong></p>\n<p>Write some code or find an alternative! Or, y&#8217;know, whine about it on Twitter&#8230; <img src=\"http://alexking.org/wp/wp-includes/images/smilies/icon_wink.gif\" alt=\";)\" class=\"wp-smiley\" /> </p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Oct 2012 21:59:44 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Alex\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:21;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress.tv: Brad Williams: WordPress Multisite\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13535\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wordpress.tv/2012/10/12/brad-williams-wordpress-multisite/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:622:\"<div id=\"v-GwvhBj6t-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13535/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13535/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13535&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/12/brad-williams-wordpress-multisite/\"><img alt=\"Brad Williams\" src=\"http://videos.videopress.com/GwvhBj6t/brad-williams_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Oct 2012 19:38:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"wordcampsandiego\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:22;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"Weblog Tools Collection: WordPress Theme Releases for 10/12\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12090\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/IMmfUCpNMEk/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:894:\"<p><img class=\"alignnone size-full wp-image-12091\" title=\"cascade\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/cascade.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://devpress.com/themes/cascade/\"><strong>Cascade</strong></a> is an all-purpose, responsive (mobile friendly) theme with 12 optional layouts, per post layouts, multiple drop down menus, 12 widget areas, support for all 10 post formats, and mobile compatible menus.</p>\n<p><img class=\"alignnone size-full wp-image-12092\" title=\"gommero\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/gommero.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/gommero\"><strong>Gommero</strong></a> is simple, elegant, and easily customizable.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/IMmfUCpNMEk\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Oct 2012 14:30:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:23;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"WordPress.tv: Fabianne Balvedi: Estudo de Caso do Site da Bicicletada de Curitiba\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13840\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://wordpress.tv/2012/10/12/fabianne-balvedi-estudo-de-caso-do-site-da-bicicletada-de-curitiba/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:739:\"<div id=\"v-AhPWwn6E-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13840/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13840/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13840&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/12/fabianne-balvedi-estudo-de-caso-do-site-da-bicicletada-de-curitiba/\"><img alt=\"wordcamp_013_2012_estudo_caso_site_bicicletada_curitiba\" src=\"http://videos.videopress.com/AhPWwn6E/wordcamp_013_2012_estudo_caso_site_bicicletada_curitiba_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Oct 2012 13:04:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Vinicius Massuchetto\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:24;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:80:\"WordPress.tv: Daniel Kossmann: Ferramentas Livres Para Desenvolvimento WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13835\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wordpress.tv/2012/10/11/daniel-kossmann-ferramentas-livres-para-desenvolvimento-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:753:\"<div id=\"v-kywEoJCt-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13835/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13835/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13835&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/11/daniel-kossmann-ferramentas-livres-para-desenvolvimento-wordpress/\"><img alt=\"wordcamp_012_2012_ferramentas_livres_desenvolvimento_wordpress\" src=\"http://videos.videopress.com/kywEoJCt/wordcamp_012_2012_ferramentas_livres_desenvolvimento_wordpress1_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 12 Oct 2012 01:03:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Vinicius Massuchetto\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:25;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"Alex King: Twitter Tools 3.0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://alexking.org/?p=14672\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://alexking.org/blog/2012/10/11/twitter-tools-3-0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2922:\"<p>When I first started posting to Twitter I soon realized that I wanted to keep a copy of that content. Twitter Tools was born <a href=\"http://alexking.org/blog/2007/03/06/twitter-archiver-behavior\">shortly thereafter</a>. Since that time Twitter has evolved, WordPress has evolved, and my vision of how best to integrate the two has evolved with them. Twitter Tools 3.0 is a complete rewrite which realizes that vision in a way I&#8217;m quite pleased with.</p>\n<ul>\n<li>Supports multiple Twitter accounts.</li>\n<li>Broadcast different &#8220;new post&#8221; messages to different Twitter accounts (via Social).</li>\n<li>Set-up and configuration is painless (no registering a developer app, copying keys, etc.) via integration with <a href=\"http://wordpress.org/extend/plugins/social/\">Social</a>.</li>\n<li>Tweets are stored as a custom post type and with custom taxonomies for accounts, @mentions and #hashtags.</li>\n<li>Local copies of tweets can be easily edited and deleted via the standard WordPress admin screens.</li>\n<li>Tweets can be displayed on your site via archive view, individual tweet view and via shortcodes and sidebar widget.</li>\n<li>Full Twitter data is stored with each tweet.</li>\n<li>An image included in the &#8220;media&#8221; data of a tweet is downloaded and saved as the featured image for the tweet.</li>\n<li>Create blog posts (as status updates) from each tweet (optional).</li>\n<li>Compatible with the latest Twitter API changes (as of today&#8217;s writing).</li>\n</ul>\n<p>The previous versions of Twitter Tools used an additional database table to store your tweets. These are upgraded to the new format (and more data about each is downloaded from Twitter) as part of the upgrade process. If appropriate, you&#8217;ll be prompted to upgrade on the Settings screen.</p>\n<p>I&#8217;ve been working on this release of Twitter Tools for <em>way</em> too long. The first beta was pushed out back in <a href=\"http://alexking.org/blog/2011/12/14/twitter-tools-3-0-beta-1\">December of last year</a> and it&#8217;s been making glacial progress since then. The good news is, I&#8217;ve been running it on my site for nearly a year now and I&#8217;m quite confident it&#8217;s stable and functions as expected &#8211; at least in my usage and environment.</p>\n<p>Want to see it in action? Browse my tweets <a href=\"http://alexking.org/tweets\">here</a> (check out examples by <a href=\"http://alexking.org/tweet-mentions/sogrady\">@mention</a> and <a href=\"http://alexking.org/tweet-hashtags/wordpress\">#hashtag</a>).</p>\n<p>Download it from <a href=\"http://wordpress.org/extend/plugins/twitter-tools/\">WordPress.org</a> (where you can see screenshots, etc.), contribute on <a href=\"https://github.com/crowdfavorite/wp-twitter-tools\">GitHub</a>, and use it in good health!</p>\n<p>UPDATE: check out the <a href=\"http://alexking.org/blog/2012/10/12/twitter-tools-3-0-faq\">FAQ</a> for more details.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Oct 2012 20:13:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Alex\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:26;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"WordPress.tv: João Paulo Mehl: ÀgoraDelibera – Experiências de Democracia Digital\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13825\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://wordpress.tv/2012/10/11/joao-paulo-mehl-agoradelibera-experiencias-de-democracia-digital-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:775:\"<div id=\"v-ip3ATRVM-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13825/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13825/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13825&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/11/joao-paulo-mehl-agoradelibera-experiencias-de-democracia-digital-2/\"><img alt=\"2012_011_wordcamp_curitiba_agora_delibera_experiencias_democraica_digital\" src=\"http://videos.videopress.com/ip3ATRVM/2012_011_wordcamp_curitiba_agora_delibera_experiencias_democraica_digital_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Oct 2012 19:01:56 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Vinicius Massuchetto\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:27;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"WordPress.tv: Felipe Coelho Kussik: WordPress Total\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13783\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wordpress.tv/2012/10/11/felipe-coelho-kussik-wordpress-total/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:647:\"<div id=\"v-qIRAW1qt-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13783/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13783/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13783&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/11/felipe-coelho-kussik-wordpress-total/\"><img alt=\"2012_010_wordpress_total\" src=\"http://videos.videopress.com/qIRAW1qt/2012_010_wordpress_total_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Oct 2012 13:01:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Vinicius Massuchetto\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:28;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"WordPress.tv: Frank Alcantara: Odeio Pinguim – Uma Relação de Amor e Ódio com o Google\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13744\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:101:\"http://wordpress.tv/2012/10/10/frank-alcantara-odeio-pinguim-uma-relacao-de-amor-e-odio-com-o-google/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:792:\"<div id=\"v-WEcIydBv-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13744/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13744/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13744&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/10/frank-alcantara-odeio-pinguim-uma-relacao-de-amor-e-odio-com-o-google/\"><img alt=\"2012_009_wordcamp_curitiba_odeio_penguim_uma_relacao_de_amor_e_odio_com_o_google\" src=\"http://videos.videopress.com/WEcIydBv/2012_009_wordcamp_curitiba_odeio_penguim_uma_relacao_de_amor_e_odio_com_o_google_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 11 Oct 2012 01:00:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Vinicius Massuchetto\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:29;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"Weblog Tools Collection: WordPress Plugin Releases for 10/10\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12086\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/W3GiFJPnpzo/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1372:\"<h3>New plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/follow-subscribe/\"><strong>Follow and Subscribe</strong></a> is a siderbar widget that shows links to a variety of social networks.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/mobile-css/\"><strong>Mobile CSS</strong></a> allows you to define different CSS styles that get loaded for specific mobile devices.</p>\n<p><a href=\"http://ocaoimh.ie/tweet-tweet/\"><strong>Tweet Tweet</strong></a> polls Twitter and archives your tweets and the tweets of those you follow so those insightful conversations you have at 1am are never lost.</p>\n<h3>Updated plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/automatic-post-tagger/\"><strong>Automatic Post Tagger</strong></a> automatically adds user-specified tags to posts.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/pushover-notifications/\"><strong>Pushover Notifications</strong></a> allows your WordPress blog to send push notifications for events happening on your blog straight to your iOS/Android device.</p>\n<p><a href=\"http://yoast.com/wordpress/seo/\"><strong>WordPress SEO</strong></a> is an all in one solution to search engine optimize your WordPress blog: SEO titles, meta descriptions, XML sitemaps and much more.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/W3GiFJPnpzo\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Oct 2012 15:00:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:30;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Gravatar: Default Image Changes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"http://blog.gravatar.com/?p=409\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://blog.gravatar.com/2012/10/09/default-image-changes/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:2065:\"<p>Last week we made some changes to how default images, sometimes called &#8220;fallback images&#8221;, are handled in Gravatar URLs. The purpose of these changes was to enhance the security of the Gravatar API and protect the many of millions of users who view billions of Gravatars every day. The majority of you will not notice any change &#8211; which is good!  If you&#8217;re a developer though, you should keep these recent updates in mind.</p>\n<p>You can read all about how default images work on the <a href=\"http://gravatar.com/site/implement/images/\">implementation page</a>, but the short version is:</p>\n<blockquote><p>Default images must be publicly accessible via a simple HTTP or HTTPS request on the standard ports of 80 and 443, respectively.  They must have a valid image file extension of <code>jpg</code>, <code>jpeg</code>, <code>png</code>, or <code>gif</code>.</p></blockquote>\n<p>If your default image is not publicly accessible, doesn&#8217;t have a file extension, is not actually an image, requires HTTP Authentication, or is otherwise unavailable to a normal web request, it cannot be used as the fallback/default image for a Gravatar. On the backend, we are now processing default images through a new service we have been working on called Photon, which we will talk more about soon.</p>\n<p>We&#8217;ve also introduced a new default image which you can use, called &#8216;blank&#8217;. Just use <code>?d=blank</code> and you&#8217;ll get a transparent PNG image in whatever size you asked for if the requested Gravatar doesn&#8217;t exist. More details on this are on the <a href=\"http://gravatar.com/site/implement/images/\">image implementation page</a> as well.</p>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/gravatar.wordpress.com/409/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/gravatar.wordpress.com/409/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=blog.gravatar.com&blog=1886259&post=409&subd=gravatar&ref=&feed=1\" width=\"1\" height=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Oct 2012 01:30:42 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Barry\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:31;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Matt: Pandora and Artist Payments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"http://ma.tt/?p=41960\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://ma.tt/2012/10/pandora-and-artist-payments/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:277:\"<p><a href=\"http://blog.pandora.com/pandora/archives/2012/10/pandora-and-art.html\">Pandora and Artist Payments</a>, about how Pandora is paying out millions of dollars to artists but is only 6.5% of the US radio listening audience, the fees the rest pay are far, far lower.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Oct 2012 22:55:07 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:32;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Alex King: WordCamp Denver This Weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://alexking.org/?p=14630\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://alexking.org/blog/2012/10/09/wordcamp-denver-this-weekend\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1360:\"<p><img src=\"http://alexking.org/wp-content/uploads/2012/10/wordcamp-denver-2012-510x220.jpg\" alt=\"WordCamp Denver\" width=\"480\" height=\"207\" class=\"alignnone size-medium-img wp-image-14634\" /></p>\n<p>If you haven&#8217;t already gotten your tickets for <a href=\"http://2012.denver.wordcamp.org/\">WordCamp Denver</a>, there are still a few left. <a href=\"http://2012.denver.wordcamp.org/tickets/\">Go grab one now</a> then come back and read the rest of this &#8211; it&#8217;s only $20 and you get a t-shirt!</p>\n<p>I&#8217;m looking forward to giving my presentation: <em>Core Competency: Things You Might Not Know about How WordPress Works (but should)</em>. I&#8217;ve got a few new additions to it based on things I learned from some recent development work.</p>\n<p>If you&#8217;re planning to attend WordCamp Denver (or any other WordCamp), consider taking a moment to read <a href=\"http://alexking.org/blog/2010/07/06/how-to-get-the-most-from-wordcamp\">Getting the Most From WordCamp</a>. I wrote it a couple years back just before WordCamp Boulder 2010, but it&#8217;s still quite relevant.</p>\n<p>Big thanks to <a href=\"http://alternate.org/\">Kevin</a> for taking the reins and organizing this year&#8217;s WordCamp. Putting on a community conference is a lot of work (I say, having helped coordinate WordCamp Denver 2009 and WordCamp Boulder 2010).</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 09 Oct 2012 20:21:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Alex\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:33;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"Weblog Tools Collection: WordPress Theme Releases for 10/8\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12080\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/RZKd-UPg8xk/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1297:\"<p><img class=\"alignnone size-full wp-image-12081\" title=\"minimalize\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/minimalize.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/minimalizine\"><strong>Minimalizine</strong></a> is a simple and responsive theme.</p>\n<p><img class=\"alignnone size-full wp-image-12082\" title=\"reflection\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/reflection.jpg\" alt=\"\" width=\"150\" height=\"112\" /></p>\n<p><a href=\"http://emptynestthemes.com/2012/10/07/reflection-wordpress-website-theme/\"><strong>Reflection</strong></a> is an attractive, clean, professional, and neutral theme.</p>\n<p><img class=\"alignnone size-full wp-image-12083\" title=\"somethingfishy\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/somethingfishy.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://carolinethemes.com/2012/10/06/something-fishy/\"><strong>Something Fishy</strong></a> is an illustrated landscape theme with parallax scrolling effects, a responsive, mobile-friendly layout, featured images, multiple widget areas, custom menu support, and a whole lotta cute.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/RZKd-UPg8xk\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 08 Oct 2012 14:30:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:34;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"WordPress.tv: Vid Luther: Why Your WordPress Site is Slow, and How to Fix It\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13668\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://wordpress.tv/2012/10/06/vid-luther-why-your-wordpress-site-is-slow-and-how-to-fix-it/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:687:\"<div id=\"v-BsrmXODz-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13668/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13668/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13668&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/06/vid-luther-why-your-wordpress-site-is-slow-and-how-to-fix-it/\"><img alt=\"VidLuther-SD 24 No Gamma Correction 800kbits.mov\" src=\"http://videos.videopress.com/BsrmXODz/video-8dc3f75f8f_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 07 Oct 2012 03:56:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:35;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"WordPress.tv: Brad Parbs: Responsive Design Primer\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13619\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wordpress.tv/2012/10/06/brad-parbs-responsive-design-primer/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:662:\"<div id=\"v-JB7jLEG5-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13619/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13619/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13619&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/06/brad-parbs-responsive-design-primer/\"><img alt=\"BradParbs-SD 24 No Gamma Correction 800kbits.mov\" src=\"http://videos.videopress.com/JB7jLEG5/video-d2640d2dcc_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Oct 2012 19:54:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:36;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"Matt: Bitcoin and decentralization\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"https://ma.tt/?p=41956\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://ma.tt/2012/10/bitcoin-and-decentralization/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:134:\"<p><a href=\"http://paulbohm.com/articles/bitcoins-value-is-decentralization/\">The value of Bitcoin is in its decentralization</a>.</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Oct 2012 19:53:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Matt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:37;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"Weblog Tools Collection: WordPress Plugin Releases for 10/6\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12072\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/7l2qhumvSyY/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1616:\"<h3>New plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/custom-javascript-editor/\"><strong>Custom Javascript Editor</strong></a> allows you to add custom Javascript to your site from an editor in the WordPress admin.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/twitter2posts/\"><strong>Twitter2Posts</strong></a> imports tweets from your Twitter account as posts within a special category.</p>\n<p><a href=\"http://wordpress.org/extend/plugins/wpsocialstats/\"><strong>WP Social Stats</strong></a> is a powerful social analytics tool that tracks the performance of your blog posts and pages at Facebook, Twitter, Google+, Pinterest, and Stumbleupon.</p>\n<h3>Updated plugins</h3>\n<p><a href=\"http://wordpress.org/extend/plugins/camptix/\"><strong>CampTix Event Ticketing</strong></a> is an easy to use and flexible event ticketing plugin.</p>\n<p><a href=\"http://jetpack.me/\"><strong>Jetpack</strong></a> allows you to supercharge your WordPress site with powerful features previously only available to WordPress.com users.</p>\n<p><a href=\"http://developer.tinypass.com/main/wordpress\"><strong>Tinypass</strong></a> is a simple, powerful plugin that allows any online publisher to easily sell access to any type of content, whether it&#8217;s a blog post, a site subscription, a digital download, or even a pay-per-view video.</p>\n<p><a href=\"http://ocaoimh.ie/wp-super-cache/\"><strong>WP Super Cache</strong></a> is a very fast caching engine for WordPress that produces static html files.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/7l2qhumvSyY\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Oct 2012 15:00:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:38;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"WordPress.tv: Kate Carruthers: Your Blog, Your Brand\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13608\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wordpress.tv/2012/10/06/kate-carruthers-your-blog-your-brand/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:634:\"<div id=\"v-FzlG0LIz-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13608/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13608/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13608&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/06/kate-carruthers-your-blog-your-brand/\"><img alt=\"Kate-Caruthers-.mov\" src=\"http://videos.videopress.com/FzlG0LIz/video-133e07d4c7_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Oct 2012 13:53:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:39;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"WordPress.tv: Kimanzi T Constable: The Power of Your Story Through WordPress and Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13585\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:110:\"http://wordpress.tv/2012/10/05/kimanzi-t-constable-the-power-of-your-story-through-wordpress-and-social-media/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:691:\"<div id=\"v-ZuNVTuyy-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13585/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13585/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13585&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/05/kimanzi-t-constable-the-power-of-your-story-through-wordpress-and-social-media/\"><img alt=\"Kimanzi-Constable-PowerofStory.mov\" src=\"http://videos.videopress.com/ZuNVTuyy/video-6a05848379_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 06 Oct 2012 03:51:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:40;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"WordPress.tv: Anthony Hortin: Getting to Grips with Firebug\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13589\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"http://wordpress.tv/2012/10/05/anthony-hortin-getting-to-grips-with-firebug/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:649:\"<div id=\"v-9UnEQj4N-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13589/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13589/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13589&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/05/anthony-hortin-getting-to-grips-with-firebug/\"><img alt=\"Anthony-Hortin-Firebug.mov\" src=\"http://videos.videopress.com/9UnEQj4N/video-4fe0c3d85c_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Oct 2012 19:50:20 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:41;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:81:\"Weblog Tools Collection: Slight Under-the-Hood Improvements plus Jetpack Comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12059\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/wvp3yBJVAjI/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:3438:\"<p>You may not notice offhand, but we made some rather significant under-the-hood changes over the weekend. Despite often drooling like fan boys over the latest and greatest <a href=\"http://wordpress.org\">WordPress</a> features, much of this theme has been hard-coded. For those of you who aren&#8217;t familiar with what &#8220;hard-coded&#8221; is, it means that the sidebar was just HTML in the theme&#8217;s sidebar template, not <a href=\"https://codex.wordpress.org/WordPress_Widgets\">widgets</a>, and the navigation menu was just HTML in the theme&#8217;s header template, not a <a href=\"http://codex.wordpress.org/Appearance_Menus_SubPanel\">custom menu</a>. Why did we do this? Because it was easy, fast, and we didn&#8217;t need to change anything.</p>\n<p>Well, as WordPress continues to mature, more features are implemented as widgets. As we began desiring some of these, it became clear that the sidebar needed to be widgetized, and the existing modules (or non-widgets) needed to be switched over to widgets. Are you stuck with a theme that isn&#8217;t widgetized? If so, don&#8217;t worry, it&#8217;s really easy to <a href=\"http://codex.wordpress.org/Widgetizing_Themes\">widgetize your theme</a>, and most existing HTML modules can simple be added as a text widget.</p>\n<p>As for custom menus, we&#8217;re starting to see new features that rely on established menus. For example, <a href=\"http://jetpack.me/2012/09/27/jetpack-1-8-mobile-theme/\">Jetpack&#8217;s new mobile theme</a> uses your primary custom menu. Since we just switched to that mobile theme, it was time to do away with the hard-coded menu too. <a href=\"http://codex.wordpress.org/Navigation_Menus\">Adding custom menus</a> to your theme is a bit more complicated, but we&#8217;ll get to that later.</p>\n<p>The last bit of the customization, and probably the most noticeable, was adding support for <a href=\"http://jetpack.me/2012/06/14/jetpack-comments-now-available/\">Jetpack Comments</a>. I know, Jetpack Comments is supposed to work out of the box, but I think this theme is a bit older than they intended. If you activate Jetpack Comments and don&#8217;t see any change, check your theme&#8217;s comments template, and replace the old-fashioned comments form elements with <a href=\"http://codex.wordpress.org/Function_Reference/comment_form\">the super-handy comment_form tag</a>.</p>\n<p>So, what&#8217;s the best way to do all the above? Well, I don&#8217;t proclaim to be an expert, which is why I always consult the work that has already been done by experts, like the two most recent default themes, <a href=\"http://wordpress.org/extend/themes/twentyeleven\">Twenty Eleven</a> and <a href=\"http://wordpress.org/extend/themes/twentytwelve\">Twenty Twelve</a>. In my humble opinion, the best way to tackle upgrades like this (and really the best way to learn almost anything) is to directly compare your theme&#8217;s template to a more modern theme&#8217;s template. Once you isolate the area to change, the differences should be readily apparent, and the reason for the change becomes obvious (maybe after a bit of extra Googling). Beyond that, it&#8217;s just a few extra minutes of trial and error as you basically copy and paste the good code and make it work with your overall design. It&#8217;s fun, and you learn a lot while doing it.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/wvp3yBJVAjI\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Oct 2012 14:30:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:42;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"WordPress.tv: Tracey Kemp: Demystifying Custom Post Types and Taxonomies\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13623\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:89:\"http://wordpress.tv/2012/10/05/tracey-kemp-demystifying-custom-post-types-and-taxonomies/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:651:\"<div id=\"v-rcI9igAd-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13623/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13623/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13623&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/05/tracey-kemp-demystifying-custom-post-types-and-taxonomies/\"><img alt=\"Tracey-Kemp.mov\" src=\"http://videos.videopress.com/rcI9igAd/video-cb1009c69b_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Oct 2012 13:49:13 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:43;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"WordPress.tv: Becky Davis: Freelance WordPress Lessons Learned\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13625\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:79:\"http://wordpress.tv/2012/10/04/becky-davis-freelance-wordpress-lessons-learned/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:675:\"<div id=\"v-R5PnRJ0H-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13625/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13625/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13625&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/04/becky-davis-freelance-wordpress-lessons-learned/\"><img alt=\"BeckyDavis-SD 24 No Gamma Correction 800kbits.mov\" src=\"http://videos.videopress.com/R5PnRJ0H/video-cabf5e4a06_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 05 Oct 2012 03:48:11 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:44;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"WordPress.tv: Jeff Waugh: TurboPress: The High Performance Guide to WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13751\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"http://wordpress.tv/2012/10/04/jeff-waugh-turbopress-the-high-performance-guide-to-wordpress/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:654:\"<div id=\"v-U9dgBrZg-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13751/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13751/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13751&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/04/jeff-waugh-turbopress-the-high-performance-guide-to-wordpress/\"><img alt=\"Jeff-Waugh.mov\" src=\"http://videos.videopress.com/U9dgBrZg/video-f31ddef4bc_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 21:47:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:45;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Donncha: WP Super Cache 1.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"http://ocaoimh.ie/?p=89497891\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"http://ocaoimh.ie/2012/10/04/wp-super-cache-1-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:4299:\"<p><strong>UPDATE!</strong> I have just updated the plugin version number to 1.2. Thanks to everyone who tested it!</p>\n<p>A new version of <a href=\"http://ocaoimh.ie/wp-super-cache/\">WP Super Cache</a> is <strike>almost</strike> out and here are the changes in this full page caching plugin for WordPress.</p>\n<p><strike>OH! Hang on. Almost out? Yeah. I&#8217;m going to release it tomorrow but I would love a couple of hardy folks to try it first. People on the forums have been using <a href=\"http://ocaoimh.ie/y/2o\">the development version</a> for several weeks without incident but I would really appreciate it if a few more tried it before the general public gets it. You know what to do, I don&#8217;t need to explain. Here&#8217;s <a href=\"http://downloads.wordpress.org/plugin/wp-super-cache.zip\">wp-super-cache.zip</a>. This is the version running on this very site right now and it&#8217;s very stable. Go at it! I&#8217;ll update this post in the morning, UTC. Thanks.</strike></p>\n<p>So, those changes eh?</p>\n<ul>\n<li>Garbage collection of old cache files is significantly improved. I added a scheduled job that keeps an eye on things and restarts the job if necessary. Also, if you enable caching from the Easy page garbage collection will be enabled too.</li>\n<li> Editors can delete single cached files from the admin bar now. (<a href=\"http://wordpress.org/support/topic/plugin-wp-super-cache-allow-editor-role-to-delete-cache?replies=8\">thread</a>)</li>\n<li> Fixed the cached page counter on the settings page (<a href=\"http://wordpress.org/support/topic/plugin-wp-super-cache-confusing-information-in-cached-pages-since?replies=2\">thread</a>)</li>\n<li> Some sites that updated to 1.0 experienced too much garbage collection. There are still stragglers out there who haven&#8217;t upgraded but that&#8217;s fixed now! (<a href=\"http://wordpress.org/support/topic/wp-super-cache-causes-high-doing_wp_cron-load?replies=3\">thread</a>)</li>\n<li> Supercached mobile files are now used as there was a tiny little typo that needed fixing. (<a href=\"http://wordpress.org/support/topic/plugin-wp-super-cache-why-_mobile-instead-of-mobile-after-wp_cache_check_mobile-action?replies=2\">thread</a>)</li>\n<li> If your site is in a directory and you saw problems updating a page then that should be fixed now. (<a href=\"http://wordpress.org/support/topic/plugin-wp-super-cache-wordpress-in-directory-and-cache-on-post-edit-not-removed?replies=3\">thread</a>)</li>\n<li> The deactivate hook has been changed so your configuration isn&#8217;t hosed when you upgrade. Unfortunately this will only happen <em>after</em> you do this upgrade.</li>\n<li> Some sites use custom cookies with the LOGGED_IN_COOKIE constant. Added support for that.</li>\n<li> Added support for WPTouch Pro, but it appears to be flaky still. Anyone have time to work on that? I don&#8217;t.</li>\n<li> Some sites had problems with scheduled posts. For some reason the plugin thought the post was in draft mode and then because it only checked the same post once, when the post magically became published the cache wasn&#8217;t cleared. That&#8217;s fixed, thanks to the debug logging of several patient users.</li>\n<li> And more bug fixes and translation updates.</li>\n</ul>\n<p>If you have problems the first place to look should be <a href=\"http://wordpress.org/support/plugin/wp-super-cache\">the forums</a> (or try <a href=\"http://wordpress.org/tags/wp-super-cache\">here</a> too where things lived for a <em>long</em> time). Chances are someone else had the same issue before you and maybe they fixed it.</p>\n <img src=\"http://ocaoimh.ie/wp-content/plugins/wordpress-feed-statistics/feed-statistics.php?view=1&post_id=89497891\" width=\"1\" height=\"1\" />\n<p><strong>Related Posts</strong><ul><li> <a href=\"http://ocaoimh.ie/2008/10/24/wp-super-cache-084-the-garbage-collector/\" rel=\"bookmark\" title=\"Permanent Link: WP Super Cache 0.8.4, the garbage collector\">WP Super Cache 0.8.4, the garbage collector</a></li><li> <a href=\"http://ocaoimh.ie/2009/01/09/wp-super-cache-087/\" rel=\"bookmark\" title=\"Permanent Link: WP Super Cache 0.8.7\">WP Super Cache 0.8.7</a></li><li> <a href=\"http://ocaoimh.ie/2010/02/08/wp-super-cache-099/\" rel=\"bookmark\" title=\"Permanent Link: WP Super Cache 0.9.9\">WP Super Cache 0.9.9</a></li></ul></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 21:15:05 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Donncha O Caoimh\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:46;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"Dougal Campbell: The easiest way to share localhost over the web – Showoff\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"http://dougal.gunters.org/?p=71875\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://dougal.gunters.org/blog/2012/10/04/the-easiest-way-to-share-localhost-over-the-web-showoff/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1135:\"<p><i>This could come in handy: showoff.io is a service that creates a temporary or permanent public URL alias which will tunnel to your localhost.You can map to a general port or a particular vhost. You can even use a DNS CNAME forwarded to a permanent share.io URL, giving you a static name which always points to your machine, even if you switch networks. There are specific instructions for using it with a local WordPress install, working around WP&#8217;s canonical URL redirection. Oh, and it works through any firewall that allows outgoing ssh (port 22) connections. I could see this being useful for very quickly setting up/tearing down temporary demos for web development clients.</i></p>\n<p><a href=\"https://showoff.io/\">The easiest way to share localhost over the web &#8211; Showoff</a></p>\n<p>Original Article: <a href=\"http://dougal.gunters.org/blog/2012/10/04/the-easiest-way-to-share-localhost-over-the-web-showoff/\">The easiest way to share localhost over the web &#8211; Showoff</a>\n<a href=\"http://dougal.gunters.org\">Dougal Campbell&#039;s geek ramblings - WordPress, web development, and world domination.</a></p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 19:55:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"Dougal\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:47;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"WordPress.tv: Helen Hou-Sandi: How to Sneak Your Way into Being be A Rockstar WordPress Developer When Everyone Thinks You’re…\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13621\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:141:\"http://wordpress.tv/2012/10/04/helen-hou-sandi-how-to-sneak-your-way-into-being-be-a-rockstar-wordpress-developer-when-everyone-thinks-youre/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:740:\"<div id=\"v-tnvPcNda-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13621/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13621/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13621&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/04/helen-hou-sandi-how-to-sneak-your-way-into-being-be-a-rockstar-wordpress-developer-when-everyone-thinks-youre/\"><img alt=\"HelenHouSandi-SD 24 No Gamma Correction 800kbits.mov\" src=\"http://videos.videopress.com/tnvPcNda/video-c6c2188654_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 19:15:35 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"WordPress.tv\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:48;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"WordPress.tv: Wil Brown: WordPress for n00bs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://wordpress.tv/?p=13610\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wordpress.tv/2012/10/04/wil-brown-wordpress-for-n00bs/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:621:\"<div id=\"v-2Vf0MN39-1\" class=\"video-player\">\n</div>\n<br />  <a rel=\"nofollow\" href=\"http://feeds.wordpress.com/1.0/gocomments/wptv.wordpress.com/13610/\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/wptv.wordpress.com/13610/\" /></a> <img alt=\"\" border=\"0\" src=\"http://stats.wordpress.com/b.gif?host=wordpress.tv&blog=5089392&post=13610&subd=wptv&ref=&feed=1\" width=\"1\" height=\"1\" /><div><a href=\"http://wordpress.tv/2012/10/04/wil-brown-wordpress-for-n00bs/\"><img alt=\"Wil Brown.mov\" src=\"http://videos.videopress.com/2Vf0MN39/video-3a295b56b1_std.original.jpg\" width=\"160\" height=\"120\" /></a></div>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 19:12:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Video Upload\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:49;a:6:{s:4:\"data\";s:13:\"\n	\n	\n	\n	\n	\n	\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"Weblog Tools Collection: WordPress Theme Releases for 10/4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://weblogtoolscollection.com/?p=12048\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://feedproxy.google.com/~r/weblogtoolscollection/UXMP/~3/XS5t03g_Mqg/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:1126:\"<p><img class=\"alignnone size-full wp-image-12051\" title=\"arbor\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/arbor.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://emptynestthemes.com/2012/10/02/arbor-wordpress-blog-theme/\"><strong>Arbor</strong></a> is a clean, highly readable theme with sans serif typography.</p>\n<p><img class=\"alignnone size-full wp-image-12049\" title=\"discussion\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/discussion.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/discussion\"><strong>Discussion</strong></a> is designed on a notice board using push pins and sheets.</p>\n<p><img class=\"alignnone size-full wp-image-12050\" title=\"sanfrancisco\" src=\"http://weblogtoolscollection.com/wp-content/uploads/2012/10/sanfrancisco.jpg\" alt=\"\" width=\"150\" height=\"113\" /></p>\n<p><a href=\"http://wordpress.org/extend/themes/san-francisco\"><strong>San Francisco</strong></a> is a mobile-optimized theme.</p>\n<img src=\"http://feeds.feedburner.com/~r/weblogtoolscollection/UXMP/~4/XS5t03g_Mqg\" height=\"1\" width=\"1\" />\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 04 Oct 2012 15:00:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"James\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:30 GMT\";s:12:\"content-type\";s:8:\"text/xml\";s:14:\"content-length\";s:5:\"95821\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Sun, 21 Oct 2012 08:45:10 GMT\";s:4:\"x-nc\";s:11:\"HIT luv 138\";s:13:\"accept-ranges\";s:5:\"bytes\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(2744,'uninstall_plugins','a:0:{}','no'),(2786,'_site_transient_timeout_browser_923db92ebac1245b95937323c57f1452','1340555167','yes'),(2787,'_site_transient_browser_923db92ebac1245b95937323c57f1452','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"13.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2736,'_transient_timeout_feed_1a5f760f2e2b48827d4974a60857e7c2','1339630042','no'),(2737,'_transient_feed_1a5f760f2e2b48827d4974a60857e7c2','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:72:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WordPress Plugins » View: Recently Updated\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"http://wordpress.org/extend/plugins/browse/updated/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"WordPress Plugins » View: Recently Updated\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Jun 2012 11:20:00 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:15:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Markus Steiger on \"H Gallery\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/extend/plugins/h-gallery/#post-39059\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Jun 2012 22:13:51 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"39059@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:125:\"Easily display your Google Picasa Albums with a simple, configurable  Shortcode. Fully responsive and with fullscreen option.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Markus Steiger\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Frumph on \"Comic Easel\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/extend/plugins/comic-easel/#post-23022\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 20 Dec 2010 17:48:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"23022@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"Comic Easel allows you to post webcomics to your theme.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"Frumph\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"nakunakifi on \"Google Picasa Viewer\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wordpress.org/extend/plugins/google-picasa-albums-viewer/#post-27934\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 30 Jun 2011 13:08:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"27934@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:141:\"Provides simple drag &#38; drop image gallery functionality to enable you to display Google Picasa Web albums in your WordPress installation.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"nakunakifi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"Vladimir Prelovac on \"ManageWP - Worker\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"http://wordpress.org/extend/plugins/worker/#post-24528\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 18 Feb 2011 13:06:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"24528@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"Manage all your blogs from one dashboard. Visit ManageWP.com to sign up.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Vladimir Prelovac\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"daveshine (David Decker) on \"Jigoshop German (de_DE)\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/extend/plugins/jigoshop-de/#post-34509\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 02 Feb 2012 11:35:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"34509@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:148:\"This plugin extends the Jigoshop shop plugin with fully translated German language packs. - Jigoshop endlich komplett auf deutsch und immer aktuell!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"daveshine (David Decker)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"lukasz138 on \"IT News Widget\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wordpress.org/extend/plugins/it-news-widget/#post-38961\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 11 Jun 2012 09:10:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"38961@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"A widget to display IT news (about android, smartphones, etc.) feeds on your blog.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"lukasz138\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"James Irving-Swift (Swifty) on \"Electric Studio Client Login\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:76:\"http://wordpress.org/extend/plugins/electric-studio-client-login/#post-30102\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 13 Sep 2011 08:47:43 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"30102@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"A plugin that creates groups for users and allows you to change the content (with use of shortcodes) to change content depending on which user is logg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"James Irving-Swift (Swifty)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:34:\"acobot on \"Acobot Live Chat Robot\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:54:\"http://wordpress.org/extend/plugins/acobot/#post-33193\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 22 Dec 2011 07:39:02 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"33193@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:144:\"Enhance your Wordpress with a live chat robot in 3 minutes or less. Boost the online results like never before. It&#039;s simple, easy and FREE.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"acobot\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"Guerilla Code Marketing on \"Associated Posts Lite\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"http://wordpress.org/extend/plugins/content-connector-connect-your-wordpress-contents/#post-39012\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Jun 2012 04:07:54 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"39012@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:118:\"The award-winning Associated Posts Lite (formerly Post Page Associator) Plugin enables you to display posts on a page.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Guerilla Code Marketing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"Internet123 on \"Per Page Widgets\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://wordpress.org/extend/plugins/per-page-widgets/#post-38968\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 11 Jun 2012 14:21:33 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"38968@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"Control widget areas on a per-page / per-post basis.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Internet123\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"ashokkumarzx on \"Maps\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/extend/plugins/htmlsitemap/#post-38268\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 25 May 2012 07:38:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"38268@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"Fully Customizable Google Maps Plugin. Embed it in any post or page through the &#039;Add Map&#039; Icon in the Visual Editor or anywhere on your word\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"ashokkumarzx\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"Antonie Potgieter on \"Slideshow Gallery\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:65:\"http://wordpress.org/extend/plugins/slideshow-gallery/#post-13207\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 22 Sep 2009 12:31:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"13207@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"Feature content in a JavaScript powered slideshow gallery showcase on your WordPress website\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Antonie Potgieter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:51:\"Paul Goodchild on \"WordPress Twitter Bootstrap CSS\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"http://wordpress.org/extend/plugins/wordpress-bootstrap-css/#post-29852\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 04 Sep 2011 22:40:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"29852@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"WordPress Twitter Bootstrap CSS lets you include the latest Twitter Bootstrap CSS and Javascript libraries in your WordPress site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Paul Goodchild\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"Eleyone on \"Server-Up for Wordpress\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/extend/plugins/server-up/#post-38978\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 11 Jun 2012 15:49:01 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"38978@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"Allows to show the status of a list of server as a Widget and a Shortcode\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Eleyone\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"_luigi on \"SiteTree\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"http://wordpress.org/extend/plugins/sitetree/#post-38217\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 24 May 2012 12:38:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"38217@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"This plugin lets you easily add a dynamically generated sitemap page to your WordPress blog or website.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"_luigi\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:52:\"http://wordpress.org/extend/plugins/rss/view/updated\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:7:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Wed, 13 Jun 2012 11:27:22 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:13:\"last-modified\";s:29:\"Tue, 12 Jun 2012 22:13:51 GMT\";s:4:\"x-nc\";s:11:\"HIT luv 139\";}s:5:\"build\";s:14:\"20090627192103\";}','no'),(2738,'_transient_timeout_feed_mod_1a5f760f2e2b48827d4974a60857e7c2','1339630042','no'),(2739,'_transient_feed_mod_1a5f760f2e2b48827d4974a60857e7c2','1339586842','no'),(3384,'_transient_timeout_feed_57bc725ad6568758915363af670fd8bc','1350853172','no'),(3385,'_transient_feed_57bc725ad6568758915363af670fd8bc','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n	\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:72:\"\n		\n		\n		\n		\n		\n		\n				\n\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress Plugins » View: Newest\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://wordpress.org/extend/plugins/browse/new/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress Plugins » View: Newest\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 21 Oct 2012 08:45:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://bbpress.org/?v=1.1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:15:{i:0;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Options Manager\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:63:\"http://wordpress.org/extend/plugins/options-manager/#post-44684\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 20 Oct 2012 08:13:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44684@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"Import and export WordPress options using a json file\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Claudio Sanches\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Saphali Woocommerce LITE\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:72:\"http://wordpress.org/extend/plugins/saphali-woocommerce-lite/#post-44679\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 20 Oct 2012 05:50:53 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44679@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:134:\"Набор дополнений к магазину на Woocommerce, которые расширяют его возможности.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"Saphali\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Cobol Press Post Types\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:70:\"http://wordpress.org/extend/plugins/cobol-press-post-types/#post-44538\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 13:37:57 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44538@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:115:\"The Cobol Press Post Types plugin, is a plugin to make Custom Post Type creation and development easier and faster!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Cobol Press\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Intuitive Custom Post Order\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wordpress.org/extend/plugins/intuitive-custom-post-order/#post-44498\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Oct 2012 10:56:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44498@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:97:\"Intuitively, Order posts(posts, any custom post types) using a Drag and Drop Sortable JavaScript.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hijiri\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"My Tips\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/extend/plugins/my-tips/#post-44502\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Oct 2012 13:36:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44502@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:91:\"My Tips是一款让您能亲轻而易举地为您的WordPress添加气泡提示的插件。\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"hu2008yinxiang\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"wp-gcal-rss\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/extend/plugins/wp-gcal-rss/#post-44536\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 13:21:50 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44536@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:119:\"A WordPress plug-in to bring Google Calendar events in via RSS without requiring the user to get a Google Data API key.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"kpmartin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"Social Slider Share Buttons\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wordpress.org/extend/plugins/social-slider-share-buttons/#post-44524\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 08:05:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44524@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:150:\"Our plugin Social Slider Share Buttons displaying facebook and twitter and pinterest Share Buttons in a very great way to help visitors sharing your b\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"ashrafweb\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Google AdSense\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:67:\"http://wordpress.org/extend/plugins/google-adsense-lite/#post-44489\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 16 Oct 2012 23:15:19 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44489@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:74:\"Google AdSense showcases Google ads on your blog, with full customization.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:7:\"manojtd\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Share\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wordpress.org/extend/plugins/social-share-icons/#post-44542\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 16:44:16 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44542@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:103:\"Add Social Share Icons to your blog or website, more than 50 buttons to choose with color change icons.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"soulliotisa\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Page Tag Cloud\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wordpress.org/extend/plugins/page-tag-cloud/#post-44554\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 22:11:09 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44554@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"Add tags to pages and display them in a tagcloud widget.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"Barry Kooij\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"QR Redirector\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wordpress.org/extend/plugins/qr-redirector/#post-44627\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 19 Oct 2012 17:24:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44627@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"QR Redirector lets you create a QR code for a URL on your site, and redirect that URL anywhere.  The result is a reusable QR Code.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Nikki Blight\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Livejournal Crossposter Remake\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:78:\"http://wordpress.org/extend/plugins/livejournal-crossposter-remake/#post-44509\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Oct 2012 19:35:23 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44509@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:135:\"Automatically copies all posts to a LiveJournal or other LiveJournal-based blog. Optionally adds link to crossposted LiveJournal entry.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"tygernach\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Mailchimp Integration\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://wordpress.org/extend/plugins/mailchimp-integration/#post-44528\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 09:03:03 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44528@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"Integrate MailChimp with your Multisite or Regular Wordpress site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"David Cerulio\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"WP Popup\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"http://wordpress.org/extend/plugins/wp-popup/#post-44526\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 09:01:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44526@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"Display this fancy popup to your visitors sitewide or per blog, an effective way of advertising.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"David Cerulio\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:30:\"\n			\n			\n			\n			\n			\n			\n					\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:2:{s:0:\"\";a:5:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Ads Widget\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://wordpress.org/extend/plugins/ads-widget/#post-44527\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 18 Oct 2012 09:02:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"44527@http://wordpress.org/extend/plugins/\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:95:\"Ads Widget can ADD a customisable display advertisement banner anywhere in your wordpress site.\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"David Cerulio\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:48:\"http://wordpress.org/extend/plugins/rss/view/new\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:10:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:32 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:7:\"expires\";s:29:\"Sun, 21 Oct 2012 09:20:58 GMT\";s:13:\"cache-control\";s:0:\"\";s:6:\"pragma\";s:0:\"\";s:13:\"last-modified\";s:31:\"Sun, 21 Oct 2012 08:45:58 +0000\";s:4:\"x-nc\";s:11:\"HIT luv 139\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(2866,'_site_transient_timeout_browser_dab24c01b5672dca6d25b554c07f767e','1343299742','yes'),(2867,'_site_transient_browser_dab24c01b5672dca6d25b554c07f767e','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:6:\"14.0.1\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2985,'_site_transient_update_core','O:8:\"stdClass\":3:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":9:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:40:\"http://wordpress.org/wordpress-3.4.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":4:{s:4:\"full\";s:40:\"http://wordpress.org/wordpress-3.4.2.zip\";s:10:\"no_content\";s:51:\"http://wordpress.org/wordpress-3.4.2-no-content.zip\";s:11:\"new_bundled\";s:52:\"http://wordpress.org/wordpress-3.4.2-new-bundled.zip\";s:7:\"partial\";b:0;}s:7:\"current\";s:5:\"3.4.2\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"3.2\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1350809956;s:15:\"version_checked\";s:5:\"3.4.2\";}','yes'),(3380,'_transient_timeout_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1350853172','no'),(3381,'_transient_feed_mod_ac0b00fe65abe10e0c5b588f3ed8c7ca','1350809972','no'),(3382,'_transient_timeout_dash_4077549d03da2e451c8b5f002294ff51','1350853172','no'),(3383,'_transient_dash_4077549d03da2e451c8b5f002294ff51','<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/\' title=\'Two weeks after the first beta, WordPress 3.5 Beta 2 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. Set up a test site to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding [&hellip;]\'>WordPress 3.5 Beta 2</a> <span class=\"rss-date\">October 13, 2012</span><div class=\'rssSummary\'>Two weeks after the first beta, WordPress 3.5 Beta 2 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. Set up a test site to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding [&hellip;]</div></li><li><a class=\'rsswidget\' href=\'http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/\' title=\'I’m excited to announce the availability of WordPress 3.5 Beta 1. This is software still in development and we really don’t recommend that you run it on a production site — set up a test site just to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download [&hellip;]\'>WordPress 3.5 Beta 1 (and a bonus!)</a> <span class=\"rss-date\">September 27, 2012</span><div class=\'rssSummary\'>I’m excited to announce the availability of WordPress 3.5 Beta 1. This is software still in development and we really don’t recommend that you run it on a production site — set up a test site just to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download [&hellip;]</div></li></ul></div>','no'),(3097,'_site_transient_timeout_browser_4a94daffa9075a6711b8391a3a4020d4','1348209482','yes'),(3098,'_site_transient_browser_4a94daffa9075a6711b8391a3a4020d4','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"21.0.1180.89\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3392,'_transient_timeout_feed_895a6fef0cc57461ead214388fd67e81','1350853177','no'),(3393,'_transient_feed_895a6fef0cc57461ead214388fd67e81','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:1:\" \";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:29:\"                             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:4:{s:0:\"\";a:8:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"http://yoast.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Tweaking Websites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 17 Oct 2012 20:42:59 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"http://wordpress.org/?v=3.4.2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"image\";a:1:{i:0;a:6:{s:4:\"data\";s:5:\"     \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:6:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"Yoast\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:3:\"url\";a:1:{i:0;a:5:{s:4:\"data\";s:69:\"http://yoast.com/wp-content/themes/yoast-v4/images/yoast-rss-logo.png\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"http://yoast.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"width\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"144\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:6:\"height\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"103\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Tweaking Websites\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}s:4:\"item\";a:20:{i:0;a:6:{s:4:\"data\";s:10:\"          \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Video SEO plugin video\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/LDYf7XxKQ60/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://yoast.com/video-seo-plugin-video/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 10 Oct 2012 12:16:24 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=49533\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:764:\"<p>I&#8217;ve been very hard at work with the Video SEO plugin, adding support for the most used video embed plugins for WordPress. See the changelog for specifics. The plugin is, I&#8217;m proud to say, selling well and people seem to be loving it. I&#8217;m also working on another project with the guys from Video User&#8230;</p><p><a\nhref=\"http://yoast.com/video-seo-plugin-video/\">Video SEO plugin video</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1399:\"<p>I&#8217;ve been very hard at work with the <a\nhref=\"http://yoast.com/wordpress/video-seo/\">Video SEO plugin</a>, adding support for the most used video embed plugins for WordPress. See the <a\nhref=\"http://yoast.com/video-seo-changelog/\">changelog</a> for specifics. The plugin is, I&#8217;m proud to say, selling well and people seem to be loving it. I&#8217;m also working on another project with the guys from <a\nhref=\"http://videousermanuals.com/\">Video User Manuals</a> and they, very kindly, made a video for the Video SEO plugin that I just <em>had</em> to share with you as it shows just how easy the plugin is to use:</p><p><a\nhref=\"http://yoast.com/video-seo-plugin-video/\"><em>Click here to view the embedded video.</em></a></p><p>You can of course still buy the plugin, you can go ahead and <a\nhref=\"http://yoast.com/wordpress/video-seo/\">do that here</a>.</p><p><a\nhref=\"http://yoast.com/video-seo-plugin-video/\">Video SEO plugin video</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/LDYf7XxKQ60\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://yoast.com/video-seo-plugin-video/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"20\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:6:\"      \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:51:\"http://www.vimeo.com/moogaloop.swf?clip_id=51129088\";s:8:\"duration\";s:3:\"104\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:5:{s:6:\"player\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:51:\"http://www.vimeo.com/moogaloop.swf?clip_id=51129088\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Video SEO plugin video • Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:300:\"I\'ve been very hard at work with the Video SEO plugin, adding support for the most used video embed plugins for WordPress. See the changelog for specifics. The plugin is, I\'m proud to say, selling well and people seem to be loving it. I\'m also working on another project with the guys from Video User\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:88:\"http://cdn3.yoast.com/wp-content/uploads/2012/10/video-seo-plugin-video-e280a2-yoast.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"keywords\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:106:\"http://yoast.com/video-seo-plugin-video/#utm_source=rss&utm_medium=rss&utm_campaign=video-seo-plugin-video\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"Video SEO just became a lot easier!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/j--NgCN8Fr4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://yoast.com/video-seo-release/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 19 Sep 2012 20:40:04 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=46687\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:756:\"<p>The Video SEO plugin I have been talking about for far too long has finally been finished and released. The short version is, it&#8217;s for sale for $89, find out more here. Keep on reading for a bit of backstory. Video SEO is probably one of the most technically challenging aspects of SEO. There are&#8230;</p><p><a\nhref=\"http://yoast.com/video-seo-release/\">Video SEO just became a lot easier!</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3780:\"<p>The <a\nhref=\"http://yoast.com/wordpress/video-seo/\">Video SEO plugin</a> I have been talking about for far too long has finally been finished and released. The short version is, it&#8217;s for sale for $89, find out more <a\nhref=\"http://yoast.com/wordpress/video-seo/\">here</a>. Keep on reading for a bit of backstory.</p><p>Video SEO is probably one of the most technically challenging aspects of SEO. There are several ways to make it known to Google that a certain page contains a video, ranging from Facebook share markup, Schema.org videoObject markup, MediaRSS enhancements to feeds to XML Video sitemaps. This plugin supports all four of those methods.</p><p>It&#8217;s a <em>lot</em> of work to get all this working seamlessly, but I think I&#8217;ve nailed it all. I wanted to make it as simple as putting a video in a post and then having the plugin do <em>all</em> the needed work. I succeeded. If you now use oEmbed to embed a video from say, Vimeo, into your blog, just by copy/pasting the URL onto a single line in your editor, and hit update, you&#8217;ll see that the Video SEO plugin grabs all the needed metadata from the Vimeo API and does all the legwork needed to make your video&#8217;s rank.</p><p>How you&#8217;ll know that it&#8217;s recognized the video? Because it will update the snippet into a video snippet:</p><p><img\nclass=\"alignnone\" title=\"Video Snippet Preview\" src=\"http://cdn.yoast.com/wp-content/uploads/2010/10/video-snippet-590x156.png\" alt=\"Video Snippet Preview\" width=\"590\" height=\"156\" /></p><p>It doesn&#8217;t just do that for Vimeo video&#8217;s, it works with a lot of platforms, including YouTube. How it does the YouTube thing is a question some of the more experienced SEO&#8217;s will ask. I leave that as an exercise to the reader. Check my <a\nhref=\"http://yoast.com/video-sitemap.xml\">video-sitemap.xml</a> and see if you can find it. Whether that&#8217;ll keep working? I don&#8217;t know.</p><p>Of course the video SEO plugin is based on and uses large parts of my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a>, and therefor needs that to run. This will really allow you to take any site with video to the next level though. I&#8217;m very proud of it and hope that those of you running video sites will see the benefits and buy it.</p><p>Now I know some people will start to complain that it&#8217;s a paid plugin. I can even understand that to a certain extent. Please just realize that it&#8217;s impossible to build a plugin like this and support it, without being paid for those efforts. It takes a <em>lot</em> of work, almost 1.5 years of thinking and learning has gone into making this plugin as good as it is, and it&#8217;ll probably require very regular updates to keep in line with all the supported video platforms. To be able to do that, I have to charge for the plugin. It&#8217;s called a business model. Be glad that I found one, as it will also support the continued development of the core SEO plugin.</p><p>I hope, and fully expect it to work out well for everyone involved. I&#8217;d love to hear your thoughts and, I&#8217;ll be honest, I&#8217;d love even more to see you <a\nhref=\"http://yoast.com/wordpress/video-seo/\">buy the plugin</a>!</p><p><a\nhref=\"http://yoast.com/video-seo-release/\">Video SEO just became a lot easier!</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/j--NgCN8Fr4\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/video-seo-release/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"163\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2010/10/video-snippet-590x156.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2010/10/video-snippet-590x156.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Video Snippet Preview\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://yoast.com/video-seo-release/#utm_source=rss&utm_medium=rss&utm_campaign=video-seo-release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:16:\"                \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"Google Analytics Dashboard for WordPress Blogs\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/WkB5HaRNB0I/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:53:\"http://yoast.com/google-analytics-dashboard/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 11 Sep 2012 09:11:47 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"Analytics\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45996\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:808:\"<p>One of the great new features of the ‘new Google Analytics’ are the custom dashboards. If you do not use them yet, you most definitely should. I’m using custom dashboards to measure SEO, PPC, ROI, conversions and more. I also made a custom dashboard for WordPress blogs using Yoast’s Google Analytics for WordPress plugin. I&#8230;</p><p><a\nhref=\"http://yoast.com/google-analytics-dashboard/\">Google Analytics Dashboard for WordPress Blogs</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/jeroen/\">Jeroen van Eck</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Jeroen van Eck\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6513:\"<p><img\nclass=\"alignright size-full wp-image-46002\" title=\"Google Analytics Dashboard for WordPress blogs\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/FI_GAforWP.png\" alt=\"Google Analytics Dashboard for WordPress blogs\" width=\"203\" height=\"137\" />One of the great new features of the ‘new Google Analytics’ are the custom dashboards. If you do not use them yet, you most definitely should. I’m using custom dashboards to measure SEO, PPC, ROI, conversions and more. I also made a custom dashboard for WordPress blogs using Yoast’s <a\nhref=\"http://yoast.com/wordpress/google-analytics/\">Google Analytics for WordPress plugin</a>. I already shared it in Dutch on <a\nhref=\"http://www.jeroenvaneck.com/\">my own blog</a>, but Joost asked me to share it with his readers as well. So here it is.</p><h2>About the dashboard</h2><p>This dashboard is meant to give a quick insight into all the important things you want to know about your blog at any given time. First of all I’d like to explain some metrics I’ve chosen to use in this dashboard. Firstly I chose to use visits instead of visitors because you also want to know when someone visits your blog multiple times. Secondly I chose to use unique page views instead of page views because I want to know how many people read my posts, not how many times they are read. Thirdly with this dashboard I tried to create insights into metrics about posts instead of metrics about all pages.</p><h2>How to build this dashboard</h2><p>First of all this dashboard of course contains a section regarding the most important core metrics. In this case I chose to include widgets containing the number of visits, the number of new visitors, a graph of the number of visits over the chosen period, the pages per visit and the average time on site. So far: nothing special. These widgets you can create without filtering any data.</p><h2>Google Analytics for WordPress</h2><p>For the following sections you need to use the Google Analytics for WordPress plugin. The plugin will allow you to use custom variables to track post types, authors, categories and tags. In the settings of the plugin you can activate them in Custom Variable Settings (in advanced settings). These settings allow you to show the interesting data for your dashboard. Depending on which Custom Variables you use you have to tweak your dashboard. For this dashboard we’ve used the following settings:</p><p><a\nclass=\"thickbox\" href=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/custom-variable-settings-yoast.jpg\"><img\nclass=\"alignnone size-large wp-image-45997\" title=\"Custom Variable Settings Yoast\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/09/custom-variable-settings-yoast-536x389.jpg\" alt=\"Custom Variable Settings Yoast\" width=\"536\" height=\"389\" /></a></p><p>When you use different settings you have to check which variable is saved in which custom variable key.<br\n/> With these settings you are able to count the number of posts read on your blog and the most read posts. Because the plugin creates a custom variable containing the post type for each post that has been viewed you only need to filter the pages containing any kind of post type.</p><p>The widget settings for the number of posts read will look like this:</p><p><a\nclass=\"thickbox\" href=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/number-of-posts-read.jpg\"><img\nclass=\"alignnone size-large wp-image-46001\" title=\"Number of posts read\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/number-of-posts-read-536x283.jpg\" alt=\"Number of posts read\" width=\"536\" height=\"283\" /></a></p><p>The widget settings for the most read posts will look like this:</p><p><a\nclass=\"thickbox\" href=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/most-read-posts.jpg\"><img\nclass=\"alignnone size-large wp-image-46000\" title=\"Most read posts\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/09/most-read-posts-536x309.jpg\" alt=\"Most read posts\" width=\"536\" height=\"309\" /></a></p><p>The other custom variables created by the plugin allow you to show a few other interesting numbers. In this example we’ve chosen to show the most read authors and most read categories, but you could also show the most read tags or the number of posts by publication year.</p><p>The widget settings for the most read authors will look like this:</p><p><a\nclass=\"thickbox\" href=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-authors.jpg\"><img\nclass=\"alignnone size-large wp-image-45998\" title=\"Most read authors\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/most-read-authors-536x288.jpg\" alt=\"Most read authors\" width=\"536\" height=\"288\" /></a></p><p>The widget settings for the most read categories will look like this:</p><p><a\nclass=\"thickbox\" href=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-categories.jpg\"><img\nclass=\"alignnone size-large wp-image-45999\" title=\"Most read categories\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-categories-536x288.jpg\" alt=\"Most read categories\" width=\"536\" height=\"288\" /></a></p><h2>Sources</h2><p>Lastly the dashboard contains an overview of the most important traffic sources split up in used medium, social sources and used organic search terms.</p><h2>Installation</h2><p>I recommend you try to build this dashboard on your own. Not only to understand how it works but also to be able to choose to represent data in a different way. But of course I will provide you with <a\nhref=\"https://www.google.com/analytics/web/permalink?uid=aoWyebltTe6p_02PrR16og\">a link</a> to the dashboard configuration, which you can save to the desired profile in your Google Analytics account. Remember you need to have the Google Analytics for WordPress plugin installed as mentioned to be able to see all the correct data. Otherwise you still have to tweak the dashboard yourself.</p><p>Hope you enjoy your dashboard. Do you have any questions or suggestions? Leave a comment below.</p><p><a\nhref=\"http://yoast.com/google-analytics-dashboard/\">Google Analytics Dashboard for WordPress Blogs</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/jeroen/\">Jeroen van Eck</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/WkB5HaRNB0I\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://yoast.com/google-analytics-dashboard/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"32\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/FI_GAforWP-180x114.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:6:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/FI_GAforWP.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"Google Analytics Dashboard for WordPress blogs\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/FI_GAforWP-180x114.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:83:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/custom-variable-settings-yoast.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Custom Variable Settings Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:90:\"http://cdn.yoast.com/wp-content/uploads/2012/09/custom-variable-settings-yoast-180x114.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/number-of-posts-read.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Number of posts read\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/number-of-posts-read-180x114.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:68:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/most-read-posts.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:15:\"Most read posts\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn.yoast.com/wp-content/uploads/2012/09/most-read-posts-180x114.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:70:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-authors.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"Most read authors\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:78:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-authors-180x114.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/most-read-categories.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Most read categories\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn.yoast.com/wp-content/uploads/2012/09/most-read-categories-180x114.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:114:\"http://yoast.com/google-analytics-dashboard/#utm_source=rss&utm_medium=rss&utm_campaign=google-analytics-dashboard\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:15:\"               \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WooThemes chooses WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/LKmy1Veod_c/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/welcome-woothemes-users/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 10 Sep 2012 14:07:29 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:16:\"WordPress Themes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=46021\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:838:\"<p>WooThemes once again showed that they are at the forefront of WordPress development today: they deprecated their WooFramework&#8217;s SEO functionality and recommend their users to switch to WordPress SEO by Yoast. I&#8217;ve worked closely with Matt Cohen, WooThemes CTO, to build an import functionality for WooThemes users straight into WordPress SEO. I recently added statistics&#8230;</p><p><a\nhref=\"http://yoast.com/welcome-woothemes-users/\">WooThemes chooses WordPress SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3313:\"<p><img\nclass=\"alignright size-full wp-image-45991\" title=\"WooThemes chooses WordPress SEO\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress.png\" alt=\"WooThemes chooses WordPress SEO\" width=\"203\" height=\"137\" />WooThemes once again showed that they are at the forefront of WordPress development today: they <a\nhref=\"http://www.woothemes.com/2012/09/every-line-of-code-audited/\">deprecated their WooFramework&#8217;s SEO functionality</a> and recommend their users to switch to <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO by Yoast</a>. I&#8217;ve worked closely with Matt Cohen, WooThemes CTO, to build an import functionality for WooThemes users straight into WordPress SEO.</p><p>I recently added statistics tracking to my two main plugins, and about 125,000 of you have already kindly agreed to send me some anonymous data. Because of that, I now know that <a\nhref=\"http://www.woothemes.com/2012/06/canvas/\">WooThemes Canvas</a> is actually one of the 10 most used themes <em>and</em> is used as a parent theme quite often as well, and their dozens of other themes are very, very popular, so this could mean a lot of new users for my SEO plugin. I welcome you all!</p><h2>WooSEO Import</h2><p>The WooSEO import functionality is very simple, activate the WordPress SEO plugin, go to SEO -&gt; Import and you&#8217;ll see this:</p><p><img\nclass=\"alignnone size-full wp-image-46022\" title=\"WooThemes Import at work: check the import from Woothemes box, press import\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import.png\" alt=\"WooThemes Import at work: check the import from Woothemes box, press import\" width=\"527\" height=\"281\" /></p><p>You can check if the data has imported ok by opening up some posts and seeing if your WordPress SEO box contains the titles and meta descriptions you had entered in WooSEO. If it has imported ok, repeat the process above but check the &#8220;Delete the old data&#8221; checkbox, this will make sure your database is as clean as can be by deleting the old WooSEO values from the database.</p><h2>Thank you to WooThemes!</h2><p>By doing this, WooThemes is finally doing what I&#8217;ve been proposing theme companies do <a\nhref=\"http://yoast.com/wordpress-seo-theme/\">for ages now</a>: stop trying to provide an SEO framework and focus on good code, great design and the functionality to change that design. That&#8217;s a step I thank &amp; applaud them for and I fully hope other theme vendors will do the same. I&#8217;m open to working with everybody on building import functionality when they decide to take this step.</p><p>Let me know what you think in the comments, and if you&#8217;re a recent &#8220;convert&#8221; coming from WooSEO, I&#8217;d seriously love to hear that too!</p><p><a\nhref=\"http://yoast.com/welcome-woothemes-users/\">WooThemes chooses WordPress SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/LKmy1Veod_c\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/welcome-woothemes-users/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"42\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:2:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:65:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WooThemes chooses WordPress SEO\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/FI_WordPress-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:69:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"WooThemes Import at work: check the import from Woothemes box, press import\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/woothemes-import-180x114.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/welcome-woothemes-users/#utm_source=rss&utm_medium=rss&utm_campaign=welcome-woothemes-users\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:15:\"               \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Twitter Cards in action\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/uQYktVK1qOM/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/twitter-cards-in-action/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 05 Sep 2012 20:22:06 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45981\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:749:\"<p>I first wrote about Twitter Cards in June, when Twitter had just announced them, today I got a tweet from Paul Savage who noticed that they were now enabled for yoast.com. That&#8217;s super awesome news as it means that the implementation I did in my WordPress SEO plugin works. Of course I had to do&#8230;</p><p><a\nhref=\"http://yoast.com/twitter-cards-in-action/\">Twitter Cards in action</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3768:\"<p><img\nclass=\"alignright size-full wp-image-45989\" title=\"Twitter Cards in action\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter.png\" alt=\"Twitter Cards in action\" width=\"203\" height=\"137\" />I first wrote about <a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards</a> in June, when Twitter had just announced them, today I got a tweet from <a\nhref=\"http://twitter.com/paulsavage\">Paul Savage</a> who noticed that they were now enabled for yoast.com. That&#8217;s super awesome news as it means that the implementation I did in my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> works.</p><p>Of course I had to do some tweaking afterwards, because as it turns out Twitter&#8217;s scraper for the Twitter Card data is easily confused (it doesn&#8217;t understand how to parse multiple og:images meta tags). But let me show you what it means if it works well; if you tweet an article from this site, you&#8217;ll see a normal tweet with a new &#8220;View Summary&#8221; link:</p><p><img\nclass=\"alignnone size-full wp-image-45983\" title=\"Tweet with summary button\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/tweet-summary-button.png\" alt=\"Tweet with summary button\" width=\"513\" height=\"88\" /></p><p>When you click that View summary link, the link &#8220;expands&#8221; and you&#8217;ll see this, the complete Twitter Card:</p><p><img\nclass=\"alignnone size-full wp-image-45982\" title=\"Expanded Twitter Card\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card.png\" alt=\"Expanded Twitter Card\" width=\"513\" height=\"314\" /></p><p>As you might notice my Twitter account is there twice, the top one is because I&#8217;m the author of that article, the second one is because I set the @yoast account as the main account for this site. So if you see an article tweeted that&#8217;s been written by Michiel, you&#8217;ll see his twitter account on top and the main @yoast account in the bottom:</p><p><img\nclass=\"size-full wp-image-45984 alignnone\" title=\"Twitter Card Michiel\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel.png\" alt=\"Twitter Card Michiel\" width=\"448\" height=\"187\" /></p><h2>Can I have Twitter Cards for my site?</h2><p>I know you&#8217;re asking yourself that question. I tested some sites that are running my SEO plugin on which I knew the Twitter Cards implementation in it is activated, but unfortunately couldn&#8217;t find any working examples outside of my own site yet. It seems that you really have to <a\nhref=\"https://dev.twitter.com/form/participate-twitter-cards\">apply to participate</a> with your site next to having the functionality active on your site (you can activate it on the SEO -&gt; Social menu).</p><p>So, the next step is another update of my SEO plugin which improves a bit on the current Twitter Card implementation now that I can test properly, expect that somewhere early next week. This update will also rely on OpenGraph when activated too where possible so you don&#8217;t have another 10 lines of Twitter meta data but instead only 3 or 4 lines for Twitter and the rest of the data coming from OpenGraph. Looking forward to seeing this work on other sites that run my SEO plugin!</p><p><a\nhref=\"http://yoast.com/twitter-cards-in-action/\">Twitter Cards in action</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/uQYktVK1qOM\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/twitter-cards-in-action/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"49\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:4:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:72:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Twitter Cards in action\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn.yoast.com/wp-content/uploads/2012/09/ionen_social_Twitter-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/tweet-summary-button.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"Tweet with summary button\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn2.yoast.com/wp-content/uploads/2012/09/tweet-summary-button-125x88.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:82:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Expanded Twitter Card\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:90:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-expanded-twitter-card-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Twitter Card Michiel\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn3.yoast.com/wp-content/uploads/2012/09/twitter-card-michiel-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/twitter-cards-in-action/#utm_source=rss&utm_medium=rss&utm_campaign=twitter-cards-in-action\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"WordPress Archive Pages: the tutorial\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/ituadafIpro/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://yoast.com/wordpress-archive-pages/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 22 Aug 2012 13:26:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45944\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:813:\"<p>On any bigger site, you&#8217;ll get archive pages of some sort. Whether they are taxonomy or category archives, like this SEO category, Custom Post Type archives like this one for our WordPress plugin reviews or my speaking engagements, or even date archives: they all share the same common traits. In WordPress an archive will, by default, consist&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-archive-pages/\">WordPress Archive Pages: the tutorial</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8281:\"<p><img\nclass=\"alignright size-full wp-image-45974\" title=\"WordPress Archive Pages\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1.png\" alt=\"WordPress Archive Pages\" width=\"203\" height=\"137\" />On any bigger site, you&#8217;ll get archive pages of some sort. Whether they are taxonomy or category archives, like this <a\nhref=\"http://yoast.com/cat/seo/\">SEO category</a>, Custom Post Type archives like this one for our <a\nhref=\"http://yoast.com/wp-plugin-review/\">WordPress plugin reviews</a> or my <a\nhref=\"http://yoast.com/speaking/\">speaking engagements</a>, or even date archives: they all share the same common traits. In WordPress an archive will, by default, consist only of a listing of posts. As these pages will get visited by normal people, that means those visitors are &#8220;thrown&#8221; upon a page that doesn&#8217;t try to tell them where they are.</p><p>This lack of introduction gives visitors only two options: leave immediately because they don&#8217;t understand where they&#8217;ve ended up, or click through to an article, without you having had <em>any</em> chance of pushing them in the right direction.</p><p>Because of that, every decent archive needs an &#8220;introduction&#8221;. This can be as simple as just a header that stands out, but for more important sections of your site, it actually pays of to write a bit of content.</p><p>Before you write that content though, you first have to make sure that the content you write actually displays on those archive pages.</p><h2>Show introductory content on archive pages</h2><h3>Categories, Tags and Custom Taxonomies</h3><p>For category, tag or custom taxonomy archives, you can simply create a custom template by creating a file. For categories, for instance, this file would be called category.php. If you don&#8217;t know how template hierarchy works within WordPress, check out <a\nhref=\"http://yoast.com/wordpress-theme-anatomy/\">our infographic</a> on the topic.</p><p>In this template, above the standard WordPress loop, you add the following code:</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php if ( !get_query_var( \'paged\' ) ) { ?--&gt;&lt;/pre&gt;\n&lt;h1&gt;&lt;/h1&gt;\n&lt;pre&gt;\n  &lt;!--?php echo wpautop( term_description() ); ?--&gt;\n&lt;!--?php } ?--&gt;</pre><p>This uses the title you set for the category / tag / custom taxonomy, as well as the description, which you can fill in the WordPress backend.</p><p>If you uses <a\nhref=\"http://yoast.com/wp-theme/genesis/\">Genesis</a>, you don&#8217;t need to create an extra file, you can probably just check the box in your Genesis theme settings:</p><p><img\nclass=\"alignnone\" title=\"Genesis Archive Settings\" src=\"http://cdn3.yoast.com/wp-content/uploads/2011/09/genesis-archive-settings.png\" alt=\"Genesis Archive Settings\" width=\"575\" height=\"99\" /></p><p>Or if that doesn&#8217;t work, you can just add this to your child theme&#8217;s functions.php (there&#8217;s still no need to make that file):</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php &lt;br ?--&gt;function yoast_term_archive_intro() {\n  if ( !is_category() &amp;&amp; !is_tag() &amp;&amp; !is_tax() )\n    return;\n\n  if( get_query_var( \'paged\' ) )\n    return;\n\n  echo \'&lt;/pre&gt;\n&lt;h1 class=&quot;entry-title&quot;&gt;\'.single_term_title(\'\', false).\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n  echo \'&lt;/pre&gt;\n&lt;div class=&quot;entry-content&quot;&gt;\'.wpautop( term_description() ).\'&lt;/div&gt;\n&lt;pre&gt;\n\';\n}\nadd_action( \'genesis_before_loop\', \'yoast_term_archive_intro\', 20 );</pre><p>Of course you can add some extra code or classes in there to style those boxes a bit more.</p><h3>Custom Post Type archives</h3><p>For custom post type archives, this might actually be a bit harder. The beginning of the process is the same: you can create a new file, the name of which should contain your post type: <em>archive-{posttype}.php</em>.</p><p>Then you could output the name of the post type using the following code:</p><pre class=\"brush: php; title: ; notranslate\">if ( !get_query_var( \'paged\' ) ) {\n$pt = get_post_type_object( get_post_type() );\necho \'&lt;/pre&gt;\n&lt;h1&gt;\'.$pt-&gt;labels-&gt;name.\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n}</pre><p>This is where the tricky bit comes in though: there is no backend in WordPress to input descriptions for these types of pages, nor is there a preferred way of storing that data. I added input fields for these to my Genesis child theme settings, which is too much to explain here, of course you could also hardcode it but that&#8217;s a bit ugly&#8230;</p><p>Within Genesis, with the data coming from my child theme settings, I output the text using the following code in my functions.php (again, no reason to create a new file):</p><pre class=\"brush: php; title: ; notranslate\">&lt;!--?php &lt;br ?--&gt;function yoast_cpt_intro() {\n  if ( !is_post_type_archive() )\n    return;\n\n  if( get_query_var( \'paged\' ) )\n    return;\n\n  $pt = get_post_type();\n  if ( genesis_get_option( $pt.\'-title\', \'child-settings\' ) ) {\n    echo \'&lt;/pre&gt;\n&lt;h1&gt;\'.genesis_get_option( $pt.\'-title\', \'child-settings\' ).\'&lt;/h1&gt;\n&lt;pre&gt;\n\';\n    echo wpautop( genesis_get_option( $pt.\'-intro\', \'child-settings\' ) );\n  }\n}\nadd_action( \'genesis_before_loop\', \'yoast_cpt_intro\', 20 );</pre><h2>Prevent duplicate content</h2><p>To avoid <a\nhref=\"http://yoast.com/articles/duplicate-content/\">duplicate content</a>, we only add the introduction to the first page of an archive, if that archive is a paginated one. With the introduction of <a\nhref=\"http://yoast.com/rel-next-prev-paginated-archives/\">rel=&#8221;next&#8221; and rel=&#8221;previous&#8221;</a>, sites that have implemented this well will be getting more visitors to the first page of a paginated series of archives anyway, but we still don&#8217;t want to show the same content on multiple pages.</p><p>You might have noticed this line of code in the Genesis examples above:</p><pre class=\"brush: php; title: ; notranslate\">if( get_query_var( \'paged\' ) )\nreturn;</pre><p>This does exactly that: prevent the duplicate content.</p><h2>Styling the archive introduction text</h2><p>You should make sure that your introductory text for your archive really stands out. Remember, it&#8217;s not &#8220;just&#8221; there for SEO reasons, it&#8217;s there because people will read it! It&#8217;s very tempting to make it look just like another post, but you should take a bit more time and style it properly.</p><p>I personally like the way we&#8217;ve done that in our recent redesign, this is for instance what the <a\nhref=\"http://yoast.com/cat/wordpress/\">WordPress category</a> intro looks like:</p><p><img\nclass=\"alignnone size-full wp-image-45947\" title=\"WordPress category introduction\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction.png\" alt=\"WordPress category introduction\" width=\"560\" height=\"187\" /></p><p>Of course, the text for that introduction is a bit poor. I should probably do a much better job myself of explaining people where to go for what kinds of content, so I&#8217;ll get right on that once I finish this post&#8230; Which brings me to the last bit:</p><h2>HTML in category descriptions</h2><p>HTML in descriptions for categories, tags and custom taxonomies is currently disallow by default. I think that&#8217;s changing in an upcoming release, but for now you&#8217;ll have to fix that. If you&#8217;re using my WordPress SEO plugin, this has already been fixed for you, if not, AppThemes has quite a <a\nhref=\"http://docs.appthemes.com/tutorials/allow-html-in-taxonomy-descriptions/\">good tutorial</a> on it.</p><p>Let me know what you did with your archive pages in the comments, I&#8217;m very curious to see good examples!</p><p><a\nhref=\"http://yoast.com/wordpress-archive-pages/\">WordPress Archive Pages: the tutorial</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/ituadafIpro\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:46:\"http://yoast.com/wordpress-archive-pages/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"34\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:78:\"http://cdn2.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:70:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"WordPress Archive Pages\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:78:\"http://cdn2.yoast.com/wp-content/uploads/2012/08/ionen_content_WP1-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn3.yoast.com/wp-content/uploads/2011/09/genesis-archive-settings.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Genesis Archive Settings\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress category introduction\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:91:\"http://cdn.yoast.com/wp-content/uploads/2012/08/wordpress-category-introduction-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:108:\"http://yoast.com/wordpress-archive-pages/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-archive-pages\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"Why relative URLs should be forbidden for web developers\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/qPbEHoWyZgc/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/relative-urls-issues/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 17 Aug 2012 09:52:18 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Webdesign & development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45908\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:782:\"<p>Twitter is the website / web service most of us love and sometimes hate, a service that has become an integral part of most of our online identities. It&#8217;s one of the services we expect to be there when we Google ourselves or other people. So when you Google yourself and instead of twitter.com, you&#8230;</p><p><a\nhref=\"http://yoast.com/relative-urls-issues/\">Why relative URLs should be forbidden for web developers</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:10926:\"<p>Twitter is the website / web service most of us love and sometimes hate, a service that has become an integral part of most of our online identities. It&#8217;s one of the services we expect to be there when we Google ourselves or other people. So when you Google yourself and instead of twitter.com, you see a weird result, you think &#8220;huh&#8221;. Then, when you&#8217;re like me, you try to figure out what caused that and once you figure it, you think &#8220;d0h!&#8221;. You&#8217;d think the people at Twitter would know better than to use relative URLs or even worse, a HOST header to determine the domain, resulting in this result when you search for my name:</p><p><img\nclass=\"aligncenter size-full wp-image-45910\" title=\"yoast - twitter\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-twitter.png\" alt=\"yoast - twitter\" width=\"522\" height=\"83\" /></p><p>Relative URLs stink. They really do. All sorts of SEO problems on the web are caused by the use of relative URLs in links, canonicals and more. We find issues with them in our <a\nhref=\"http://yoast.com/hire-me/website-review/\">website reviews</a> on a regular basis, but as you can see bigger sites like Twitter also have massive issues because of them. I&#8217;ll try to explain why you shouldn&#8217;t use them and what you could do instead, as it might be simple things like this that hold you back from performing well with your website.</p><h2>What are relative URLs?</h2><p>Relative URLs are all URLs that do not contain a fully qualified domain name and path, but instead just the path or a portion of the path. So when your website is example.com, you could be linking to your contact page from your homepage like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;contact.html&quot;&gt;Contact&lt;/a&gt;</pre><p>And back to your homepage from your contact page like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt;</pre><p>The / refers to the directory / on the domain. So even when you&#8217;re three levels deep in a directory structure, linking to / would link to the frontpage. Lastly, when you&#8217;re on the corporate page of your about section, for instance <em>example.com/about/corporate.html</em>, you could link to your contact page like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;a href=&quot;../contact.html&quot;&gt;Contact&lt;/a&gt;</pre><p>All the resulting URLs are calculated by your browser based on the base URL. By default, this is the current URL that&#8217;s in your location bar, but using the <code>base</code> element, you could set it to something else, like this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;base href=&quot;http://www.example.com/subdirectory/&quot;&gt;</pre><p>Doing this would make the second link above, the link to /, resolve to <em>http://www.example.com/subdirectory/</em>.</p><p>This was all fine when HTML was invented and websites consisted of real static HTML pages in directory structures. Now though, most of the web is built with content management systems, changing URLs is easier and some URLs might behave differently than what you&#8217;d expect. Because of that, relative URLs can cause a few different types of issues, all of which can be pretty detrimental for your SEO and your server performance.</p><h3>Why are relative URLs still being used?</h3><p>Relative URLs are often used because developers have a test environment on another hostname and it makes it easy for them to move stuff between their test environment and their live environment. Other reasons include that it&#8217;s &#8220;just easier in website maintenance&#8221;. They&#8217;re also, in my opinion falsely, <a\nhref=\"http://www.websiteoptimization.com/speed/tweak/relative/\">promoted</a> by some websites about site speed because they&#8217;re &#8220;shorter&#8221; and thus &#8220;faster&#8221;.</p><p>In reality, all of these reasons are false when you look at the bigger picture. The few minutes a developer might save by using relative URLs are offset by countless hours an SEO might be spending to solve the issues caused.</p><h2>Some of the problems caused by relative URLs</h2><p>Issues caused by the use of relative URLs are vast and plentiful, and any seasoned SEO can probably give you a few examples of clients that have had huge losses because of them. Let me show you a couple of them:</p><h3>A completely indexed test environment</h3><p>When you have a menu structure that relies on relative URLs, one wrong link in your content to your test environment would cause the entire test environment to be spidered and indexed, causing massive <a\nhref=\"http://yoast.com/articles/duplicate-content/\">duplicate content issues</a>. This happens more often than you think, in fact, have you checked whether the test environment you used to test your last few development projects are indexed by Google? I bet some of you will now find out that they are indexed.</p><h3>Spider traps</h3><p>Most of the times I&#8217;ve found what we call &#8220;spider traps&#8221; they&#8217;re caused by wrongly used relative URLs. Let me show you an example: a site linking to ./example instead of ../example/, from the /contact/ page. A link to ./ means you&#8217;re linking to the current directory. When the current URL ends in /contact/ this means that a link to ./example/ resolves to /contact/example/. So clicking that link would take me to http://www.example.com/contact/example/, if your CMS is set up to serve the same page for /contact/example/ as it serves for /contact/, which is a <em>very</em> common case, you&#8217;ll now have a spider trap. Because that /content/example/ page also links to ./example/, which now resolves to /contact/example/example/, which then links to ./example/ again and thus links to /contact/example/example/example/ etc. etc. etc. You probably get the issue, and I hope you also understand why this could be <em>very</em> detrimental for your search engine rankings.</p><p>These kinds of issues are <em>very</em> easily found using a tool like <a\nhref=\"http://www.screamingfrog.co.uk/seo-spider/\">Screaming Frog</a>, which I think every webmaster should have in its arsenal.</p><h3>Relative canonical URLs</h3><p>Issues can also be caused by using relative canonical URLs. A <a\nhref=\"http://yoast.com/canonical-url-links/\">canonical URL</a> is supposed to link to the &#8220;perfect&#8221; URL for a piece of content on your website. If you use a relative link and also have a subdomain or test environment that&#8217;s indexed, you suddenly have several versions of a piece of content that all proclaim themselves as the canonical version of that piece of content&#8230; You can understand a search engine having a hard time dealing with this.</p><h4>A little knowledge is a dangerous thing&#8230;</h4><p>At Twitter, they figured out that they shouldn&#8217;t use relative canonicals. So a developer there thought he was smart and probably defined the domain part of the canonical URL using the HOST header information. This causes the very issue that I talked about in the introduction above, because now the IP result in the screenshot above has a canonical URL pointing to itself, causing Google to show Twitter&#8217;s IP&#8217;s in search results everywhere instead of the proper domain&#8230;</p><h3>Protocol-relative URLs</h3><p>Another issue is the so-called protocol relative URL. This is a URL that leaves of the http:// or https:// bit. This type of relative URL does have its uses, but it should not be deployed outside of those useful cases. The useful cases are when it&#8217;s used inside JavaScript or CSS, so files are served over the same protocol as the current page, especially because when you&#8217;re on a https URL, serving anything over http basically breaks the security. Using protocol relative URLs within links or canonical URLs is a <em>very bad idea</em> though, because you can still have duplicate content issues between http and https versions of a website.</p><h2>The solution</h2><p>WordPress core has this solution solved in a very nice way, using a couple of solutions:</p><h3>Absolute URLs everywhere</h3><p>Whenever WordPress outputs a URL, it&#8217;s always a full, absolute URL. For the domain name part of that it uses the domain you set in the General settings. This is the type of solution everyone should use: the domain name should be in a configuration file, this would allow you to still easily migrate between development environment and live environment by just using different configuration files.</p><h3>Canonical Redirects</h3><p>Whenever WordPress detects that you are on a specific article but are not using the proper &#8220;canonical&#8221; URL, it&#8217;ll try to 301 redirect you to the correct version. For the cases when it doesn&#8217;t detect this (it for instance ignores query parameters added to the URL), there is:</p><h3>The canonical link URL element</h3><p>When you&#8217;re on a single post or page, WordPress puts out a <a\nhref=\"http://yoast.com/canonical-url-links/\">canonical link element</a>, based on what the URL of the current article should be, irregardless of what&#8217;s in your browsers location bar. My <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> extends this functionality to display canonical link elements just about everywhere within WordPress, and you should do this in your CMS too.</p><h2>Conclusion</h2><p>Twitter&#8217;s issue could be rather easily resolved, as we&#8217;ve discussed, by using proper absolute URLs everywhere in their code. There are no real good arguments against not doing that. While Twitter is not a direct e-commerce site and might not have the biggest of issues with losing a bit of traffic, I&#8217;ve had issues with relative URLs and relative canonicals at clients that have cost those clients upwards of a hundred thousand euro&#8217;s. The very small gain in web development time, if any, is never, ever, worth that.</p><p>So you should be using absolute URLs at all times, canonical redirects when possible and canonical link elements should ideally be on every page you serve out. After all, when you&#8217;re building a brand, do you really want to lose that brand in the search result pages? I think that&#8217;s a waste and I&#8217;m guessing you do too.</p><p><a\nhref=\"http://yoast.com/relative-urls-issues/\">Why relative URLs should be forbidden for web developers</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/qPbEHoWyZgc\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/relative-urls-issues/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"60\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-twitter-125x83.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:65:\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-twitter.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"yoast – twitter\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-twitter-125x83.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/relative-urls-issues/#utm_source=rss&utm_medium=rss&utm_campaign=relative-urls-issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Redesign and more :)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/Dzq5aIAuyBM/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://yoast.com/redesign-and-more/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 15 Aug 2012 11:47:45 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Offtopic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45894\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:794:\"<p>Yoast keeps changing and growing in many, many ways. One of those is a redesign, which is now live. We&#8217;re finally using the theme framework we&#8217;ve been recommending to others for ages: StudioPress&#8217; Genesis. We used an external developer for most of the development, just because I&#8217;m too pressed for time myself and didn&#8217;t want&#8230;</p><p><a\nhref=\"http://yoast.com/redesign-and-more/\">Redesign and more :)</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:2569:\"<p><img\nclass=\"alignright size-full wp-image-45895\" title=\"yoast redesign\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-redesign.png\" alt=\"yoast redesign\" width=\"347\" height=\"156\" />Yoast keeps changing and growing in many, many ways. One of those is a redesign, which is now live. We&#8217;re finally using the theme framework we&#8217;ve been recommending to others for ages: <a\nhref=\"http://yoast.com/out/genesis/\">StudioPress&#8217; Genesis</a>. We used an external developer for most of the development, just because I&#8217;m too pressed for time myself and didn&#8217;t want this to wait. His name is <a\nhref=\"http://www.billerickson.net/\">Bill Erickson</a> and he comes <em>highly</em> recommended, he&#8217;s been an absolute pleasure to work with.</p><p>I hope you like it, a longer story on the how and why of this will come soon, as we make sure we&#8217;ve fixed all small bugs.</p><h2>Other changes at Yoast</h2><p>But there&#8217;s more&#8230; While we work on the new design, we can also tell you that we&#8217;ve actually hired a part-time designer, who&#8217;ll be joining us September 1st to start out several new projects. We&#8217;re excited to have her on board but we won&#8217;t tell you more than that just yet!</p><p>Related to that I have finally convinced my wife that I need her in the company too, to head up our research &#8220;department&#8221; (she&#8217;s a Ph. D. in criminology/sociology). While she will continue to teach and do research at <a\nhref=\"http://www.studyatavans.com/en/home\">Avans</a>, she will also be helping us out with a research project, for which an intern will be starting soon as well.</p><p>One more thing&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress/video-seo/\">Video SEO</a>! It&#8217;s like, ready. We&#8217;re hard at work preparing documentation and the necessary infrastructure, but the plugin will go on sale within the next few weeks.</p><p>That&#8217;s it for now, enjoy the new design and make sure you subscribe to the newsletter so we can keep you up to date.</p><p><a\nhref=\"http://yoast.com/redesign-and-more/\">Redesign and more :)</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/Dzq5aIAuyBM\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/redesign-and-more/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"85\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-redesign-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn.yoast.com/wp-content/uploads/2012/08/yoast-redesign.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"yoast redesign\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn3.yoast.com/wp-content/uploads/2012/08/yoast-redesign-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://yoast.com/redesign-and-more/#utm_source=rss&utm_medium=rss&utm_campaign=redesign-and-more\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:14:\"              \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Tag Optimization for WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/99yY97SLdX4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://yoast.com/optimizing-tags/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Jul 2012 14:51:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45845\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:769:\"<p>In our website reviews we regularly encounter websites who&#8217;ve got just as many tags as posts, or 20,000 posts and 5,000 tags. This is undesirable as it means you&#8217;re not using tags to relate your posts together, which is what you should do. We usually tell them to optimize their tags but that&#8217;s easier to&#8230;</p><p><a\nhref=\"http://yoast.com/optimizing-tags/\">Tag Optimization for WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4501:\"<p>In our <a\nhref=\"http://yoast.com/hire-me/website-review/\">website reviews</a> we regularly encounter websites who&#8217;ve got just as many tags as posts, or 20,000 posts and 5,000 tags. This is undesirable as it means you&#8217;re not using tags to relate your posts together, which is what you should do. We usually tell them to optimize their tags but that&#8217;s easier to say than do. Deleting them is easy, but that&#8217;s not a solution. What you <em>should</em> be doing is merging multiple tags into one, adding more posts to a tag or delete &amp; redirect them to your homepage.</p><p>That&#8217;s not something you want to do manually, as it&#8217;s a lot of work. That&#8217;s why I built a tool called the Term Optimizer. This tool helps you find tags or other taxonomy terms that are used only once, or even less, and allows you to merge them, redirect them, etc.</p><h2>Optimize your WordPress Tags with the Term Optimizer</h2><p>It&#8217;s simple, once you&#8217;ve bought the file, you place it in your WordPress root directory, it needs to have <em>wp- load.php</em> in the same directory. You then open the URL and you&#8217;ll be seeing an interface like this (click for larger version):</p><p><a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast.png\"><img\nclass=\"alignnone size-large wp-image-45853\" title=\"Easy Tag Optimization with Term Optimizer by Yoast\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-590x533.png\" alt=\"Easy Tag Optimization with Term Optimizer by Yoast\" width=\"580\" height=\"523\" /></a></p><p>By default it&#8217;ll search for all tags that are used less than 4 times. As you can see, there&#8217;s a checkbox before each post. If you check them and use the drop down in the top, you can choose from several actions:</p><p><img\nclass=\"aligncenter size-full wp-image-45855\" title=\"With selected tags, do the following: merge, delete &amp; redirect, shows posts with term, search &amp; tag\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/with-selected-do.png\" alt=\"With selected tags, do the following: merge, delete &amp; redirect, shows posts with term, search &amp; tag\" width=\"372\" height=\"133\" /></p><p>If you choose merge and selected, you&#8217;ll be presented with a second screen that allows you to choose the tag you want to merge these tags with. Once that&#8217;s done, if your .htaccess file is writeable, the tool will automatically add the redirect lines to your .htaccess file.</p><p>Pressing delete will do something similar, you&#8217;ll be able to redirect to the homepage, to a category or to a custom URL:</p><p><img\nclass=\"aligncenter size-full wp-image-45849\" title=\"Delete &amp; redirect tag\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag.png\" alt=\"Delete &amp; redirect tag\" width=\"312\" height=\"199\" /></p><p>This allows you to optimize your tags with only a few minutes / hours work, instead of having to get a developer to do all this work for you.</p><h2>Quickly Adding Tags to Posts</h2><p>Sometimes you realize that you should have created a certain tag and it&#8217;s now a lot of work to do that through the interface. With the term optimizer you can do that quite simply (click for larger image):</p><p><a\nclass=\"thickbox\" href=\"http://cdn3.yoast.com/wp-content/uploads/2012/07/search-tag.png\"><img\nclass=\"aligncenter size-large wp-image-45860\" title=\"Search &amp; Tag posts\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/07/search-tag-590x632.png\" alt=\"Search &amp; Tag posts\" width=\"580\" height=\"621\" /></a></p><h2>Buy this Tool, start Optimizing your Tags Now!</h2><p>We&#8217;ll be making this available to our past website review customers who need it for free, if you&#8217;re not a website review customer but just want to clean up your tags or other terms, you can buy it now:</p><div\nclass=\"aligncenter\"><a\nclass=\"button\" href=\"http://gum.co/vyvF\">Buy Term Optimizer</a></div><p><a\nhref=\"http://yoast.com/optimizing-tags/\">Tag Optimization for WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/99yY97SLdX4\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://yoast.com/optimizing-tags/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"86\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:4:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:75:\"http://cdn.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"Easy Tag Optimization with Term Optimizer by Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/Term-Optimizer-by-Yoast-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:68:\"http://cdn.yoast.com/wp-content/uploads/2012/07/with-selected-do.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:99:\"With selected tags, do the following: merge, delete & redirect, shows posts with term, search & tag\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/with-selected-do-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:72:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:21:\"Delete & redirect tag\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:80:\"http://cdn2.yoast.com/wp-content/uploads/2012/07/delete-redirect-tag-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn3.yoast.com/wp-content/uploads/2012/07/search-tag.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:18:\"Search & Tag posts\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/07/search-tag-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://yoast.com/optimizing-tags/#utm_source=rss&utm_medium=rss&utm_campaign=optimizing-tags\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:14:\"              \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"Twitter Cards, Open Graph & Social Meta Data\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/QeKlh469Q54/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/twitter-cards/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 16 Jun 2012 06:22:25 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:9:\"OpenGraph\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45800\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:788:\"<p>Two days ago, Twitter introduced a new system called Twitter Cards (see their docs). It allows site owners to enhance the expanded tweets Twitter creates for their site, much in the same was as  OpenGraph tags give site owners the chance to determine what their posts &#38; pages will look like when shared on Facebook. In&#8230;</p><p><a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards, Open Graph &#038; Social Meta Data</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5576:\"<p><a\nhref=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary.png\"><img\nclass=\"alignright size-medium wp-image-45801\" title=\"Example Twitter Card\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-300x156.png\" alt=\"Example Twitter Card\" width=\"300\" height=\"156\" /></a>Two days ago, Twitter <a\nhref=\"https://dev.twitter.com/blog/twitter-cards\">introduced</a> a new system called Twitter Cards (see <a\nhref=\"https://dev.twitter.com/docs/cards\">their docs</a>). It allows site owners to enhance the expanded tweets Twitter creates for their site, much in the same was as  OpenGraph tags give site owners the chance to determine what their posts &amp; pages will look like when shared on Facebook. In fact, Twitter chose to fall back to OpenGraph data when their specific tags aren&#8217;t being used, just as Google+ does.</p><p>A while back Alex posted about <a\nhref=\"http://yoast.com/facebook-open-graph-protocol/\">OpenGraph</a> here and users of my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> will have noticed that quite some development went into (and actually still goes into) the OpenGraph settings of that plugin. With this change, that development has been worth while even more. Google+, Facebook and Twitter now all use the basic OpenGraph tags like og:url, <code>og:description</code>, <code>og:title</code> and <code>og:image</code>.</p><p>This means that for a full Twitter Cards implementation, you only really need to add three lines to your site. For instance for every post <a\nhref=\"http://yoast.com/author/michiel/\">Michiel</a> writes on this site, we&#8217;d need to add this:</p><pre class=\"brush: xml; title: ; notranslate\">&lt;meta name=&quot;twitter:card&quot; value=&quot;summary&quot;&gt;\n&lt;meta name=&quot;twitter:site&quot; value=&quot;@yoast&quot;&gt;\n&lt;meta name=&quot;twitter:creator&quot; value=&quot;@michielheijmans&quot;&gt;</pre><p>All the other data would be taken from the OpenGraph metadata that&#8217;s already there. When I noticed this, I realized that the Twitter Card implementation for my SEO plugin would be a breeze; so I went ahead and build it. I&#8217;m currently waiting for access to their beta so I can test it, but the implementation is mostly done. It&#8217;ll add a Twitter contact field to every user&#8217;s profile using the <a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">method I wrote about a few days ago</a>. Next to that it&#8217;ll allow you to set a site Twitter account and check a box to say you want to include the data, that&#8217;s it. If you want to have a play, the code is already in the WordPress SEO trunk, so you can download it from the <a\nhref=\"http://wordpress.org/extend/plugins/wordpress-seo/developers/\">developers page</a>.</p><h2>What Twitter Cards mean for OpenGraph</h2><p>As you&#8217;ll understand, Twitter Cards made OpenGraph even more important than it already was. No site on the web should be without the basic OpenGraph meta data anymore. Microsoft recently announced <a\nhref=\"http://blogs.msdn.com/b/ie/archive/2012/05/14/sharing-links-from-ie10-on-windows-8.aspx\">suport for OpenGraph in IE10</a> in Windows 8 as well, which just adds another reason.</p><p>It makes sense too: the OpenGraph protocol is relatively easy yet allows for a bit more than just a meta description and title tag. So go forth and implement OpenGraph!</p><h2>Merge it all into one standard</h2><p>There are some things that obviously need to be worked on though. The fact that Twitter requires the <code>twitter:card</code> meta tag sort of annoys me, as it seems to me they could have just mapped the <code>og:type</code> meta tag for that, which would make implementation even easier. The same goes for the <code>og:url</code> meta tag, Facebook falls back to the <code>rel=canonical</code> element when it&#8217;s there and there is no <code>og:url</code> element, I&#8217;m hoping Twitter will do the same but they haven&#8217;t specified it yet.</p><p>In the <a\nhref=\"https://www.facebook.com/groups/opengraph/\">Facebook group</a> that discusses the Open Graph Protocol I already saw <a\nhref=\"https://www.facebook.com/groups/opengraph/permalink/447342028623970/\">Tantek Çelik say</a> what I was thinking:</p><blockquote><p>og:&#8230; twitter:&#8230; &#8211; it&#8217;s like vendor prefixes for meta tags! looks like a good opportunity to create a microformat based on commonalities among all this vendor-specific work.</p></blockquote><p>All I can say is: yes! Hell yes! Because before you know it, Pinterest will create some meta tags too, StumbleUpon will follow and we&#8217;ll have even more code spaghetti in the <code>&lt;head&gt;</code>s of our pages.</p><p>For now though, I like what Twitter did with their Twitter Cards change, here&#8217;s to hoping I get into the beta soon.</p><p><strong>Update September 5th, 2012:</strong> it now works for yoast.com! Here are some <a\nhref=\"http://yoast.com/twitter-cards-in-action/\">more thoughts on the topic</a>.</p><p><a\nhref=\"http://yoast.com/twitter-cards/\">Twitter Cards, Open Graph &#038; Social Meta Data</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/QeKlh469Q54\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"http://yoast.com/twitter-cards/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"35\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/example-card-web-summary.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Example Twitter Card\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:84:\"http://cdn.yoast.com/wp-content/uploads/2012/06/example-card-web-summary-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:88:\"http://yoast.com/twitter-cards/#utm_source=rss&utm_medium=rss&utm_campaign=twitter-cards\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:10;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"User Contact Fields in WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/gHUBwi4FUAk/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:56:\"http://yoast.com/user-contact-fields-wordpress/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Jun 2012 08:00:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:5:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Facebook\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:6:\"Google\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:7:\"Twitter\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"http://yoast.com/?p=1593\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:778:\"<p>WordPress comes with a &#8220;default&#8221; set of user contact fields, which has always looked random to me: AIM, Yahoo IM and Jabber / Google Talk, instead of what I&#8217;d want to have there: Twitter, Facebook and Google+. A while back I got frustrated enough to have a look at how this was actually dealt with&#8230;</p><p><a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">User Contact Fields in WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3157:\"<p>WordPress comes with a &#8220;default&#8221; set of user contact fields, which has always looked random to me: AIM, Yahoo IM and Jabber / Google Talk, instead of what I&#8217;d want to have there: Twitter, Facebook and Google+. A while back I got frustrated enough to have a look at how this was actually dealt with in the backend of WordPress, and fix it, so in WordPress 2.9 an API was added as a result of ticket <a\nhref=\"http://core.trac.wordpress.org/ticket/10240\">#10240</a>.</p><p>This change allowed for developers to add user contact fields in a very simple way. The example code below adds Twitter and removes Yahoo IM, and yes, this is all the code that&#8217;s needed to do it:</p><pre class=\"brush: php; title: ; notranslate\">function add_twitter_contactmethod( $contactmethods ) {\n  // Add Twitter\n  if ( !isset( $contactmethods[\'twitter\'] ) )\n    $contactmethods[\'twitter\'] = \'Twitter\';\n\n  // Remove Yahoo IM\n  if ( isset( $contactmethods[\'yim\'] ) )\n    unset( $contactmethods[\'yim\'] );\n\n  return $contactmethods;\n}\nadd_filter( \'user_contactmethods\', \'add_twitter_contactmethod\', 10, 1 );</pre><p>Easy does it, right? Retrieving the user contact field isn&#8217;t much harder either, for example, if you&#8217;re on a singular page, use the following code:</p><pre class=\"brush: php; title: ; notranslate\">if ( is_singular() ) {\n  global $post;\n  $twitter = get_the_author_meta( \'twitter\', $post-&gt;post_author );\n}</pre><p>And there you have it! My <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> uses this exact method to add a Google+ profile field for users to be used in conjunction with the <a\nhref=\"http://yoast.com/highlighting-wordpress-authors-search/\">author highlighting</a> features of Google. If you&#8217;d want to echo the Google+ user contact field that plugin creates, do the following:</p><pre class=\"brush: php; title: ; notranslate\">if ( is_singular() ) {\n  global $post;\n  the_author_meta( \'googleplus\', $post-&gt;post_author );\n}</pre><p>As you can see this uses <code>the_author_meta</code> instead of <code>get_the_author_meta</code>. The <code>$post</code> global and the <code>$post-&gt;post_author</code> reference would strictly speaking not even be needed as they&#8217;re called from the global otherwise within the function, but this might prevent issues with retrieving the wrong user contact fields.</p><p>That&#8217;s it! Now you can add and remove user contact fields as you wish. You can do this in your theme&#8217;s <em>functions.php</em> or in a plugin, be sure to add the <code>isset</code> code around it to prevent notices though!</p><p><a\nhref=\"http://yoast.com/user-contact-fields-wordpress/\">User Contact Fields in WordPress</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/gHUBwi4FUAk\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://yoast.com/user-contact-fields-wordpress/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"20\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:120:\"http://yoast.com/user-contact-fields-wordpress/#utm_source=rss&utm_medium=rss&utm_campaign=user-contact-fields-wordpress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:11;a:6:{s:4:\"data\";s:17:\"                 \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress SEO 1.2 – Major Upgrade\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/9gwcWupQ9Is/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:44:\"http://yoast.com/wordpress-seo-1-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Jun 2012 13:11:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45751\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:751:\"<p>My WordPress SEO plugin has been updated to 1.2. A few weeks back I did a series of bug fix updates and while doing that I noticed there where things that were really bugging me in the plugin. Everybody seemed to focus on the settings and hardly anyone was working with the snippet preview and&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-seo-1-2/\">WordPress SEO 1.2 &#8211; Major Upgrade</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8046:\"<p>My WordPress SEO plugin has been updated to 1.2. A few weeks back I did a series of bug fix updates and while doing that I noticed there where things that were <em>really</em> bugging me in the plugin. Everybody seemed to focus on the settings and hardly anyone was working with the snippet preview and the page analysis functionality, in my opinion the most important pieces of the plugin. This update will try and gently push you to use that functionality more.</p><p>Next to that, I also did a major overhaul of the two most important settings pages, so let&#8217;s discuss these changes first:</p><h2>The new SEO settings pages</h2><p>The plugin used to have a &#8220;Titles&#8221; and an &#8220;Indexation&#8221; page. That was confusing as the titles page also covered the meta descriptions and had pieces for each (custom) post type and (custom) taxonomy and the Indexation page had other settings for these same post types and taxonomies. So I decided to merge them into one and divide them into tabs for the separate sections.</p><p>These sections now look as follows:</p><p><img\nclass=\"alignnone size-full wp-image-45755\" title=\"Titles Meta settings\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings.png\" alt=\"Titles Meta settings\" width=\"580\" height=\"631\" /></p><p>And the section for post types:</p><p><img\nclass=\"alignnone size-full wp-image-45756\" title=\"titles meta settings for post types\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types.png\" alt=\"titles meta settings for post types\" width=\"580\" height=\"502\" /></p><p>As you can see, they&#8217;re much cleaner. Both post types and taxonomies can now be noindex, followed straight from this interface as well, with the option to override the global setting on a per post or per term (eg. a tag or category) basis.</p><h2>Rel=&#8221;author&#8221;</h2><p>As I mentioned in my previous post about <a\nhref=\"http://yoast.com/push-rel-author-head/\">rel=&#8221;author&#8221; through your head</a>, this feature is now in WordPress SEO 1.2. Simply go to your author profile and fill your Google+ URL and it&#8217;ll be added to each post automagically.</p><h2>Default Settings</h2><p>The WordPress SEO plugin until now always lacked proper default settings. It had them but it didn&#8217;t show them to the user in the titles section and it didn&#8217;t have them for various other sections. While there&#8217;s still more work to do with guiding people to get the right settings, the plugin now sets defaults that should work well for 99% of sites on install.</p><p>This also means the plugin, when freshly installed, will now automatically enable XML Sitemaps and will detect automatically whether force rewrite needs to be enabled or not. That should save me some support headaches.</p><p>But, as I said, those sections aren&#8217;t really that important. This bit is:</p><h2>The Snippet Preview &amp; Focus keyword</h2><p>An enormous amount of bugs have been fixed in the snippet preview and the focus keyword functionality. Most of them are related to non-ascii characters and languages such as Russian and Arabian, but others involve keywords with dollar signs or even simple dashes. &#8220;<a\nhref=\"http://yoast.nl/seo-trainingen/in-company-seo-training/\">In-company SEO training</a>&#8221; for instance will now be properly recognized as a focus keyword.</p><p>The bolding of keywords in the snippet preview has also been fixed for all cases I knew went wrong. If you still have issues, be sure to let me know through the forums; but I fully expect this release to fix most of them.</p><h2>The Page Analysis functionality</h2><p>When I introduced this functionality in May 2011 I thought it was the best thing since sliced bread, but as I said, I couldn&#8217;t get enough people to use it properly. Linkdex, who contributed the original code, always calculated a &#8220;score&#8221; for each page based on that code and I had decided to not use that score. The reason I left it out was simple: I didn&#8217;t want people to optimize for that last percent.</p><p>For this release, I decided it was time to re-think that approach and come up with something better. Now, each post, page or other post type will get a &#8220;score&#8221;, but there are only 4 options:</p><ul><li>bad (red)</li><li>poor (orange)</li><li>ok (yellow)</li><li>good (green)</li></ul><p>They look as follows:</p><p><img\nclass=\"aligncenter size-full wp-image-45754\" title=\"Score buttons\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons.png\" alt=\"Score buttons\" width=\"164\" height=\"19\" /></p><p>This score is shown inside the publish box:</p><p><img\nclass=\"aligncenter size-full wp-image-45752\" title=\"SEO Score shown inside the publish box\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box.png\" alt=\"SEO Score shown inside the publish box\" width=\"288\" height=\"96\" /></p><p>But, more importantly, it&#8217;s also shown in the overview of posts and pages, alongside other key SEO info (click for large version):</p><p><a\nclass=\"thickbox\" href=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview.png\"><img\nclass=\"aligncenter size-large wp-image-45753\" title=\"SEO Score in the pages overview\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview-590x231.png\" alt=\"SEO Score in the pages overview\" width=\"580\" height=\"227\" /></a></p><p>As you can see, you can show the SEO score, the focus keyword, the meta description and the title; and you have the ability to sort by the first three of those values. This makes it easy to find posts that don&#8217;t have a focus keyword or have a low SEO score. You can also easily disable those columns that you&#8217;d rather not see. Within the posts overview, there are two colors for posts that aren&#8217;t a score. Grey means the post has no focus keyword and thus no score; blue means the post is set to noindex, so the score doesn&#8217;t matter.</p><h2>Questions and Answers about this release</h2><ul><li><strong>Why is this 1.2 and not 2.0?</strong><br\n/> I&#8217;ve decided my WordPress SEO plugin will follow the same version numbering as WordPress, so each point release is a major version increase. This prevents version number inflation so we don&#8217;t have WordPress SEO 25 in 4-5 years time.</li><li><strong>Will all my settings be saved when I upgrade?</strong><br\n/> Yes. But it won&#8217;t hurt you to go through all your settings and check whether you&#8217;re still doing what&#8217;s best for you. It won&#8217;t force the new defaults on you if you&#8217;ve already got the plugin installed, but there&#8217;s a button you can push if you want it to.</li><li><strong>Does this version do <em>X</em>?</strong><br\n/> It might. Why not download it and see for yourself? If it doesn&#8217;t, open a thread in the forums and let&#8217;s talk about it. Be warned though, I refuse most feature requests.</li><li><strong>You removed the setting for X, how can I change that now?</strong><br\n/> First of all, I tend to remove stuff for a good reason. Think about why I did that and see if you really need to change it. If you do, there&#8217;s a good chance the <a\nhref=\"http://yoast.com/wordpress/seo/api-docs/\">WordPress SEO API</a>, which has a ton of actions and filters added in this release, will allow you to change it programmatically.</li></ul><p>That&#8217;s it! Go and play with it and let me know what you think about this upgrade in the comments!</p><p><a\nhref=\"http://yoast.com/wordpress-seo-1-2/\">WordPress SEO 1.2 &#8211; Major Upgrade</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/9gwcWupQ9Is\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://yoast.com/wordpress-seo-1-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"369\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:5:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:73:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Titles Meta settings\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/Titles-Meta-settings-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:76:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"titles meta settings for post types\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:83:\"http://cdn.yoast.com/wp-content/uploads/2012/06/titles-metas-post-types-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Score buttons\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/score_buttons-125x19.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:74:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"SEO Score shown inside the publish box\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:81:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-publish-box-125x96.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:77:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"SEO Score in the pages overview\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:85:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/seo-score-pages-overview-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:96:\"http://yoast.com/wordpress-seo-1-2/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-seo-1-2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:12;a:6:{s:4:\"data\";s:16:\"                \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"Push rel=”author” through your head\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/Aq4UeMKt4bQ/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/push-rel-author-head/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 08 Jun 2012 12:36:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:4:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:17:\"WordPress Plugins\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:13:\"WordPress SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45687\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:848:\"<p>No this title wasn&#8217;t a pun. It&#8217;s dead serious. My buddy Arjan discovered yesterday that Google is now allowing rel=&#8221;author&#8221; markup through a &#60;link&#62; element in the head of your site. This makes adding rel=&#8221;author&#8221; to your site properly a lot easier, and allows me to add it to my WordPress SEO plugin. The rel=&#8221;author&#8221; link&#8230;</p><p><a\nhref=\"http://yoast.com/push-rel-author-head/\">Push rel=&#8221;author&#8221; through your head</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3833:\"<p><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\"><img\nclass=\"alignright size-full wp-image-45689\" title=\"rel=author in action\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\" alt=\"rel=author in action\" width=\"200\" height=\"102\" /></a>No this title wasn&#8217;t a pun. It&#8217;s dead serious. My buddy <a\nhref=\"http://www.uprise.nl/\">Arjan</a> discovered yesterday that Google is now allowing <a\nhref=\"http://yoast.com/wordpress-rel-author-rel-me/\">rel=&#8221;author&#8221;</a> markup through a &lt;link&gt; element in the head of your site. This makes adding rel=&#8221;author&#8221; to your site properly a lot easier, and allows me to add it to my WordPress SEO plugin.</p><h2>The rel=&#8221;author&#8221; link element</h2><p>So the element should look like this:</p><pre>&lt;link rel=\"author\" href=\"<a href=\"https://plus.google.com/115369062315673853712/posts\" target=\"_blank\">https://plus.google.com/115369062315673853712/posts</a>\"/&gt;</pre><p>Where the Google+ link should link to your Google+ profile. It&#8217;s really that simple. I reached out to Google  to get confirmation that this would work and would keep working and they confirmed. So making author highlights work is now a three step process:</p><h2>Getting author highlights</h2><p>It&#8217;s a simple three step process:</p><ol><li>Add the above link to the &lt;head&gt; of the URLs you&#8217;d like your face to appear on.</li><li>On your Google+ profile, you need to make sure to have a link pointing back to the site you want the author highlight to work on.</li><li>Make sure your +1&#8242;s are public on your Google+ profile or it won&#8217;t work.</li></ol><p>Once you&#8217;ve done the above, use the <a\nhref=\"http://www.google.com/webmasters/tools/richsnippets\">rich snippet testing tool</a> to confirm it works.</p><h2>rel=&#8221;author&#8221; in my WordPress SEO plugin</h2><p>This already works in the development version of my WordPress SEO plugin, you can download that from the <a\nhref=\"http://wordpress.org/extend/plugins/wordpress-seo/developers/\">developers page</a>. That version has a bucket load of improvements and some new features, so you might want to test that anyway, it&#8217;ll probably be released early next week.</p><p>If you&#8217;re looking for it in the development version, there are two spots: on each users profile page there&#8217;s a new Google+ contact method:</p><p\nstyle=\"text-align: center;\"><img\nclass=\"size-full wp-image-45693 aligncenter\" title=\"Google Plus for rel=&quot;author&quot;\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile.png\" alt=\"Google Plus for rel=&quot;author&quot;\" width=\"553\" height=\"285\" /></p><p>When a user fills this out, the link will automatically be added to each post or page he/she publishes. On the &#8220;new&#8221; Title&#8217;s &amp; Meta&#8217;s settings page under SEO, you&#8217;ll find a drop down which allows you to choose which author should be shown on the frontpage:</p><p><img\nclass=\"wp-image-45694 alignnone\" title=\"rel=author drop down for homepage\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/06/home-rel-author.png\" alt=\"rel=author drop down for homepage\" width=\"580\" /></p><p>That&#8217;s it. Let me know whether this works for you!</p><p><a\nhref=\"http://yoast.com/push-rel-author-head/\">Push rel=&#8221;author&#8221; through your head</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/Aq4UeMKt4bQ\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/push-rel-author-head/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"132\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/06/rel-author-125x102.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/rel-author.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"rel=author in action\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:70:\"http://cdn.yoast.com/wp-content/uploads/2012/06/rel-author-125x102.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:71:\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Google Plus for rel=”author”\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:79:\"http://cdn.yoast.com/wp-content/uploads/2012/06/google-plus-profile-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:68:\"http://cdn2.yoast.com/wp-content/uploads/2012/06/home-rel-author.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"rel=author drop down for homepage\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:76:\"http://cdn3.yoast.com/wp-content/uploads/2012/06/home-rel-author-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/push-rel-author-head/#utm_source=rss&utm_medium=rss&utm_campaign=push-rel-author-head\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:13;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:29:\"Common sense for your website\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/6FCA-xZElVg/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://yoast.com/common-sense/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 06 Jun 2012 13:34:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:22:\"Usability & Conversion\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45649\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:740:\"<p>I am the last one to tell a website owner that his job is to become the local SEO or usability expert. That would be unrealistic. Why should a constructor learn SEO? He should not. Why should a gardner know all about user experience? He should not. But how about applying some common sense to&#8230;</p><p><a\nhref=\"http://yoast.com/common-sense/\">Common sense for your website</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Michiel Heijmans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:8071:\"<p>I am the last one to tell a website owner that his job is to become the local SEO or usability expert. That would be unrealistic. Why should a constructor learn SEO? He should not. Why should a gardner know all about user experience? He should not. But how about applying some common sense to your website?</p><p>Let&#8217;s go over an imaginary website, top to bottom:</p><h2>Browser</h2><p>Your browser has a couple of spots where your &lt;title&gt; is shown, like in the upper left and on a tab. That means your page title should start with he main subject of the page, not your site name. If it would start with your site name, all tabs would read the same title.</p><p>Next to that, you want your browser to display the website as quick as possible, meaning you should make your website as fast as possible. Sure, browser cache and compression might be way over your head, but how about not using a template with tables and combining your CSS and JavaScript files? Or lowering the number of CSS and JavaScript files by losing all &#8216;extra&#8217; WordPress plugins, assuming your site is in WordPress of course.</p><h2>Header</h2><p>Do your really think putting all these items in your header help visitors or Google:</p><ul><li>RSS, Facebook, Twitter, Google+</li><li>Telephone number</li><li>Additional menu for About Us, Privacy Policy, Contact, Directions, Terms &amp; Conditions</li><li>Subscription form for email newsletter</li><li>Banner for your own or even worse other company&#8217;s products</li><li>Quality Marks</li><li>etc</li></ul><p>And all that in the first 100px of your website. Squeezed together and made to be skipped anyway. That header area should contain only the necessary, all other items should be in a sidebar or footer area. If you want people to call you, list your phone number. Make it large, but no larger than your logo. If you are the best painter in Maine, make that statement in the header. No need for all the other fuzz.</p><p>With your header comes the menu (in most cases). If you would list 30 items in the menu, do you think that would add focus to your website or do you think just using six items would guide your visitor more? Consider creating a submenu and add that structure to your breadcrumbs as well.</p><p>So far I have not mentioned anything strange or difficult to implement, right? It&#8217;s all common sense and you have thought at least 10 times &#8220;I know that already&#8221;. So why are not all websites set up with these basics? Why is there so much crap on the web?</p><h2>Content</h2><p>Your page content should contain at least 300 words. That has a simple reason: would your page be a great source for the topic or keyword you want to rank for when it would only contain 50 words? Is that all there is to say about that keyword? I don&#8217;t believe that, you don&#8217;t believe that and Google does not believe that. There should be a significant amount of content for your page to be considered a great source of information.</p><p>Of course you will write some posts or pages that are much shorter, like your contact page, but do your really want to rank that page? No, not on most websites. Don&#8217;t go crazy over this on pages like that, that&#8217;s not worth the effort. Get them on your site with other pages and guide them to your contact form.</p><p>An easy way to do that is by using <a\ntitle=\"Where do you want me to click?\" href=\"http://yoast.com/call-to-action/\">a call-to-action</a>. Make that call-to-action stand out by using colors that are not overused in your design or use a much larger font. Surround the call-to-action with enough whitespace. If you are adding your fourth call-to-action, please realize that that again is killing all focus on the website. Stick to one and let the content do the rest.</p><p>Focus in your content can be achieved by adding subheadings to your text that should be structured in (again) a logical matter, pretty much the same way you should set up a Word document:</p><ul><li>H1<ul\nstyle=\"margin-bottom: 0;\"><li>H2<ul\nstyle=\"margin-bottom: 0;\"><li>H3</li><li>H3</li></ul></li><li>H2</li></ul></li></ul><p>That also means one H1 per page, being the site name on the homepage and the page title on the other pages.</p><p>I think we all agree nowadays that reading on a computer screen is not as pleasant as reading text on paper. But we should make things as convenient as possible: make short sentences and even more important, create short paragraphs. I&#8217;d like to create paragraphs that are four to eight lines long and I hope this is a nice read ;)</p><p>In these paragraphs you should link to your own pages as well as to other websites. The great thing about these links to your own pages is that these links are really valuable as they are surrounded with relevant, related content. Next to that, you can easily use your keywords of choice in the anchor text. Unfortunately most people seem to think that these links should only go to other websites. A regrettable misunderstanding.</p><h2>Sharing</h2><p>If you write great content.. Let me rephrase that: <strong>provided</strong> you write great content, people will be more than willing to tell others about your piece. Of course you should add social sharing buttons below the content. These buttons should not be styled in some fashionable way, but should look like the commonly used share buttons &#8211; see below this post ;) &#8211; for better recognition as sharing buttons.</p><p>I&#8217;d use Facebook, Twitter, Share-by-email and Google+ for all websites, Linkedin for business news / economy related websites and Pinterest only when you have that amazing image in the post that people might want to share. Do not list a share option, just because people you know are using it, but only use those sharing options you think are relevant for your website.</p><p>The fashionable buttons can be used for subscription options, like links to your Facebook profile or your Youtube channel. In most cases, the square icons are used for this, or the round icons you find on yoast.com.</p><h2>Footer</h2><p>This is not a great footer:</p><blockquote><p>© SomewebsiteImade.com. All rights reserved. Reproduction of this content only after written permission.</p></blockquote><p>First: really? Share buttons <em>and</em> telling people they should not use your content on other websites? We actually encountered this in one of the <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">websites we have reviewed</a>.</p><p>Next to that, I think the entire footer should be used for extra contact information (or a small form) and other information that you really want to list on your website like a small link list, perhaps some recent news items and a small category list (max 8 items or so). Not sure about this, but why not throw in some social profiles as well..</p><p>What I really dislike is a footer that has one million links in it. That reduces the value of all other links and all focus on the page.</p><p>So, in conclusion, I think you should not so much focus on hearsay about SEO, but think about what seems logical and makes the most sense. Only when your website makes common sense to you, you should go look for someone that can help you with the not so logical Search Engine and Usability optimization issues ;)</p><h3>Any additions?</h3><p>Common sense is not as easy as it looks for a lot of people. If you have any comments or additions to the list above, please drop me a line in the comments!</p><p><a\nhref=\"http://yoast.com/common-sense/\">Common sense for your website</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/6FCA-xZElVg\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://yoast.com/common-sense/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"43\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://yoast.com/common-sense/#utm_source=rss&utm_medium=rss&utm_campaign=common-sense\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:14;a:6:{s:4:\"data\";s:13:\"             \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:32:\"Why should I visit your website?\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/um_-AjHfIe4/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/introductory-content/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 28 May 2012 19:18:17 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Usability & Conversion\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45638\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:775:\"<p>One thing we often recommend in our site analyses, is the use of introductory content on a homepage. We get quite a lot response on that, with people being unclear how to do that. &#8220;Where should I put that content?&#8221; or &#8220;How long should that content be?&#8221; or the one I dislike the most: &#8220;I&#8230;</p><p><a\nhref=\"http://yoast.com/introductory-content/\">Why should I visit your website?</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:16:\"Michiel Heijmans\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:5554:\"<p>One thing we often recommend <a\ntitle=\"Our website reviews deal with SEO, usability and more\" href=\"http://yoast.com/hire-me/website-review/\">in our site analyses</a>, is the use of introductory content on a homepage. We get quite a lot response on that, with people being unclear how to do that. &#8220;Where should I put that content?&#8221; or &#8220;How long should that content be?&#8221; or the one I dislike the most: &#8220;I don&#8217;t need that&#8221;.</p><h2>The main goal of introductory content</h2><p>I can not emphasize this enough. Introductory content is meant for your most valued visitors: us people and Google. Introductory content helps those visitors to grasp the leitmotif of your website. It also tells the visitor why you are the source to turn to, whether or not in combination with the title of your website.</p><p>There are two main ways to list that introductory content:</p><h3>The right slogan or tagline as introductory content</h3><p><img\nclass=\"alignright size-full wp-image-45640\" title=\"Chicago Tribune logo\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/chicago-tribune.png\" alt=\"Chicago Tribune logo: notice the caption\" width=\"318\" height=\"79\" />If only things where always this simple. <a\ntitle=\"Chicago Tribune\" href=\"http://www.chicagotribune.com/\" rel=\"nofollow\">Chicago Tribune</a> has a small caption below the logo that tells all: We are a Chicago based news provider bringing you all the latest news and we are doing this for such a long time you can consider us a trustworthy source.</p><p>The Chicago Tribune can do that this way and get away with it. But if you are a local news agency that brings mainly local news, you might need a different approach. Just the tagline might not be enough.</p><p>Suppose you are running the website of that more local newsletter, for instance the <a\ntitle=\"Local newspaper for Stowe\" href=\"http://www.stowetoday.com/\" rel=\"nofollow\">Stowe Today</a>. I really love these kind of websites, since they seem to be made with more care and passion than most websites. But it totally lacks introductory content. You have to know Stowe Today to know what the website is about.</p><p>A huge number of inbound links is telling Google what the Chicago Tribune is about, but I can&#8217;t imagine Stowe Today benefitting from such a number of in-links. The website will have to tell Google itself what it is about. It&#8217;s not.</p><p>The website starts off with a lot of (local) banner ads and some featured articles, but nowhere on that page it tells me &#8216;bringing you local news from Stowe, including human interest stories, upcoming events and more&#8217;. If I would not have known better, it might also have been a blog from a very enthusiastic local student, earning an extra buck this way. I also checked the <a\ntitle=\"About Sowe Today\" href=\"http://www.stowetoday.com/site/about/\">About</a>. page of the website, but that only refers to other publications.</p><h3>Adding a few paragraphs as an introduction</h3><p>Most news websites or webshops think they have no space for a few extra paragraphs of introductory content. The website should start with either news or products. I call bullsh*t on that.</p><p>I&#8217;m not a big fan of the somewhat sneaky way the <a\ntitle=\"Hidden introductory content\" href=\"http://www.hypedc.com/\" rel=\"nofollow\">online sneakershop Hypedc.com</a> did this:</p><p><img\nclass=\"aligncenter size-large wp-image-45641\" title=\"Hypedc.com source code\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom-590x215.png\" alt=\"Hypedc.com source code\" width=\"580\" height=\"211\" /><br\n/> As you can see, the introduction is there, but is not shown on the page itself. You are serving that intro to Google, but not to your customers. Why not!?</p><p>But that is just one way. I&#8217;m a much bigger fan of the way <a\ntitle=\"WP Types introductory content\" href=\"http://wp-types.com/\">WP-Types.com</a> is doing this, for instance:</p><p><img\nclass=\"aligncenter size-full wp-image-45642\" title=\"wp-types\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/05/wp-types.png\" alt=\"WP-Types\" width=\"556\" height=\"288\" /></p><p>&#8220;But they just have a couple of products&#8221;. I hear you, that&#8217;s right. But how about the way <a\ntitle=\"Large intro for SurfStitch\" href=\"http://www.surfstitch.com/\" rel=\"nofollow\">SurfStitch</a> is doing this? That&#8217;s actually quite common for (Magento) webshops. List the products first, than the introduction.</p><p>I think that is a pretty good practice, since your products tell a global story and you are able to refine that with the additional introduction below.</p><h3>Your two cents</h3><p>I&#8217;d like to make a bold statement on introductory content for webshops and am looking forward to your opinion on that, as a webdesigner, SEO or customer:</p><blockquote><p>A webshop&#8217;s homepage does not need any overview of products. A great textual introduction works much better.</p></blockquote><p>Looking forward to your thoughts!</p><p><a\nhref=\"http://yoast.com/introductory-content/\">Why should I visit your website?</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/michiel/\">Michiel Heijmans</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/um_-AjHfIe4\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/introductory-content/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"27\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/chicago-tribune-125x79.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:3:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:67:\"http://cdn.yoast.com/wp-content/uploads/2012/05/chicago-tribune.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"Chicago Tribune logo\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:75:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/chicago-tribune-125x79.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:61:\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:22:\"Hypedc.com source code\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:69:\"http://cdn.yoast.com/wp-content/uploads/2012/05/hypedccom-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:61:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/wp-types.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"wp-types\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:69:\"http://cdn3.yoast.com/wp-content/uploads/2012/05/wp-types-125x125.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/introductory-content/#utm_source=rss&utm_medium=rss&utm_campaign=introductory-content\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:15;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"Penguin, Panda, it’s not that black and white..\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/UDijxOyZ450/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:47:\"http://yoast.com/penguin-panda-issues/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 14 May 2012 12:37:38 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45611\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:818:\"<p>We&#8217;re getting quite a few site review requests and SEO consultancy requests recently for people that have been hit by a sudden drop in traffic after the recent Google Penguin update. Because there has been quite some news about Google&#8217;s Penguin update and before that its Panda update, people are blaming those. In our perspective,&#8230;</p><p><a\nhref=\"http://yoast.com/penguin-panda-issues/\">Penguin, Panda, it&#8217;s not that black and white..</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4523:\"<p><a\nhref=\"http://cdn2.yoast.com/wp-content/uploads/2012/05/Yoast_penguin.jpg\"><img\nclass=\"alignright size-medium wp-image-45821\" title=\"Yoast - Penguin update\" src=\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-206x300.jpg\" alt=\"Yoast - Penguin update\" width=\"206\" height=\"300\" /></a>We&#8217;re getting quite a few <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">site review</a> requests and SEO consultancy requests recently for people that have been hit by a sudden drop in traffic after the recent Google Penguin update. Because there has been quite some news about Google&#8217;s Penguin update and before that its Panda update, people are blaming those. In our perspective, whether you&#8217;re blaming Penguin, Panda or another update from Google isn&#8217;t really that interesting if you&#8217;re not an SEO. What matters most is: you&#8217;ve lost traffic, how are you going to get it back?</p><h2>Why you&#8217;d want to know whether the Penguin update caused it</h2><p>The idea is that if you know which update caused your traffic to drop and you know what that update targeted, you only have to fix that specific issue and your rankings will be magically restored. The reality is that it&#8217;s <em>really </em>not that black and white. Quite often now people blame one update, but if we look at the SearchMetrics stats for their domain, they&#8217;ve had a gradual decline over the last few months with a bigger decline in recent weeks. If we based our actions solely on what Penguin update targeted (and that&#8217;s not even really clear yet within the SEO community) we might be missing other issues.</p><p>There were other updates that didn&#8217;t get named by Google in the same way but had a <em>huge</em> impact in some countries. We&#8217;ve seen sites with over-optimized anchor text being hit from the beginning of the year already, but suddenly people now attribute that to Penguin. The end result for you as a site owner: it doesn&#8217;t matter.</p><p>You need to fix <em>all</em> your issues, not just the ones that this specific update &#8220;targets&#8221;.</p><h2>How to get &#8220;your&#8221; traffic back</h2><p>First of all, it&#8217;s not your traffic. It&#8217;s Google&#8217;s traffic. Being mad at Google, or anyone else for that matter, won&#8217;t help you one bit, it&#8217;s Google&#8217;s traffic and they can do what they want with it. So to regain the traffic your website was getting from Google, you need to play by their rules and in all honesty: those rules haven&#8217;t changed all that much over the last 10 years. The only thing that&#8217;s happening is that all the ways people found of bending those rules are slowly breaking.</p><p>Don&#8217;t try and play a game with Google if you don&#8217;t understand what you&#8217;re doing. There are dozens of great blackhats out there whom I respect, but that&#8217;s because they do their own research and they don&#8217;t start complaining publicly when Google catches them. If you have to read about and apply other people&#8217;s tricks, you&#8217;re probably not going to win. As the old saying goes: if you can&#8217;t stand the heat, stay out of the kitchen.</p><p>So how <em>do</em> you get your traffic back? By getting your site re-aligned with Google&#8217;s values. If you&#8217;ve lost in the Panda update or Penguin update and now recently lost a lot of traffic <em>again</em>, Google is sending you a message: your website doesn&#8217;t fit our idea of quality. Fix that. Don&#8217;t try to remove the one or two links that you think might have hurt you.</p><p>Now of course, you&#8217;re more than welcome to <a\ntitle=\"Website Review\" href=\"http://yoast.com/hire-me/website-review/\">order a website review</a> and get our opinion, but please don&#8217;t expect us to come up with a silver bullet. There are no silver bullets in SEO, just a lot of shiny silver drops of sweat, coming from your forehead.</p><p><a\nhref=\"http://yoast.com/penguin-panda-issues/\">Penguin, Panda, it&#8217;s not that black and white..</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/UDijxOyZ450\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:43:\"http://yoast.com/penguin-panda-issues/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"85\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:66:\"http://cdn2.yoast.com/wp-content/uploads/2012/05/Yoast_penguin.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:24:\"Yoast – Penguin update\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:73:\"http://cdn.yoast.com/wp-content/uploads/2012/05/Yoast_penguin-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:102:\"http://yoast.com/penguin-panda-issues/#utm_source=rss&utm_medium=rss&utm_campaign=penguin-panda-issues\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:16;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:30:\"Having a blast at BlueGlass LA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/r_uYdP0kJkU/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://yoast.com/blast-blueglass-la/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 24 Apr 2012 17:18:26 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:10:\"Conference\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45602\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:775:\"<p>I&#8217;m currently sitting in the conference room for BlueGlass LA, listening to Marty Weintraub and finishing my presentation I&#8217;ll be giving this afternoon. Which leads me to the point of this post as I&#8217;m going to try and prove a point, therefore the following video is not really meant for you to watch but for&#8230;</p><p><a\nhref=\"http://yoast.com/blast-blueglass-la/\">Having a blast at BlueGlass LA</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1452:\"<p>I&#8217;m currently sitting in the conference room for <a\nhref=\"http://www.blueglass.com/conferences/la/\">BlueGlass LA</a>, listening to <a\nhref=\"http://www.aimclearblog.com/author/aimclear/\">Marty Weintraub</a> and finishing my presentation I&#8217;ll be giving this afternoon. Which leads me to the point of this post as I&#8217;m going to try and prove a point, therefore the following video is not really meant for you to watch but for me to test something with:</p><p><iframe\nwidth=\"570\" height=\"321\" src=\"http://www.youtube.com/embed/CSMUB1u5VXI?fs=1&#038;feature=oembed\" frameborder=\"0\" allowfullscreen></iframe></p><p>As a side note, BlueGlass LA is probably the best conference I&#8217;ve been to in a while, with a ridiculous line-up of speakers, if you&#8217;re going to go to an internet marketing conference, BlueGlass conferences are seriously among the very best in the US, second only to SEOktoberfest.</p><p><a\nhref=\"http://yoast.com/blast-blueglass-la/\">Having a blast at BlueGlass LA</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/r_uYdP0kJkU\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:41:\"http://yoast.com/blast-blueglass-la/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"4\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:6:\"      \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/CSMUB1u5VXI\";s:8:\"duration\";s:3:\"245\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:5:{s:6:\"player\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:45:\"http://www.youtube-nocookie.com/v/CSMUB1u5VXI\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"BlueGlass LA • Best Online Marketing Conf on the West Coast • Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:93:\"Having a blast at BlueGlass LA with some of the most awesome internet marketers in the world.\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:138:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/blueglass-la-e280a2-best-online-marketing-conf-on-the-west-coast-e280a2-yoast-300x225.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"keywords\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Conference,BlueGlass LA\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:98:\"http://yoast.com/blast-blueglass-la/#utm_source=rss&utm_medium=rss&utm_campaign=blast-blueglass-la\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:17;a:6:{s:4:\"data\";s:11:\"           \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:19:\"Why I dislike Bo.lt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/6OfPelIL784/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://yoast.com/dislike-bolt/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 21 Apr 2012 21:59:41 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Social Media\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45589\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:710:\"<p>When I released my updated WordPress SEO article a few weeks back, my buddy Avinash was kind enough to tweet it. He tweeted it, at first, with a bo.lt link. Bo.lt is a sharing service that allows you to basically make a copy of a page and add some notes or even some changes to&#8230;</p><p><a\nhref=\"http://yoast.com/dislike-bolt/\">Why I dislike Bo.lt</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:4689:\"<p><img\nclass=\"alignright size-full wp-image-45593\" title=\"bo.lt logo\" src=\"http://cdn3.yoast.com/wp-content/uploads/2012/04/bo.lt-logo.jpg\" alt=\"bo.lt logo\" width=\"200\" height=\"200\" />When I released my updated <a\nhref=\"http://yoast.com/articles/wordpress-seo/\">WordPress SEO article</a> a few weeks back, my buddy <a\nhref=\"http://www.kaushik.net/avinash/\">Avinash</a> was kind enough to tweet it. He tweeted it, at first, with a <a\nhref=\"http://bo.lt\">bo.lt</a> link. Bo.lt is a sharing service that allows you to basically make a copy of a page and add some notes or even some changes to the page. The idea is nice, as a webmaster though, I hate it. Let me explain why.</p><p>You see, bo.lt makes a <em>copy</em> of the page at the moment it&#8217;s prepared for sharing, they say they do that because of speed. As Avinash tweets a lot, he probably made that copy a couple of hours before he shared it. This wouldn&#8217;t be so much of an issue if I hadn&#8217;t added stuff to the page in the mean time and fixed a lot of typo&#8217;s. Everyone who&#8217;d use Avinash&#8217;s link wouldn&#8217;t see those changes. And bo.lt decided that for me, without asking me anything, or even worse, giving me the option to opt-out.</p><h2>SEO Impact</h2><p>Surely those bo.lt guys are at least trying to give the rankings for those pages people share through its service their links back? No. They don&#8217;t. Well, not unless you&#8217;re not already adding <code>rel=\"canonical\"</code> elements to your site yourself. Each user has its own subdomain. Avinash&#8217;s subdomain is zqi.bo.lt. As you can <a\nhref=\"http://www.google.com/search?q=site%3Abo.lt+yoast&amp;pws=0\">see for yourself</a>, quite a few of his shared pages are indexed by Google. That shouldn&#8217;t be possible. Bo.lt should add a canonical back to the original page if there isn&#8217;t one in the source already.</p><h2>No Analytics</h2><p>They claim a webmaster gets all his normal stuff, ads and analytics etc. Except that for both Clicky and Google Analytics there are no views measured for that bo.lt link, because Clicky refuses pageviews from other domains and I&#8217;ve filtered those out of Google Analytics to prevent others from rendering my analytics useless (yes, people do try that). So, &#8220;my&#8221; visitors don&#8217;t get the changes I made to the copy, making me look stupid and I can&#8217;t track which visitors those were and where they came from&#8230; At this point, I want out.</p><h2>Opt Out</h2><p>I&#8217;ve gone through their documentation, both normal and for developers, and there simply is no documented way to opt-out. So I decided to dive a bit deeper and figure out which user-agent bo.lt uses. It turns out that they actually <em>do</em> have a <a\nhref=\"http://bo.lt/ua\">page about their user-agent</a>. The next step would normally be simple: add a line to your robots.txt blocking bo.lt. Unfortunately, in my tests, bo.lt never actually retrieved the robots.txt file so they&#8217;re not adhering to the robots.txt protocol. They <em>really</em> should. They&#8217;re taking my content, they&#8217;re not asking for permission and they&#8217;re not allowing me to opt-out. Someone could sue them over that. I&#8217;m just going to request, through this blog post:</p><p><strong>Bo.lt, please add an option to opt my sites out of your service.</strong></p><p>Also, in my opinion, if you&#8217;re using bo.lt, you should probably start considering alternatives.</p><p>Disclaimer: please be aware that I like Avinash a lot and don&#8217;t blame <em>him</em> for anything. He&#8217;s a great guy and an inspiration to a lot of us in the online marketing industry. It&#8217;s the bo.lt service I dislike and I think that after reading this he will switch to something else as well.</p><h2>A &#8220;hard&#8221; out</h2><p>I figured out a &#8220;hard&#8221; way to get out of bo.lt doing its thing, add the following to your <em>.htaccess</em> file:</p><pre class=\"brush: plain; title: ; notranslate\">RewriteBase /\nRewriteEngine on\nRewriteCond %{HTTP_USER_AGENT} bo.lt/ua\nRewriteRule . - [F,L]</pre><p>This will block bo.lt, giving it a &#8220;forbidden&#8221; page.</p><p><a\nhref=\"http://yoast.com/dislike-bolt/\">Why I dislike Bo.lt</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/6OfPelIL784\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"http://yoast.com/dislike-bolt/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"14\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/bo.lt-logo-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:63:\"http://cdn3.yoast.com/wp-content/uploads/2012/04/bo.lt-logo.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"bo.lt logo\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:71:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/bo.lt-logo-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:86:\"http://yoast.com/dislike-bolt/#utm_source=rss&utm_medium=rss&utm_campaign=dislike-bolt\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:18;a:6:{s:4:\"data\";s:12:\"            \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:7:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:27:\"WordPress Stats Infographic\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/RkHT86bonB8/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:42:\"http://yoast.com/wordpress-stats/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Mon, 16 Apr 2012 11:30:37 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:9:\"WordPress\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45554\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:761:\"<p>My Google Analytics plugin recently hit 3 million downloads and my WordPress SEO plugin hit its first million downloads. I thought those stats were cool and I decided to have an infographic made with more WordPress stats and dive in a little bit more and gather some stats that I thought would be interesting. If you&#8230;</p><p><a\nhref=\"http://yoast.com/wordpress-stats/\">WordPress Stats Infographic</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3356:\"<p><div\nclass=\"alignright\"><a\nhref=\"http://pinterest.com/pin/create/button/?url=http%3A%2F%2Fyoast.com%2Fwordpress-stats%2F&media=http%3A%2F%2Fcdn.yoast.com%2Fwp-content%2Fuploads%2F2012%2F04%2Fwordpress-stats-infographic-yoast-full.jpg&description=WordPress+Stats+infographic+by+Yoast\" class=\"pin-it-button\" count-layout=\"vertical\"><img\nborder=\"0\" src=\"//assets.pinterest.com/images/PinExt.png\" title=\"Pin It\" /></a><script type=\"text/javascript\" src=\"//assets.pinterest.com/js/pinit.js\"></script></div>My <a\nhref=\"http://yoast.com/wordpress/google-analytics/\">Google Analytics plugin</a> recently hit 3 million downloads and my <a\nhref=\"http://yoast.com/wordpress/seo/\">WordPress SEO plugin</a> hit its first million downloads. I thought those stats were cool and I decided to have an infographic made with more WordPress stats and dive in a little bit more and gather some stats that I thought would be interesting.</p><p>If you read any blogs in the world, by now you&#8217;ll know <a\nhref=\"http://royal.pingdom.com/2012/04/11/wordpress-completely-dominates-top-100-blogs/\">WordPress dominates the top 100 blogs in the world</a>, <a\nhref=\"http://ma.tt/2012/04/wordpress-and-the-top-100/\">Matt had some interesting comments</a> about that. We&#8217;ve seen more WordPress stats, like <a\nhref=\"http://lorelle.wordpress.com/2012/03/29/wordpress-stats-and-numbers-breaking-their-own-records/\">these by Lorelle</a>. I then started adding more stats on my own.</p><p>I asked <a\nhref=\"http://www.experian.com/hitwise/index.html\">Experian Hitwise</a> to give me some stats about visits to WordPress.org, Drupal.org and Joomla.org in the UK and US, which they did (thanks!). <a\nhref=\"https://www.odesk.com/trends/WordPress\">oDesk</a> and <a\nhref=\"http://www.freelancer.com/hire/Wordpress\">Freelancer.com</a> have some great WordPress stats pages and of course there&#8217;s a bit of info <a\nhref=\"http://wordpress.org/extend/plugins/\">on WordPress</a>.org itself. So, with all of that and some I&#8217;m probably forgetting, <a\nhref=\"http://www.designbysoap.co.uk/design/infographic-design/?utm_source=yoast&amp;utm_medium=post&amp;utm_campaign=wordpress-stats\">Design by Soap</a> made the following infographic for me, I hope you like it, if you do, please share it! (<a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast-full.jpg\">click here for a larger version</a>)</p><h2>WordPress Stats</h2><p><a\nclass=\"thickbox\" href=\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast-full.jpg\"><img\nclass=\"alignnone size-full wp-image-45559\" title=\"WordPress Stats infographic by Yoast\" src=\"http://cdn2.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1.jpg\" alt=\"WordPress Stats infographic by Yoast\" width=\"582\" height=\"3382\" /></a></p><p><a\nhref=\"http://yoast.com/wordpress-stats/\">WordPress Stats Infographic</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/RkHT86bonB8\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:38:\"http://yoast.com/wordpress-stats/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:2:\"57\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:56:\"http://yoast.com//assets.pinterest.com/images/PinExt.png\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"content\";a:2:{i:0;a:6:{s:4:\"data\";s:2:\"  \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:56:\"http://yoast.com//assets.pinterest.com/images/PinExt.png\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:1:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"Pin It\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:3:\"   \";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"url\";s:87:\"http://cdn2.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1.jpg\";s:6:\"medium\";s:5:\"image\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:29:\"http://search.yahoo.com/mrss/\";a:2:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:36:\"WordPress Stats infographic by Yoast\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:4:\"type\";s:4:\"html\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"thumbnail\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"url\";s:94:\"http://cdn.yoast.com/wp-content/uploads/2012/04/wordpress-stats-infographic-yoast1-125x125.jpg\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:92:\"http://yoast.com/wordpress-stats/#utm_source=rss&utm_medium=rss&utm_campaign=wordpress-stats\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:19;a:6:{s:4:\"data\";s:10:\"          \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:6:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:17:\"The ethics of SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:58:\"http://feedproxy.google.com/~r/joostdevalk/~3/YfVDkmGVt78/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:37:\"http://yoast.com/ethics-seo/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 04 Apr 2012 08:29:32 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:3:\"SEO\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:4:\"Spam\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://yoast.com/?p=45531\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:774:\"<p>The type of SEO I help my clients do and promote to you using this blog is often labeled white hat SEO because it stays within Google&#8217;s and other search engines guidelines. Other SEO&#8217;s don&#8217;t care about Google&#8217;s guidelines as much and do what&#8217;s called &#8220;black hat SEO&#8221;. Far too often though, black hat SEO&#8230;</p><p><a\nhref=\"http://yoast.com/ethics-seo/\">The ethics of SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:13:\"Joost de Valk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6527:\"<p>The type of SEO I help my clients do and promote to you using this blog is often labeled white hat SEO because it stays within Google&#8217;s and other search engines guidelines. Other SEO&#8217;s don&#8217;t care about Google&#8217;s guidelines as much and do what&#8217;s called &#8220;black hat SEO&#8221;. Far too often though, black hat SEO is confused with the hacking of sites and the use of other tactics not outside the laws of Google but the laws of our lands. I think it&#8217;s time for me to explain where I stand in this.</p><h2>My background</h2><p>As a former Theology student and as someone raised in the Christian tradition, I have a fairly specific (and in some eyes: stringent) set of ethics. I don&#8217;t work on gambling or porn related sites because of that. I&#8217;m aware that others have different opinions on this and I don&#8217;t judge others when they have other ethics with regards to their work. To each his own. Sometimes though, I draw the line. Among my friends are some of the world&#8217;s best black hat SEO&#8217;s. These are also guys that will <em>never</em> break a law or willfully hurt other people to get their rankings, they just game Google&#8217;s algorithms. I know <a\nhref=\"http://mattcutts.com/blog/\">Matt</a> knows at least some of them and there&#8217;s even a form of &#8220;honor&#8221; among them: he seems to appreciate their ability to outwit their algorithm. Unfortunately not everyone in the SEO &#8220;community&#8221; is that clean: some people <em>are </em>willing to break laws or hurt other people. After the last SES conference in Amsterdam, which I arranged the speakers for, one of the speakers (not the keynote :) ) admitted to me he wouldn&#8217;t mind teaching other people how to hack sites or how to build trojans to gain links. I was too startled to give a proper response but decided later that day that I would never allow him back on a conference I arranged speakers for.</p><h2>Spammy Link Building in the Netherlands</h2><p>The last few days there&#8217;s been <a\nhref=\"http://www.molblog.nl/bericht/douwe-egberts-kpn-pon-en-randstad-betrokken-bij-icomment-spam-i/\">an outcry</a> in the Netherlands over several companies using comment spam and forum spam as a method of gaining links. They&#8217;d been caught creating fake profiles on all sort of sites and pretending to interact while really only inserting their links. I had to laugh a bit, as would most of my UK, American and German friends, as that&#8217;s <em>so</em> common outside of the Netherlands nobody would be surprised to see that anymore. There was <a\nhref=\"http://www.molblog.nl/bericht/de-buzzmollen-van-groupon/\">one specific case</a> though that &#8220;hurt&#8221; more than others (which was by another company by the way). Someone had willfully created an account on a forum for MS (multiple sclerosis) patients, claiming to be a patient, while was spamming links there to health related offers. That&#8217;s so low that it hurts.</p><h2>Outing Non-ethical SEO practices: immoral?</h2><p>Recently Joe Hall, whom I respect a lot, did a post saying <a\nhref=\"http://joehall.me/seo-outing-is-immoral/29/\">SEO &#8220;outing&#8221; is immoral</a>. He mentions that while the outed practices themselves might be non-ethical, those people have families too, etc. Basically: people lose their jobs because of it. That&#8217;s true. And that&#8217;s sad. Especially as most of those people will not know what hit them. I will counter that though: those companies have grown by using their unethical methods, costing other people their jobs in other companies. This is a zero-sum game in most cases. Google doesn&#8217;t tell people what to buy, it helps them find <em>where</em> they can buy it. Keep this in your mind at all times: search doesn&#8217;t create demand, it merely funnels it. I refuse to let people who use unethical SEO methods &#8220;win&#8221; because they support families, simply because their more ethical competitors support families too. I recently <a\nhref=\"http://yoast.com/godaddy-link-building/\">outed GoDaddy</a> over using spammy link building techniques and got a lot of flack for that from other people in the industry. Some seem to think that it&#8217;s all of &#8220;us&#8221; (SEO&#8217;s) against &#8220;them&#8221; (Google). I wholeheartedly disagree. GoDaddy was using its paying customers to strengthen their own SEO without consulting them, in fact, they were specifically hiding what they were doing in their editor. I don&#8217;t mind them &#8220;playing&#8221; Google&#8217;s algorithms. I mind them abusing their customers websites without their consent. The only way of making that stop is to ask Google to remove the value that abuse has. In the same way I loathe WordPress plugin developers who add links to their users sites without consent. I will <em>not</em> &#8221;out&#8221; people for buying high quality, relevant links from high quality websites related to their own topic, I have less issues outing people who hack into my website to gain a few links. This happens more often than I dare to admit.</p><h2>Policing the web</h2><p>Joe goes further and says:</p><blockquote><p>&#8220;If your paycheck doesn’t say “Google” on it, it’s not your job to police the web.&#8221;</p></blockquote><p>My paycheck doesn&#8217;t say Google. I&#8217;m not policing the web. Neither is Google. Google is trying to maintain a set of rules <em>within its own index</em>. It has all the rights in the world to do that. My paycheck doesn&#8217;t say &#8220;WordPress&#8221; either, yet I help develop that project because we all benefit. There <em>really</em> is such a thing as &#8220;the common good&#8221;. That&#8217;s entirely different from outing every SEO I find that does something outside of Google&#8217;s guidelines, I&#8217;m smart enough to create my own set of ethics. I hope you are too. I for one intend to help them battle unethical SEO&#8217;s because I think we all benefit from that.</p><p><a\nhref=\"http://yoast.com/ethics-seo/\">The ethics of SEO</a> is a post by <a\nrel=\"author\" href=\"http://yoast.com/author/joost/\">Joost de Valk</a> on <a\nhref=\"http://yoast.com\">Yoast - Tweaking Websites</a>.A good WordPress blog needs good hosting, you don\'t want your blog to be slow, or, even worse, down, do you? Check out my thoughts on <a\nhref=\"http://yoast.com/wordpress-hosting/\">WordPress hosting</a>!</p><img src=\"http://feeds.feedburner.com/~r/joostdevalk/~4/YfVDkmGVt78\" height=\"1\" width=\"1\"/>\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://yoast.com/ethics-seo/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:3:\"101\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:1:{s:8:\"origLink\";a:1:{i:0;a:5:{s:4:\"data\";s:82:\"http://yoast.com/ethics-seo/#utm_source=rss&utm_medium=rss&utm_campaign=ethics-seo\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:2:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";s:4:\"href\";s:39:\"http://feeds.feedburner.com/joostdevalk\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:3:\"rel\";s:3:\"hub\";s:4:\"href\";s:32:\"http://pubsubhubbub.appspot.com/\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:42:\"http://rssnamespace.org/feedburner/ext/1.0\";a:5:{s:4:\"info\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:3:\"uri\";s:11:\"joostdevalk\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:14:\"emailServiceId\";a:1:{i:0;a:5:{s:4:\"data\";s:11:\"joostdevalk\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:18:\"feedburnerHostname\";a:1:{i:0;a:5:{s:4:\"data\";s:28:\"http://feedburner.google.com\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"feedFlare\";a:7:{i:0;a:5:{s:4:\"data\";s:22:\"Subscribe with Podnova\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:82:\"http://www.podnova.com/add.srf?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:47:\"http://www.podnova.com/img_chicklet_podnova.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:24:\"Subscribe with NewsGator\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:103:\"http://www.newsgator.com/ngs/subscriber/subext.aspx?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:42:\"http://www.newsgator.com/images/ngsub1.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:23:\"Subscribe with Netvibes\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:89:\"http://www.netvibes.com/subscribe.php?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:44:\"http://www.netvibes.com/img/add2netvibes.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:25:\"Subscribe with Pageflakes\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:92:\"http://www.pageflakes.com/subscribe.aspx?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:87:\"http://www.pageflakes.com/ImageFile.ashx?instanceId=Static_4&fileName=ATP_blu_91x17.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:24:\"Subscribe with My Yahoo!\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:79:\"http://add.my.yahoo.com/rss?url=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:59:\"http://us.i1.yimg.com/us.yimg.com/i/us/my/addtomyyahoo4.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:19:\"Subscribe with ODEO\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:85:\"http://odeo.com/listen/subscribe?feed=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:43:\"http://odeo.com/img/badge-channel-black.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:21:\"Subscribe with Google\";s:7:\"attribs\";a:1:{s:0:\"\";a:2:{s:4:\"href\";s:84:\"http://fusion.google.com/add?feedurl=http%3A%2F%2Ffeeds.feedburner.com%2Fjoostdevalk\";s:3:\"src\";s:51:\"http://buttons.googlesyndication.com/fusion/add.gif\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"browserFriendly\";a:1:{i:0;a:5:{s:4:\"data\";s:195:\"This is the combined feed for Yoast.com and the WordPress podcast. Subscribe now to get WordPress & Magento tips & tricks, helping you optimize your site for speed, search engines and conversion!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:9:{s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:4:\"etag\";s:27:\"2Dy5lhp527xtoXMn1BtKSJgfWRE\";s:13:\"last-modified\";s:29:\"Sun, 21 Oct 2012 08:31:01 GMT\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:36 GMT\";s:7:\"expires\";s:29:\"Sun, 21 Oct 2012 08:59:36 GMT\";s:13:\"cache-control\";s:18:\"private, max-age=0\";s:22:\"x-content-type-options\";s:7:\"nosniff\";s:16:\"x-xss-protection\";s:13:\"1; mode=block\";s:6:\"server\";s:3:\"GSE\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(2986,'can_compress_scripts','0','yes'),(2822,'_site_transient_timeout_browser_b4da43a5f894afcd1ca036d2a7fc18e4','1341384241','yes'),(2823,'_site_transient_browser_b4da43a5f894afcd1ca036d2a7fc18e4','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:6:\"13.0.1\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2911,'_site_transient_browser_c641ca620d19646545182b868b6e8fdd','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:6:\"14.0.1\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(2991,'_transient_timeout_feed_mod_cbd2b3760852e41c6fbfed1d636ba836','1347341811','no'),(2992,'_transient_feed_mod_cbd2b3760852e41c6fbfed1d636ba836','1347298611','no'),(3412,'_transient_plugins_delete_result_2','1','yes'),(3378,'_transient_timeout_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','1350853172','no'),(3379,'_transient_feed_ac0b00fe65abe10e0c5b588f3ed8c7ca','a:4:{s:5:\"child\";a:1:{s:0:\"\";a:1:{s:3:\"rss\";a:1:{i:0;a:6:{s:4:\"data\";s:3:\"\n\n\n\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:7:\"version\";s:3:\"2.0\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:1:{s:0:\"\";a:1:{s:7:\"channel\";a:1:{i:0;a:6:{s:4:\"data\";s:50:\"\n	\n	\n	\n	\n	\n	\n	\n	\n	\n		\n		\n		\n		\n		\n		\n		\n		\n		\n		\n	\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:3:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"http://wordpress.org/news\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"WordPress News\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:13:\"lastBuildDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 00:02:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"language\";a:1:{i:0;a:5:{s:4:\"data\";s:5:\"en-US\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:9:\"generator\";a:1:{i:0;a:5:{s:4:\"data\";s:39:\"http://wordpress.org/?v=3.5-beta2-22252\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"item\";a:10:{i:0;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:20:\"WordPress 3.5 Beta 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 13 Oct 2012 00:02:08 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2458\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:342:\"Two weeks after the first beta, WordPress 3.5 Beta 2 is now available for download and testing. This is software still in development, so we don’t recommend that you run it on a production site. Set up a test site to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1845:\"<p>Two weeks after the first beta, WordPress 3.5 Beta 2 is now available for download and testing.</p>\n<p>This is software still in development, so we don’t recommend that you run it on a production site. Set up a test site to play with the new version. To test WordPress 3.5, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"http://wordpress.org/wordpress-3.5-beta2.zip\">download the beta here</a> (zip).</p>\n<p>For more, <a title=\"WordPress 3.5 Beta 1\" href=\"http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/\"><strong>check out the extensive Beta 1 blog post</strong></a>, which covers what&#8217;s new in version 3.5 and how you can help. What&#8217;s new since beta 1? I&#8217;m glad you asked:</p>\n<ul>\n<li>New workflow for working with image galleries, including drag-and-drop reordering and quick caption editing.</li>\n<li>New user interface for setting static front pages for the Reading Settings screen. (<a title=\"Ticket 16379\" href=\"http://core.trac.wordpress.org/ticket/16379\">#16379</a>)</li>\n<li>New image editing API. (<a title=\"Ticket 6821\" href=\"http://core.trac.wordpress.org/ticket/6821\">#6821</a>)</li>\n</ul>\n<p>As always, if you think you’ve found a bug, you can post to the <a href=\"http://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a reproducible bug report, <a href=\"http://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"http://core.trac.wordpress.org/report/5\">a list of known bugs</a> and <a href=\"http://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=3.5\">everything we’ve fixed</a> so far. Happy testing!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wordpress.org/news/2012/10/wordpress-3-5-beta-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:1;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:35:\"WordPress 3.5 Beta 1 (and a bonus!)\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:64:\"http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 27 Sep 2012 22:37:49 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2443\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:376:\"I&#8217;m excited to announce the availability of WordPress 3.5 Beta 1. This is software still in development and we really don’t recommend that you run it on a production site — set up a test site just to play with the new version. To test WordPress 3.5, try the WordPress Beta Tester plugin (you’ll want “bleeding edge nightlies”). Or you can download [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:6603:\"<p>I&#8217;m excited to announce the availability of WordPress 3.5 Beta 1.</p>\n<p>This is software still in development and <strong>we <em>really</em> don’t recommend that you run it on a production site</strong> — set up a test site just to play with the new version. To test WordPress 3.5, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want “bleeding edge nightlies”). Or you can <a href=\"http://wordpress.org/wordpress-3.5-beta-1.zip\">download the beta here</a> (zip).</p>\n<p>In just three short months, we&#8217;ve already made a few hundred changes to improve your WordPress experience. The biggest thing we&#8217;ve been working on is overhauling the media experience from the ground up. We&#8217;ve made it all fair game: How you upload photos, arrange galleries, insert images into posts, and more. It&#8217;s still rough around the edges and some pieces are missing — which means now is the <em>perfect</em> time to test it out, report issues, and help shape our headline feature.</p>\n<p>As always, if you think you’ve found a bug, you can post to the <a href=\"http://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a reproducible bug report, <a href=\"http://core.trac.wordpress.org/\">file one on the WordPress Trac</a>. There, you can also find <a href=\"http://core.trac.wordpress.org/report/5\">a list of known bugs</a> and <a href=\"http://core.trac.wordpress.org/query?status=closed&amp;group=component&amp;milestone=3.5\">everything we&#8217;ve fixed</a> so far.</p>\n<p>Here&#8217;s some more of what&#8217;s new:</p>\n<ul>\n<li><strong>Appearance: </strong>A simplified welcome screen. A new color picker. And the all-HiDPI (retina) dashboard.</li>\n<li><strong>Accessibility:</strong> Keyboard navigation and screen reader support have both been improved.</li>\n<li><strong>Plugins: </strong>You can browse and install plugins you&#8217;ve marked as favorites on WordPress.org, directly from your dashboard.</li>\n<li><strong>Mobile: </strong>It&#8217;ll be easier to link up your WordPress install with <a href=\"http://wordpress.org/extend/mobile/\">our mobile apps</a>, as XML-RPC is now enabled by default.</li>\n<li><strong>Links: </strong>We&#8217;ve hidden the Link Manager for new installs. (Don&#8217;t worry, <a href=\"http://wordpress.org/extend/plugins/link-manager/\">there&#8217;s a plugin for that</a>.)</li>\n</ul>\n<p><strong>Developers: </strong>We love you. We do. And one of the things we strive to do with every release is be compatible with all existing plugins and themes. To make sure we don&#8217;t break anything, we need your help. <strong>Please, please test your plugins and themes against 3.5.</strong> If something isn&#8217;t quite right, please let us know. (Chances are, it wasn&#8217;t intentional.) And despite all of the changes to media, we&#8217;re still aiming to be backwards compatible with plugins that make changes to the existing media library. It&#8217;s a tall task, and it means we need your help.</p>\n<p>Here&#8217;s some more things we think developers will enjoy (and should test their plugins and themes against):</p>\n<ul>\n<li><strong>External libraries updated:</strong> TinyMCE  3.5.6. SimplePie 1.3. jQuery 1.8.2. jQuery UI 1.9 (and it&#8217;s not even released yet). We&#8217;ve also added Backbone 0.9.2 and Underscore 1.3.3, and you can use protocol-relative links when enqueueing scripts and styles. (<a href=\"http://core.trac.wordpress.org/ticket/16560\">#16560</a>)</li>\n<li><strong>WP Query:</strong> You can now ask to receive posts in the order specified by <code>post__in</code>. (<a href=\"http://core.trac.wordpress.org/ticket/13729\">#13729</a>)</li>\n<li><strong>XML-RPC:</strong> New user management, profile editing, and post revision methods. We&#8217;ve also removed AtomPub. (<a href=\"http://core.trac.wordpress.org/ticket/18428\">#18428</a>, <a href=\"http://core.trac.wordpress.org/ticket/21397\">#21397</a>, <a href=\"http://core.trac.wordpress.org/ticket/21866\">#21866</a>)</li>\n<li><strong>Multisite: </strong>switch_to_blog() is now used in more places, is faster, and more reliable. Also: You can now use multisite in a subdirectory, and uploaded files no longer go through ms-files (for new installs). (<a href=\"http://core.trac.wordpress.org/ticket/21434\">#21434</a>, <a href=\"http://core.trac.wordpress.org/ticket/19796\">#19796</a>, <a href=\"http://core.trac.wordpress.org/ticket/19235\">#19235</a>)</li>\n<li><strong>TinyMCE: </strong>We&#8217;ve added API support for &#8220;views&#8221; which you can use to offer previews and interaction of elements from the visual editor. (<a href=\"http://core.trac.wordpress.org/ticket/21812\">#21812</a>)</li>\n<li><strong>Posts API: </strong>Major performance improvements when working with hierarchies of pages and post ancestors. Also, you can now &#8220;turn on&#8221; native custom columns for taxonomies on edit post screens. (<a href=\"http://core.trac.wordpress.org/ticket/11399\">#11399</a>, <a href=\"http://core.trac.wordpress.org/ticket/21309\">#21309</a>, <a href=\"http://core.trac.wordpress.org/ticket/21240\">#21240</a>)</li>\n<li><strong>Comments API:</strong> Search for comments of a particular status, or with a meta query (same as with WP_Query). (<a href=\"http://core.trac.wordpress.org/ticket/21101\">#21101</a>, <a href=\"http://core.trac.wordpress.org/ticket/21003\">#21003</a>)</li>\n<li><strong>oEmbed: </strong>We&#8217;ve added support for a few oEmbed providers, and we now handle SSL links. (<a href=\"http://core.trac.wordpress.org/ticket/15734\">#15734</a>, <a href=\"http://core.trac.wordpress.org/ticket/21635\">#21635</a>, <a href=\"http://core.trac.wordpress.org/ticket/16996\">#16996</a>, <a href=\"http://core.trac.wordpress.org/ticket/20102\">#20102</a>)</li>\n</ul>\n<p>We&#8217;re looking forward to your feedback. If you break it (find a bug), please report it, and if you’re a developer, try to help us fix it. We&#8217;ve already had more than 200 contributors to version 3.5 — come join us!</p>\n<h3>And as promised, a bonus:</h3>\n<p>We&#8217;re planning a December 5 release for WordPress 3.5. But, we have a special offering for you, today. The newest default theme for WordPress, <strong>Twenty</strong><strong> Twelve</strong>, is now <a href=\"http://wordpress.org/extend/themes/twentytwelve\">available for download</a> from the WordPress themes directory. It&#8217;s a gorgeous and fully responsive theme, and it works with WordPress 3.4.2. Take it for a spin!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:60:\"http://wordpress.org/news/2012/09/wordpress-3-5-beta-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:2;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 3.4.2 Maintenance and Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://wordpress.org/news/2012/09/wordpress-3-4-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/news/2012/09/wordpress-3-4-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 06 Sep 2012 20:07:21 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2426\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:355:\"WordPress 3.4.2, now available for download, is a maintenance and security release for all previous versions. After nearly 15 million downloads since 3.4 was released not three months ago, we&#8217;ve identified and fixed a number of nagging bugs, including: Fix some issues with older browsers in the administration area. Fix an issue where a theme [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1443:\"<p>WordPress 3.4.2, now available for download, is a maintenance and security release for all previous versions.</p>\n<p>After nearly 15 million downloads since 3.4 was released not three months ago, we&#8217;ve <a href=\"http://core.trac.wordpress.org/query?status=closed&amp;resolution=fixed&amp;milestone=3.4.2&amp;group=resolution&amp;order=severity&amp;desc=1\">identified and fixed a number of nagging bugs</a>, including:</p>\n<ul>\n<li>Fix some issues with older browsers in the administration area.</li>\n<li>Fix an issue where a theme may not preview correctly, or its screenshot may not be displayed.</li>\n<li>Improve plugin compatibility with the visual editor.</li>\n<li>Address pagination problems with some category permalink structures.</li>\n<li>Avoid errors with both oEmbed providers and trackbacks.</li>\n<li>Prevent improperly sized header images from being uploaded.</li>\n</ul>\n<p>Version 3.4.2 also fixes a few security issues and contains some security hardening. The vulnerabilities included potential privilege escalation and a bug that affects multisite installs with untrusted users. These issues were discovered and fixed by the WordPress security team.</p>\n<p><a href=\"http://wordpress.org/download/\"><strong>Download 3.4.2</strong></a><strong> now or visit Dashboard → Updates in your site admin to update now.</strong></p>\n<p><em>Fixes for some bugs<br />\nBack to work on 3.5<br />\nIt&#8217;s time to update</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/news/2012/09/wordpress-3-4-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:3;a:6:{s:4:\"data\";s:60:\"\n		\n		\n		\n		\n		\n				\n		\n		\n		\n		\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:23:\"Event Organizers Unite!\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/news/2012/07/event-organizers-unite/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wordpress.org/news/2012/07/event-organizers-unite/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Fri, 13 Jul 2012 08:18:15 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:7:{i:0;a:5:{s:4:\"data\";s:9:\"Community\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:6:\"Events\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:7:\"classes\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:3;a:5:{s:4:\"data\";s:12:\"contributors\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:4;a:5:{s:4:\"data\";s:10:\"hackathons\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:5;a:5:{s:4:\"data\";s:7:\"meetups\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:6;a:5:{s:4:\"data\";s:9:\"WordCamps\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2412\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:388:\"I&#8217;m happy to announce the formation of a new official contributor group within the WordPress project for the organizers of in-person events that promote WordPress. Though there are hundreds of people around the globe organizing WordCamps, WordPress meetups, hackathons, free classes and the like, since their &#8220;projects&#8221; were all happening locally there was never a [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:10:\"Jane Wells\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3709:\"<p>I&#8217;m happy to announce the formation of a new official contributor group within the WordPress project for the organizers of in-person events that promote WordPress. Though there are hundreds of people around the globe organizing WordCamps, WordPress meetups, hackathons, free classes and the like, since their &#8220;projects&#8221; were all happening locally there was never a central hub of activity for these folks. Despite the many informal connections between community organizers, we weren&#8217;t taking advantage of the huge existing knowledge base as new organizers stepped up to the plate.</p>\n<p>With the creation of <a href=\"http://make.wordpress.org/events/\">this new contributor group</a>, we finally have a way to organize and recognize these kinds of contributions, a clear avenue for feedback and input when it comes to policies around official events, and the opportunity to create even more connections between community organizers through mentorship programs and group projects. I&#8217;m especially excited about the creation of this group because until now the role of community organizer, while one of the most important, has not gotten the same recognition as higher-profile contribution methods such as forum support or core code contribution. That is something I hope this group will change, and the local organizers can be recognized for the community leaders they are.*</p>\n<p>If you are the organizer of a local WordCamp, WordPress meetup, etc., head over to <a href=\"http://make.wordpress.org/events/\">http://make.wordpress.org/events/</a> and introduce yourself so we can include you in the fun!</p>\n<p>Speaking of meetups, an update on <a href=\"http://wordpress.org/news/2012/01/year-of-the-meetup/\">my last post about meetups</a> is long overdue. With around 500 meetup organizers (and/or potential organizers) responding to my last survey, it took much longer than anticipated to review all the responses. We&#8217;re working now with meetup.com to issue invitations to join a centralized WordPress Meetup account, so if you filled out the form earlier this year, you should be hearing from them soon. The first wave of existing meetup account transfers (for those who opted in) should happen in the next two weeks, with additional waves every 3 months thereafter (and new groups will be able to be created along the way).</p>\n<p>The <a href=\"http://wordpress.org/news/2012/05/calling-all-contributors-community-summit-2012/\">contributor summit</a> that is being planned for the end of October also generated hundreds of responses/nominations, so that review process is still happening, but we should be announcing some basic plans and issuing invitations soon.</p>\n<p>And finally, it would be impossible to talk about in-person WordPress events without mentioning the upcoming annual <a href=\"http://2012.sf.wordcamp.org\">WordCamp in San Francisco</a>. As the event that represents the worldwide project as a whole, it&#8217;s the perfect time to evaluate where we stand as a project and as a community, to help determine where we go next. If you&#8217;re a WordPress user, developer, or in any way a part of our vast and interconnected ecosystem, please take a moment to fill in the <a href=\"http://wpsurvey.polldaddy.com/s/wp-2012\">2nd annual WordPress survey</a>. It&#8217;s just a couple of questions, and your input would be greatly appreciated. The results of the survey will be announced at <a href=\"http://2012.sf.wordcamp.org\">WSCF</a>, and a report issued shortly thereafter.</p>\n<p>Thanks!</p>\n<p>*<em> I am also of the firm belief that academic and arts activities should earn varsity letters just like sports teams do &#8212; go mathletes! </em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:62:\"http://wordpress.org/news/2012/07/event-organizers-unite/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:4;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:48:\"WordPress 3.4.1 Maintenance and Security Release\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:50:\"http://wordpress.org/news/2012/06/wordpress-3-4-1/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:59:\"http://wordpress.org/news/2012/06/wordpress-3-4-1/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 27 Jun 2012 19:57:46 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Security\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2383\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:379:\"WordPress 3.4.1 is now available for download. WordPress 3.4 has been a very smooth release, and copies are flying off the shelf &#8212; 3 million downloads in two weeks! This maintenance release addresses 18 bugs with version 3.4, including: Fixes an issue where a theme&#8217;s page templates were sometimes not detected. Addresses problems with some category permalink [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1585:\"<p>WordPress 3.4.1 is now available for download. WordPress 3.4 has been a very smooth release, and copies are flying off the shelf &#8212; 3 million downloads in two weeks! This maintenance release addresses <a href=\"http://core.trac.wordpress.org/query?status=closed&amp;resolution=fixed&amp;milestone=3.4.1&amp;group=resolution&amp;order=severity&amp;desc=1\">18 bugs</a> with version 3.4, including:</p>\n<ul>\n<li>Fixes an issue where a theme&#8217;s page templates were sometimes not detected.</li>\n<li>Addresses problems with some category permalink structures.</li>\n<li>Better handling for plugins or themes loading JavaScript incorrectly.</li>\n<li>Adds early support for uploading images on iOS 6 devices.</li>\n<li>Allows for a technique commonly used by plugins to detect a network-wide activation.</li>\n<li>Better compatibility with servers running certain versions of PHP (5.2.4, 5.4) or with uncommon setups (safe mode, open_basedir), which had caused warnings or in some cases prevented emails from being sent.</li>\n</ul>\n<p>Version 3.4.1 also fixes a few security issues and contains some security hardening. The vulnerabilities included potential information disclosure as well as an bug that affects multisite installs with untrusted users. These issues were discovered and fixed by the WordPress security team.</p>\n<p><strong><a href=\"http://wordpress.org/download/\">Download 3.4.1</a> now or visit Dashboard → Updates in your site admin to update now.</strong></p>\n<p><em>Green was a bit green<br />\nWe have hardened it up some<br />\nUpdate WordPress now</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:55:\"http://wordpress.org/news/2012/06/wordpress-3-4-1/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:5;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:25:\"WordPress 3.4 “Green”\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:40:\"http://wordpress.org/news/2012/06/green/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:49:\"http://wordpress.org/news/2012/06/green/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Wed, 13 Jun 2012 18:42:40 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2334\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:386:\"WordPress 3.4 is here and out the door. We&#8217;ve dubbed this release &#8220;Green&#8221; in honor of guitarist Grant Green whose soulful simplicity has kept many of us company during this release. This release includes significant improvements to theme customization, custom headers, Twitter embeds, and image captions &#8212; here&#8217;s a short clip with the highlights: For [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:15280:\"<p>WordPress 3.4 is <a href=\"http://wordpress.org/download/\">here and out the door</a>. We&#8217;ve dubbed this release &#8220;Green&#8221; in honor of guitarist <a href=\"http://en.wikipedia.org/wiki/Grant_Green\">Grant Green</a> whose soulful simplicity has kept many of us company during this release.</p>\n<p>This release includes significant improvements to theme customization, custom headers, Twitter embeds, and image captions &#8212; here&#8217;s a short clip with the highlights:</p>\n<div id=\"v-Gg0EFixV-1\" class=\"video-player\"><embed id=\"v-Gg0EFixV-1-video\" src=\"http://s0.videopress.com/player.swf?v=1.03&amp;guid=Gg0EFixV&amp;isDynamicSeeking=true\" type=\"application/x-shockwave-flash\" width=\"692\" height=\"388\" title=\"Introducing WordPress 3.4 &quot;Green&quot;\" wmode=\"direct\" seamlesstabbing=\"true\" allowfullscreen=\"true\" allowscriptaccess=\"always\" overstretch=\"true\"></embed></div>\n<h3>For Users</h3>\n<p>The biggest change in 3.4 is the <strong>theme customizer</strong> which allows you to play around with various looks and settings for your current theme or one you&#8217;re thinking about switching to without publishing those changes to the whole world. For themes that support it, you can change colors, backgrounds, and of course custom image headers. We have more planned for the customizer down the road.</p>\n<p>Throughout the rest of the admin you&#8217;ll notice tweaks to make your everyday life easier. For example, if you have lots of themes we&#8217;ve made it quicker to browse them all at once without paging. We&#8217;ve made it possible to use images from your media library to populate custom headers, and for you to choose the height and width of your header images.</p>\n<p>We&#8217;ve expanded our embed support to include tweets: just put a Twitter permalink on its own line in the post editor and we&#8217;ll turn it into a beautiful embedded Tweet. And finally, image captions have been improved to allow HTML, like links, in them.</p>\n<h3>For Developers</h3>\n<p>There are hundreds of under-the-hood improvements in this release, notably in the XML-RPC, themes, and custom header APIs, and significant performance improvements in WP_Query and the translation system. <a href=\"http://codex.wordpress.org/Version_3.4\">The Codex has a pretty good summary of the developer features</a>, and you can always <a href=\"http://core.trac.wordpress.org/milestone/3.4\">dive into Trac directly</a>.</p>\n<p>We&#8217;ve also <a href=\"http://wpdevel.wordpress.com/2012/06/07/wordpress-3-4-field-guide-for-developers/\">put together a busy developer&#8217;s field guide to the new APIs in 3.4</a>.</p>\n<h3>It takes a village</h3>\n<p>Here are some of the fine folks who were involved in bringing 3.4 to the world:</p>\n<p><a href=\"http://profiles.wordpress.org/082net\">082net</a>, <a href=\"http://profiles.wordpress.org/aaroncampbell\">Aaron D. Campbell</a>, <a href=\"http://profiles.wordpress.org/kawauso\">Adam Harley</a>, <a href=\"http://profiles.wordpress.org/ajacommerce\">AJ Acevedo</a>, <a href=\"http://profiles.wordpress.org/akshayagarwal\">akshayagarwal</a>, <a href=\"http://profiles.wordpress.org/xknown\">Alex Concha</a>, <a href=\"http://profiles.wordpress.org/alexkingorg\">Alex King</a>, <a href=\"http://profiles.wordpress.org/viper007bond\">Alex Mills (Viper007Bond)</a>, <a href=\"http://profiles.wordpress.org/ampt\">ampt</a>, <a href=\"http://profiles.wordpress.org/sabreuse\">Amy Hendrix</a>, <a href=\"http://profiles.wordpress.org/andrea_r\">Andrea Rennick</a>, <a href=\"http://profiles.wordpress.org/nacin\">Andrew Nacin</a>, <a href=\"http://profiles.wordpress.org/azaozz\">Andrew Ozz</a>, <a href=\"http://profiles.wordpress.org/andrewryno\">Andrew Ryno</a>, <a href=\"http://profiles.wordpress.org/andy\">Andy Skelton</a>, <a href=\"http://profiles.wordpress.org/arieputranto\">Arie Putranto</a>, <a href=\"http://profiles.wordpress.org/filosofo\">Austin Matzko</a>, <a href=\"http://profiles.wordpress.org/barry\">Barry</a>, <a href=\"http://profiles.wordpress.org/benchapman\">BenChapman</a>, <a href=\"http://profiles.wordpress.org/husobj\">Ben Huson</a>, <a href=\"http://profiles.wordpress.org/benbalter\">Benjamin J. Balter</a>, <a href=\"http://profiles.wordpress.org/billerickson\">Bill Erickson</a>, <a href=\"http://profiles.wordpress.org/bananastalktome\">Billy (bananastalktome)</a>, <a href=\"http://profiles.wordpress.org/boonebgorges\">Boone Gorges</a>, <a href=\"http://profiles.wordpress.org/camiloclc\">camiloclc</a>, <a href=\"http://profiles.wordpress.org/casben79\">casben79</a>, <a href=\"http://profiles.wordpress.org/caspie\">Caspie</a>, <a href=\"http://profiles.wordpress.org/ceefour\">ceefour</a>, <a href=\"http://profiles.wordpress.org/cheald\">cheald</a>, <a href=\"http://profiles.wordpress.org/chellycat\">chellycat</a>, <a href=\"http://profiles.wordpress.org/chexee\">Chelsea Otakan</a>, <a href=\"http://profiles.wordpress.org/chipbennett\">Chip Bennett</a>, <a href=\"http://profiles.wordpress.org/c3mdigital\">Chris Olbekson</a>, <a href=\"http://profiles.wordpress.org/coenjacobs\">Coen Jacobs</a>, <a href=\"http://profiles.wordpress.org/scribu\">Cristi Burc&#259;</a>, <a href=\"http://profiles.wordpress.org/cyapow\">Cyapow</a>, <a href=\"http://profiles.wordpress.org/djcp\">Dan Collis-Puro</a>, <a href=\"http://profiles.wordpress.org/danielbachhuber\">Daniel Bachhuber</a>, <a href=\"http://profiles.wordpress.org/convissor\">Daniel Convissor</a>, <a href=\"http://profiles.wordpress.org/redsweater\">Daniel Jalkut (Red Sweater)</a>, <a href=\"http://profiles.wordpress.org/daniloercoli\">daniloercoli</a>, <a href=\"http://profiles.wordpress.org/koopersmith\">Daryl Koopersmith</a>, <a href=\"http://profiles.wordpress.org/dgwyer\">David Gwyer</a>, <a href=\"http://profiles.wordpress.org/deltafactory\">deltafactory</a>, <a href=\"http://profiles.wordpress.org/demetris\">demetris</a>, <a href=\"http://profiles.wordpress.org/dd32\">Dion Hulse</a>, <a href=\"http://profiles.wordpress.org/dllh\">dllh</a>, <a href=\"http://profiles.wordpress.org/ocean90\">Dominik Schilling</a>, <a href=\"http://profiles.wordpress.org/dougwrites\">Doug Provencio</a>, <a href=\"http://profiles.wordpress.org/drewapicture\">Drew Jaynes (DrewAPicture)</a>, <a href=\"http://profiles.wordpress.org/ebababi\">ebababi</a>, <a href=\"http://profiles.wordpress.org/edward-mindreantre\">edward-mindreantre</a>, <a href=\"http://profiles.wordpress.org/emhr\">emhr</a>, <a href=\"http://profiles.wordpress.org/empireoflight\">Empireoflight</a>, <a href=\"http://profiles.wordpress.org/ericlewis\">Eric Andrew Lewis</a>, <a href=\"http://profiles.wordpress.org/ericmann\">Eric Mann</a>, <a href=\"http://profiles.wordpress.org/ejdanderson\">Evan Anderson</a>, <a href=\"http://profiles.wordpress.org/evansolomon\">Evan Solomon</a>, <a href=\"http://profiles.wordpress.org/fredwu\">Fred Wu</a>, <a href=\"http://profiles.wordpress.org/ounziw\">Fumito Mizuno</a>, <a href=\"http://profiles.wordpress.org/garyc40\">Gary Cao</a>, <a href=\"http://profiles.wordpress.org/garyj\">Gary Jones</a>, <a href=\"http://profiles.wordpress.org/gautamgupta\">Gautam</a>, <a href=\"http://profiles.wordpress.org/soulseekah\">Gennady Kovshenin</a>, <a href=\"http://profiles.wordpress.org/mamaduka\">George Mamadashvili</a>, <a href=\"http://profiles.wordpress.org/georgestephanis\">George Stephanis</a>, <a href=\"http://profiles.wordpress.org/webord\">Gustavo Bordoni</a>, <a href=\"http://profiles.wordpress.org/hearvox\">hearvox</a>, <a href=\"http://profiles.wordpress.org/helenyhou\">Helen Hou-Sandi</a>, <a href=\"http://profiles.wordpress.org/hugobaeta\">Hugo Baeta</a>, <a href=\"http://profiles.wordpress.org/iandstewart\">Ian Stewart</a>, <a href=\"http://profiles.wordpress.org/insertvisionhere\">insertvisionhere</a>, <a href=\"http://profiles.wordpress.org/ipstenu\">Ipstenu</a>, <a href=\"http://profiles.wordpress.org/master-jake\">Jacob Chappell</a>, <a href=\"http://profiles.wordpress.org/jane\">Jane Wells</a>, <a href=\"http://profiles.wordpress.org/japh\">Japh</a>, <a href=\"http://profiles.wordpress.org/jaquers\">jaquers</a>, <a href=\"http://profiles.wordpress.org/jarretc\">JarretC</a>, <a href=\"http://profiles.wordpress.org/jeremyclarke\">jeremyclarke</a>, <a href=\"http://profiles.wordpress.org/jeremyfelt\">Jeremy Felt</a>, <a href=\"http://profiles.wordpress.org/jayjdk\">Jesper Johansen (Jayjdk)</a>, <a href=\"http://profiles.wordpress.org/jiehanzheng\">Jiehan Zheng</a>, <a href=\"http://profiles.wordpress.org/intoxstudio\">Joachim Jensen (Intox Studio)</a>, <a href=\"http://profiles.wordpress.org/jkudish\">Joachim Kudish (jkudish)</a>, <a href=\"http://profiles.wordpress.org/johnbillion\">John Blackbourn (johnbillion)</a>, <a href=\"http://profiles.wordpress.org/aldenta\">John Ford</a>, <a href=\"http://profiles.wordpress.org/johnjamesjacoby\">John James Jacoby</a>, <a href=\"http://profiles.wordpress.org/duck_\">Jon Cave</a>, <a href=\"http://profiles.wordpress.org/joostdevalk\">Joost de Valk</a>, <a href=\"http://profiles.wordpress.org/koke\">Jorge Bernal</a>, <a href=\"http://profiles.wordpress.org/josephscott\">Joseph Scott</a>, <a href=\"http://profiles.wordpress.org/devesine\">Justin</a>, <a href=\"http://profiles.wordpress.org/justindgivens\">Justin Givens</a>, <a href=\"http://profiles.wordpress.org/trepmal\">Kailey Lampert (trepmal)</a>, <a href=\"http://profiles.wordpress.org/kenan3008\">Kenan Dervisevic</a>, <a href=\"http://profiles.wordpress.org/kovshenin\">Konstantin Kovshenin</a>, <a href=\"http://profiles.wordpress.org/kobenland\">Konstantin Obenland</a>, <a href=\"http://profiles.wordpress.org/klagraff\">Kristopher Lagraff</a>, <a href=\"http://profiles.wordpress.org/kurtpayne\">Kurt Payne</a>, <a href=\"http://profiles.wordpress.org/lancewillett\">Lance Willett</a>, <a href=\"http://profiles.wordpress.org/lardjo\">Lardjo</a>, <a href=\"http://profiles.wordpress.org/leewillis77\">Lee Willis (leewillis77)</a>, <a href=\"http://profiles.wordpress.org/linuxologos\">linuxologos</a>, <a href=\"http://profiles.wordpress.org/latz\">Lutz Schroer</a>, <a href=\"http://profiles.wordpress.org/settle\">Mantas Malcius</a>, <a href=\"http://profiles.wordpress.org/netweblogic\">Marcus</a>, <a href=\"http://profiles.wordpress.org/markjaquith\">Mark Jaquith</a>, <a href=\"http://profiles.wordpress.org/markoheijnen\">Marko Heijnen</a>, <a href=\"http://profiles.wordpress.org/markauk\">Mark Rowatt Anderson</a>, <a href=\"http://profiles.wordpress.org/matveb\">Matias Ventura</a>, <a href=\"http://profiles.wordpress.org/sivel\">Matt Martz</a>, <a href=\"http://profiles.wordpress.org/mattonomics\">mattonomics</a>, <a href=\"http://profiles.wordpress.org/iammattthomas\">Matt Thomas</a>, <a href=\"http://profiles.wordpress.org/mattwiebe\">Matt Wiebe</a>, <a href=\"http://profiles.wordpress.org/mattyrob\">MattyRob</a>, <a href=\"http://profiles.wordpress.org/maxcutler\">Max Cutler</a>, <a href=\"http://profiles.wordpress.org/merty\">Mert Yazicioglu</a>, <a href=\"http://profiles.wordpress.org/mgolawala\">mgolawala</a>, <a href=\"http://profiles.wordpress.org/mdawaffe\">Michael Adams (mdawaffe)</a>, <a href=\"http://profiles.wordpress.org/tw2113\">Michael Beckwith</a>, <a href=\"http://profiles.wordpress.org/mfields\">Michael Fields</a>, <a href=\"http://profiles.wordpress.org/mikeschinkel\">Mike Schinkel</a>, <a href=\"http://profiles.wordpress.org/dh-shredder\">Mike Schroder</a>, <a href=\"http://profiles.wordpress.org/toppa\">Mike Toppa</a>, <a href=\"http://profiles.wordpress.org/dimadin\">Milan Dinic</a>, <a href=\"http://profiles.wordpress.org/mitchoyoshitaka\">mitcho (Michael Yoshitaka Erlewine)</a>, <a href=\"http://profiles.wordpress.org/batmoo\">Mohammad Jangda</a>, <a href=\"http://profiles.wordpress.org/mrtorrent\">mrtorrent</a>, <a href=\"http://profiles.wordpress.org/namely\">Name.ly</a>, <a href=\"http://profiles.wordpress.org/Nao\">Naoko McCracken</a>, <a href=\"http://profiles.wordpress.org/alex-ye\">Nashwan Doaqan</a>, <a href=\"http://profiles.wordpress.org/niallkennedy\">Niall Kennedy</a>, <a href=\"http://profiles.wordpress.org/nikolayyordanov\">Nikolay Yordanov</a>, <a href=\"http://profiles.wordpress.org/norocketsurgeon\">norocketsurgeon</a>, <a href=\"http://profiles.wordpress.org/npetetin\">npetetin</a>, <a href=\"http://profiles.wordpress.org/nunomorgadinho\">Nuno Morgadinho</a>, <a href=\"http://profiles.wordpress.org/ocollet\">Olivier Collet</a>, <a href=\"http://profiles.wordpress.org/pbiron\">Paul Biron</a>, <a href=\"http://profiles.wordpress.org/pavelevap\">pavelevap</a>, <a href=\"http://profiles.wordpress.org/petemall\">Pete Mall</a>, <a href=\"http://profiles.wordpress.org/westi\">Peter Westwood</a>, <a href=\"http://profiles.wordpress.org/pishmishy\">pishmishy</a>, <a href=\"http://profiles.wordpress.org/nprasath002\">Prasath Nadarajah</a>, <a href=\"http://profiles.wordpress.org/prettyboymp\">prettyboymp</a>, <a href=\"http://profiles.wordpress.org/ptahdunbar\">Ptah Dunbar</a>, <a href=\"http://profiles.wordpress.org/pw201\">pw201</a>, <a href=\"http://profiles.wordpress.org/ramiy\">Rami Yushuvaev</a>, <a href=\"http://profiles.wordpress.org/rarst\">Rarst</a>, <a href=\"http://profiles.wordpress.org/arena\">RENAUT</a>, <a href=\"http://profiles.wordpress.org/greuben\">Reuben Gunday</a>, <a href=\"http://profiles.wordpress.org/roscius\">Roscius</a>, <a href=\"http://profiles.wordpress.org/rosshanney\">Ross Hanney</a>, <a href=\"http://profiles.wordpress.org/russellwwest\">russellwwest</a>, <a href=\"http://profiles.wordpress.org/ryan\">Ryan Boren</a>, <a href=\"http://profiles.wordpress.org/ryanduff\">Ryan Duff</a>, <a href=\"http://profiles.wordpress.org/rmccue\">Ryan McCue</a>, <a href=\"http://profiles.wordpress.org/zeo\">Safirul Alredha</a>, <a href=\"http://profiles.wordpress.org/solarissmoke\">Samir Shah</a>, <a href=\"http://profiles.wordpress.org/otto42\">Samuel &#8220;Otto&#8221; Wood</a>, <a href=\"http://profiles.wordpress.org/tenpura\">Seisuke Kuraishi</a>, <a href=\"http://profiles.wordpress.org/sergeybiryukov\">Sergey Biryukov</a>, <a href=\"http://profiles.wordpress.org/simonwheatley\">Simon Wheatley</a>, <a href=\"http://profiles.wordpress.org/sirzooro\">sirzooro</a>, <a href=\"http://profiles.wordpress.org/sksmatt\">sksmatt</a>, <a href=\"http://profiles.wordpress.org/sushkov\">Stas Su&#537;kov</a>, <a href=\"http://profiles.wordpress.org/stephdau\">Stephane Daury (stephdau)</a>, <a href=\"http://profiles.wordpress.org/tamlyn\">tamlyn</a>, <a href=\"http://profiles.wordpress.org/griffinjt\">Thomas Griffin</a>, <a href=\"http://profiles.wordpress.org/tott\">Thorsten Ott</a>, <a href=\"http://profiles.wordpress.org/tobiasbg\">TobiasBg</a>, <a href=\"http://profiles.wordpress.org/tomauger\">Tom Auger</a>, <a href=\"http://profiles.wordpress.org/skithund\">Toni Viemero</a>, <a href=\"http://profiles.wordpress.org/transom\">transom</a>, <a href=\"http://profiles.wordpress.org/sorich87\">Ulrich Sossou</a>, <a href=\"http://profiles.wordpress.org/utkarsh\">Utkarsh Kukreti</a>, <a href=\"http://profiles.wordpress.org/wojtekszkutnik\">Wojtek Szkutnik</a>, <a href=\"http://profiles.wordpress.org/wonderslug\">wonderslug</a>, <a href=\"http://profiles.wordpress.org/xibe\">Xavier Borderie</a>, <a href=\"http://profiles.wordpress.org/yoavf\">Yoav Farhi</a>, <a href=\"http://profiles.wordpress.org/thezman84\">Zach &#8220;The Z Man&#8221; Abernathy</a>, <a href=\"http://profiles.wordpress.org/tollmanz\">Zack Tollman</a>, <a href=\"http://profiles.wordpress.org/vanillalounge\">Ze Fontainhas</a>, and <a href=\"http://profiles.wordpress.org/zx2c4\">zx2c4</a>.</p>\n<p>See you next time!</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:45:\"http://wordpress.org/news/2012/06/green/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:6;a:6:{s:4:\"data\";s:45:\"\n		\n		\n		\n		\n		\n				\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 3.4 Release Candidate 3\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-3/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-3/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Tue, 12 Jun 2012 00:30:14 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:2:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:7:\"Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2326\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:325:\"The third release candidate for WordPress 3.4 is now available. Since RC2, we&#8217;ve fixed a few lingering issues with the new live preview feature, as well as with custom headers and backgrounds. There are no remaining issues, and we plan to release 3.4 in the coming days. But if you think you&#8217;ve found a bug, [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1376:\"<p>The third release candidate for WordPress 3.4 is now available. Since RC2, we&#8217;ve fixed a few lingering issues with the new live preview feature, as well as with custom headers and backgrounds.</p>\n<p>There are no remaining issues, and we plan to release 3.4 in the coming days. But if you think you&#8217;ve found a bug, you can post to the <a href=\"http://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums, or file a bug report on <a href=\"http://core.trac.wordpress.org/\">WordPress Trac</a>.</p>\n<p>To test WordPress 3.4, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"http://wordpress.org/wordpress-3.4-RC3.zip\">download the release candidate here</a> (zip). Be sure to visit <strong><img style=\"vertical-align: text-top\" src=\"http://wordpress.org/wp-content/themes/twentyten/images/wordpress.png\" alt=\"\" /> → About</strong> for an updated list of features and under-the-hood changes. As a reminder: We’ve published some resources on the <a href=\"http://wpdevel.wordpress.com/2012/06/07/wordpress-3-4-field-guide-for-developers/\">development blog</a> to help plugin and theme developers prepare.</p>\n<p><em>The new live preview<br />\nNearing perfection, and yet?<br />\nNot yet. RC3</em></p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-3/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:7;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"WordPress 3.4 Release Candidate 2\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:68:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-2/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:77:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-2/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Thu, 07 Jun 2012 02:48:58 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:7:\"Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2318\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:331:\"The second release candidate for WordPress 3.4 is now available. Since RC1, we&#8217;ve made a few dozen final changes. Our goal is to release WordPress 3.4 early next week, so plugin and theme authors, this is likely your last chance to test your plugins and themes to find any compatibility issues before the final release. [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1713:\"<p>The second release candidate for WordPress 3.4 is now available. Since RC1, we&#8217;ve made a <a href=\"http://core.trac.wordpress.org/log/?action=stop_on_copy&amp;mode=stop_on_copy&amp;rev=21018&amp;stop_rev=20949&amp;limit=500\">few dozen final changes</a>.</p>\n<p>Our goal is to release WordPress 3.4 early next week, so plugin and theme authors, this is likely <strong>your last chance to test your plugins and themes to find any compatibility issues before the final release</strong>. We&#8217;ve published some resources on the <a href=\"http://wpdevel.wordpress.com/2012/06/07/wordpress-3-4-field-guide-for-developers/\">development blog</a> to help you prepare.</p>\n<p>If you think you’ve found a bug, you can post to the <a href=\"http://wordpress.org/support/forum/alphabeta\">Alpha/Beta area</a> in the support forums. Or, if you’re comfortable writing a reproducible bug report, <a href=\"http://core.trac.wordpress.org/\">file one on WordPress Trac</a>. Known issues that crop up will be listed <a href=\"http://core.trac.wordpress.org/report/6\">here</a>, but we&#8217;re hoping for a quiet few days so we can get some great features into your hands next week!</p>\n<p>To test WordPress 3.4, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you’ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"http://wordpress.org/wordpress-3.4-RC2.zip\">download the release candidate here</a> (zip). Be sure to visit <strong><img src=\"http://wordpress.org/wp-content/themes/twentyten/images/wordpress.png\" alt=\"\" style=\"vertical-align:text-top\" /> &rarr; About</strong> for an updated list of features and under-the-hood changes.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:73:\"http://wordpress.org/news/2012/06/wordpress-3-4-release-candidate-2/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:8;a:6:{s:4:\"data\";s:48:\"\n		\n		\n		\n		\n		\n				\n		\n		\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"WordPress 3.4 Release Candidate\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:66:\"http://wordpress.org/news/2012/05/wordpress-3-4-release-candidate/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:75:\"http://wordpress.org/news/2012/05/wordpress-3-4-release-candidate/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sun, 27 May 2012 17:18:30 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:3:{i:0;a:5:{s:4:\"data\";s:11:\"Development\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:1;a:5:{s:4:\"data\";s:8:\"Releases\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}i:2;a:5:{s:4:\"data\";s:7:\"Testing\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2303\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:130:\"The first release candidate (RC1) for WordPress 3.4 is now available. If you haven’t tested WordPress 3.4 yet, now is the time! \";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:12:\"Andrew Nacin\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:1871:\"<p>The first release candidate (RC1) for WordPress 3.4 is now available.</p>\n<p>An RC comes after the beta period and before final release. We think we&#8217;re done, but with millions of users and thousands of plugins and themes, it&#8217;s possible we&#8217;ve missed something. So if you haven’t tested WordPress 3.4 yet, now is the time! Please though, not on your live site unless you’re adventurous.</p>\n<p>With more than <a href=\"http://core.trac.wordpress.org/milestone/3.4\">500 tickets closed</a>, there are quite a few changes. <strong>Plugin and theme authors,</strong> please test your plugins and themes now, so that if there is a compatibility issue, we can figure it out before the final release.</p>\n<p>If you are testing the release candidate and think you&#8217;ve found a bug, please post to the <a href=\"http://wordpress.org/support/forum/alphabeta/\">Alpha/Beta area in the support forums</a>. If any known issues crop up, you’ll be able to <a href=\"http://core.trac.wordpress.org/report/5\">find them here</a>.</p>\n<p>To test WordPress 3.4, try the <a href=\"http://wordpress.org/extend/plugins/wordpress-beta-tester/\">WordPress Beta Tester</a> plugin (you&#8217;ll want &#8220;bleeding edge nightlies&#8221;). Or you can <a href=\"http://wordpress.org/wordpress-3.4-RC1.zip\">download the release candidate here (zip)</a>.</p>\n<p>If you&#8217;d like to know which levers to pull in your testing, visit the About page (<strong><img src=\"http://wordpress.org/wp-content/themes/twentyten/images/wordpress.png\" alt=\"\" style=\"vertical-align:text-top\" /> &rarr; About</strong> in the toolbar) and check out the list of features! You&#8217;ll definitely want to try the live theme previews.</p>\n<p><strong>Bonus:</strong> Happy birthday WordPress &#8212; <a href=\"http://wordpress.org/news/2003/05/wordpress-now-available/\">nine years old</a> today.</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:71:\"http://wordpress.org/news/2012/05/wordpress-3-4-release-candidate/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}i:9;a:6:{s:4:\"data\";s:42:\"\n		\n		\n		\n		\n		\n				\n\n		\n		\n				\n			\n		\n		\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";s:5:\"child\";a:5:{s:0:\"\";a:7:{s:5:\"title\";a:1:{i:0;a:5:{s:4:\"data\";s:26:\"Plugin Directory Refreshed\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:52:\"http://wordpress.org/news/2012/05/plugins-refreshed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:61:\"http://wordpress.org/news/2012/05/plugins-refreshed/#comments\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:7:\"pubDate\";a:1:{i:0;a:5:{s:4:\"data\";s:31:\"Sat, 19 May 2012 18:56:27 +0000\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:8:\"category\";a:1:{i:0;a:5:{s:4:\"data\";s:4:\"Meta\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:4:\"guid\";a:1:{i:0;a:5:{s:4:\"data\";s:33:\"http://wordpress.org/news/?p=2291\";s:7:\"attribs\";a:1:{s:0:\"\";a:1:{s:11:\"isPermaLink\";s:5:\"false\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:11:\"description\";a:1:{i:0;a:5:{s:4:\"data\";s:333:\"Been hanging out with a few WordPress.org hackers &#8212; Scott, Nacin, and Otto &#8212; the last few days in a BBQ-fueled haze of hacking to make plugin directory better. There are over 19,000 plugins listed and they&#8217;re really the heart and soul of WordPress for many people, so they deserve a little tender loving care. [...]\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:32:\"http://purl.org/dc/elements/1.1/\";a:1:{s:7:\"creator\";a:1:{i:0;a:5:{s:4:\"data\";s:14:\"Matt Mullenweg\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:40:\"http://purl.org/rss/1.0/modules/content/\";a:1:{s:7:\"encoded\";a:1:{i:0;a:5:{s:4:\"data\";s:3324:\"<p>Been hanging out with a few WordPress.org hackers &#8212; Scott, Nacin, and Otto &#8212; the last few days in a BBQ-fueled haze of hacking to make plugin directory better. There are over <a href=\"http://wordpress.org/extend/plugins/\">19,000 plugins listed</a> and they&#8217;re really the heart and soul of WordPress for many people, so they deserve a little tender loving care. Here&#8217;s a quick before and after snapshot you can zoom in on to see a visual overview of some of the changes:</p>\n<p><a href=\"http://wpdotorg.files.wordpress.com/2012/05/contact-form-7.png\"><img src=\"http://s2.wp.com/imgpress?resize=690,350&amp;url=http://wpdotorg.files.wordpress.com/2012/05/contact-form-7.png&amp;unsharpmask=80,0.5,3\" alt=\"\" /></a></p>\n<p>Our first focus was around improving the discussion and support around plugins.</p>\n<p>You&#8217;ll now notice that threads about a plugin are pulled directly into a &#8220;support&#8221; tab on the plugin page &#8212; each plugin has its own forum. We&#8217;ve made authors much more prominent and with bigger Gravatars and better placement, so you can get a sense of who made the plugin you&#8217;re using. And finally to show how active and well-supported a plugin is, you can see  &#8221;16 of 75 support threads in the last two weeks have been resolved.&#8221; Finally, if you&#8217;re logged in you get access to the new &#8220;favorites&#8221; feature that lets you mark the plugins you use the most so you can share them on your profile page and find them quickly later. We soft-launched favorites a few days ago and there have already been 2,000 saved!</p>\n<p>If you&#8217;re a plugin author, we&#8217;ve started with a short threshold (2 weeks) for the resolved stats so it&#8217;s easy to catch up and stay on top of it. (It&#8217;ll eventually go to two months.) You also now have the ability to set stickies on your plugin forum to put FAQs or important information at the top, and of course any person you put as a committer on the plugin will have moderation access. People on the forum tag will see your custom header and links to the other resources attached to your plugin.</p>\n<p>We&#8217;ve tightened up the styling a bit on the forums and plugin pages, though still some cleanups to do there. Some older improvements you might have missed, but are still useful for users and developers alike:</p>\n<ul>\n<li>&#8220;Plugin headers&#8221; or those cool graphics you see at the top of plugin pages have really taken off, there are over 1,600 active now.</li>\n<li>You can now subscribe to get an email whenever a commit is made to a plugin repository even if it isn&#8217;t yours. There is no better way to follow the development of your favorite plugins. There&#8217;s nothing like the smell of fresh changesets in the morning.</li>\n<li>Behind the scenes, we&#8217;ve dramatically ramped up proactive scanning of the entire repository to help authors fix security and other problems they might not even know about yet. The quality level of the repo has gone way, way up.</li>\n</ul>\n<p>All of this will continue to evolve as we get feedback and see usage, but we&#8217;re happy to have been able to make some key improvements in just a few days while hanging out in Memphis. (This is why WordCamps usually have BBQ &#8212; it imparts magical coding powers.)</p>\n\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:36:\"http://wellformedweb.org/CommentAPI/\";a:1:{s:10:\"commentRss\";a:1:{i:0;a:5:{s:4:\"data\";s:57:\"http://wordpress.org/news/2012/05/plugins-refreshed/feed/\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:38:\"http://purl.org/rss/1.0/modules/slash/\";a:1:{s:8:\"comments\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"0\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}s:27:\"http://www.w3.org/2005/Atom\";a:1:{s:4:\"link\";a:1:{i:0;a:5:{s:4:\"data\";s:0:\"\";s:7:\"attribs\";a:1:{s:0:\"\";a:3:{s:4:\"href\";s:31:\"http://wordpress.org/news/feed/\";s:3:\"rel\";s:4:\"self\";s:4:\"type\";s:19:\"application/rss+xml\";}}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}s:44:\"http://purl.org/rss/1.0/modules/syndication/\";a:2:{s:12:\"updatePeriod\";a:1:{i:0;a:5:{s:4:\"data\";s:6:\"hourly\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}s:15:\"updateFrequency\";a:1:{i:0;a:5:{s:4:\"data\";s:1:\"1\";s:7:\"attribs\";a:0:{}s:8:\"xml_base\";s:0:\"\";s:17:\"xml_base_explicit\";b:0;s:8:\"xml_lang\";s:0:\"\";}}}}}}}}}}}}s:4:\"type\";i:128;s:7:\"headers\";a:8:{s:6:\"server\";s:5:\"nginx\";s:4:\"date\";s:29:\"Sun, 21 Oct 2012 08:59:31 GMT\";s:12:\"content-type\";s:23:\"text/xml; charset=UTF-8\";s:10:\"connection\";s:5:\"close\";s:4:\"vary\";s:15:\"Accept-Encoding\";s:10:\"x-pingback\";s:36:\"http://wordpress.org/news/xmlrpc.php\";s:13:\"last-modified\";s:29:\"Sat, 13 Oct 2012 00:02:08 GMT\";s:4:\"x-nc\";s:11:\"HIT luv 138\";}s:5:\"build\";s:14:\"20111015034325\";}','no'),(3358,'_site_transient_timeout_browser_2ca29150172eeab1cbc1e7dd944a91de','1351414758','yes'),(3359,'_site_transient_browser_2ca29150172eeab1cbc1e7dd944a91de','a:9:{s:8:\"platform\";s:9:\"Macintosh\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"16.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"12\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3386,'_transient_timeout_feed_mod_57bc725ad6568758915363af670fd8bc','1350853172','no'),(3387,'_transient_feed_mod_57bc725ad6568758915363af670fd8bc','1350809972','no'),(3390,'_transient_timeout_dash_de3249c4736ad3bd2cd29147c4a0d43e','1350853172','no'),(3391,'_transient_dash_de3249c4736ad3bd2cd29147c4a0d43e','<h4>Most Popular</h4>\n<h5><a href=\'http://wordpress.org/extend/plugins/jetpack/\'>Jetpack by WordPress.com</a></h5>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=jetpack&amp;_wpnonce=d560e3d1cb&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Jetpack by WordPress.com\'>Install</a>)</span>\n<p>Supercharge your WordPress site with powerful features previously only available to WordPress.com users.</p>\n<h4>Newest Plugins</h4>\n<h5><a href=\'http://wordpress.org/extend/plugins/page-tag-cloud/\'>Page Tag Cloud</a></h5>&nbsp;<span>(<a href=\'plugin-install.php?tab=plugin-information&amp;plugin=page-tag-cloud&amp;_wpnonce=3377ce52f1&amp;TB_iframe=true&amp;width=600&amp;height=800\' class=\'thickbox\' title=\'Page Tag Cloud\'>Install</a>)</span>\n<p>Add tags to pages and display them in a tagcloud widget.</p>\n','no'),(3282,'_site_transient_timeout_browser_4cfdfa875aec4dd6687414d644f09062','1349858829','yes'),(3283,'_site_transient_browser_4cfdfa875aec4dd6687414d644f09062','a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"22.0.1229.79\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}','yes'),(3394,'_transient_timeout_feed_mod_895a6fef0cc57461ead214388fd67e81','1350853177','no'),(3395,'_transient_feed_mod_895a6fef0cc57461ead214388fd67e81','1350809977','no'),(3399,'addthis_settings','a:20:{s:8:\"username\";s:0:\"\";s:7:\"profile\";s:19:\"ra-5083bb375ec21ccc\";s:8:\"password\";s:0:\"\";s:5:\"above\";s:4:\"none\";s:5:\"below\";s:11:\"fb_tw_p1_sc\";s:18:\"addthis_show_stats\";b:0;s:19:\"addthis_append_data\";b:0;s:18:\"addthis_showonhome\";b:0;s:19:\"addthis_showonpages\";b:0;s:22:\"addthis_showonarchives\";b:0;s:18:\"addthis_showoncats\";b:0;s:22:\"addthis_showonexcerpts\";b:1;s:18:\"addthis_addressbar\";b:0;s:11:\"addthis_508\";b:0;s:21:\"addthis_copytracking2\";b:0;s:16:\"addthis_language\";s:0:\"\";s:9:\"atversion\";s:3:\"300\";s:23:\"atversion_update_status\";s:1:\"0\";s:28:\"credential_validation_status\";s:1:\"0\";s:8:\"wpfooter\";N;}','yes');
/*!40000 ALTER TABLE `ole_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_postmeta`
--

DROP TABLE IF EXISTS `ole_postmeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=1062 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_postmeta`
--

LOCK TABLES `ole_postmeta` WRITE;
/*!40000 ALTER TABLE `ole_postmeta` DISABLE KEYS */;
INSERT INTO `ole_postmeta` VALUES (1,2,'_wp_page_template','default'),(744,224,'_edit_last','2'),(412,27,'_pingme','1'),(311,20,'_pingme','1'),(312,20,'_encloseme','1'),(362,95,'_wp_attachment_image_alt','Data flow of the MembershipProvider model'),(5,4,'_edit_last','2'),(6,4,'_edit_lock','1330969326:2'),(746,225,'_wp_attached_file','2011/08/Model.png'),(745,224,'_edit_lock','1315397903:2'),(742,68,'_pingme','1'),(743,68,'_encloseme','1'),(10,20,'_edit_last','2'),(11,20,'_edit_lock','1309331358:2'),(12,27,'_edit_last','2'),(13,27,'_edit_lock','1313654817:2'),(361,95,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"547\";s:6:\"height\";s:3:\"225\";s:14:\"hwstring_small\";s:23:\"height=\'52\' width=\'128\'\";s:4:\"file\";s:30:\"2011/06/MembershipProvider.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:30:\"MembershipProvider-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:30:\"MembershipProvider-300x123.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"123\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:30:\"MembershipProvider-547x200.png\";s:5:\"width\";s:3:\"547\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(360,95,'_wp_attached_file','2011/06/MembershipProvider.png'),(618,27,'robotsmeta','index,follow'),(112,20,'_pingme','1'),(113,20,'_encloseme','1'),(114,20,'_pingme','1'),(115,20,'_encloseme','1'),(413,27,'_encloseme','1'),(419,4,'robotsmeta','index,follow'),(420,114,'_menu_item_type','custom'),(421,114,'_menu_item_menu_item_parent','0'),(422,114,'_menu_item_object_id','114'),(423,114,'_menu_item_object','custom'),(424,114,'_menu_item_target',''),(425,114,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(426,114,'_menu_item_xfn',''),(427,114,'_menu_item_url','http://ole.michelsen.dk/blog/'),(429,116,'_wp_attached_file','2011/07/MembershipProvider-Drawing-Pencil.jpg'),(430,116,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"550\";s:6:\"height\";s:3:\"250\";s:14:\"hwstring_small\";s:23:\"height=\'58\' width=\'128\'\";s:4:\"file\";s:45:\"2011/07/MembershipProvider-Drawing-Pencil.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:45:\"MembershipProvider-Drawing-Pencil-150x150.jpg\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:45:\"MembershipProvider-Drawing-Pencil-300x136.jpg\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"136\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:45:\"MembershipProvider-Drawing-Pencil-550x200.jpg\";s:5:\"width\";s:3:\"550\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(431,116,'_wp_attachment_image_alt','Overview of the data flow of the MembershipProvider model'),(433,27,'_pingme','1'),(434,27,'_encloseme','1'),(441,27,'_pingme','1'),(442,27,'_encloseme','1'),(446,2,'_edit_lock','1309863199:2'),(447,2,'_wp_trash_meta_status','publish'),(448,2,'_wp_trash_meta_time','1309863215'),(449,120,'_edit_lock','1322387875:2'),(122,20,'_pingme','1'),(123,20,'_encloseme','1'),(124,20,'_wp_old_slug','using-the-uri-hash-instead-of-query-strings'),(315,20,'robotsmeta','index,follow'),(126,20,'_pingme','1'),(127,20,'_encloseme','1'),(132,20,'_pingme','1'),(133,20,'_encloseme','1'),(137,70,'_menu_item_type','custom'),(138,70,'_menu_item_menu_item_parent','0'),(139,70,'_menu_item_object_id','70'),(140,70,'_menu_item_object','custom'),(141,70,'_menu_item_target',''),(142,70,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(143,70,'_menu_item_xfn',''),(144,70,'_menu_item_url','http://ole.michelsen.dk/'),(156,72,'_menu_item_menu_item_parent','71'),(146,71,'_menu_item_type','custom'),(147,71,'_menu_item_menu_item_parent','0'),(148,71,'_menu_item_object_id','71'),(149,71,'_menu_item_object','custom'),(150,71,'_menu_item_target',''),(151,71,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(152,71,'_menu_item_xfn',''),(153,71,'_menu_item_url','http://ole.michelsen.dk/blog/feed/'),(155,72,'_menu_item_type','custom'),(157,72,'_menu_item_object_id','72'),(158,72,'_menu_item_object','custom'),(159,72,'_menu_item_target',''),(160,72,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(161,72,'_menu_item_xfn',''),(162,72,'_menu_item_url','http://ole.michelsen.dk/blog/feed/atom/'),(450,120,'_edit_last','2'),(506,120,'robotsmeta','index,follow'),(454,136,'_wp_attached_file','2011/07/gmail.png'),(455,136,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"200\";s:6:\"height\";s:2:\"90\";s:14:\"hwstring_small\";s:23:\"height=\'57\' width=\'128\'\";s:4:\"file\";s:17:\"2011/07/gmail.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:16:\"gmail-150x90.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:2:\"90\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(456,120,'_thumbnail_id','136'),(457,136,'_wp_attachment_image_alt','Gmail by Google logo'),(468,120,'_pingme','1'),(469,120,'_encloseme','1'),(502,120,'_pingme','1'),(503,120,'_encloseme','1'),(507,68,'_edit_last','2'),(508,68,'_edit_lock','1333625441:2'),(610,68,'robotsmeta','index,follow'),(543,68,'_pingme','1'),(544,68,'_encloseme','1'),(593,183,'_wp_attached_file','2011/07/Bookmark.png'),(594,183,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:4:\"1128\";s:6:\"height\";s:3:\"600\";s:14:\"hwstring_small\";s:23:\"height=\'68\' width=\'128\'\";s:4:\"file\";s:20:\"2011/07/Bookmark.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:20:\"Bookmark-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:20:\"Bookmark-300x159.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"159\";}s:5:\"large\";a:3:{s:4:\"file\";s:21:\"Bookmark-1024x544.png\";s:5:\"width\";s:4:\"1024\";s:6:\"height\";s:3:\"544\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:20:\"Bookmark-950x200.png\";s:5:\"width\";s:3:\"950\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(595,183,'_wp_attachment_image_alt','Clicking the bookmarklet will display the source of the web page'),(600,68,'_pingme','1'),(601,68,'_encloseme','1'),(606,68,'_pingme','1'),(607,68,'_encloseme','1'),(611,68,'_pingme','1'),(612,68,'_encloseme','1'),(614,27,'_pingme','1'),(615,27,'_encloseme','1'),(619,153,'_edit_last','2'),(620,153,'_edit_lock','1313654844:2'),(679,153,'robotsmeta','index,follow'),(624,192,'_wp_attached_file','2011/07/Firefox-NTLM-Config.png'),(625,192,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"500\";s:6:\"height\";s:3:\"460\";s:14:\"hwstring_small\";s:23:\"height=\'96\' width=\'104\'\";s:4:\"file\";s:31:\"2011/07/Firefox-NTLM-Config.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:31:\"Firefox-NTLM-Config-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:31:\"Firefox-NTLM-Config-300x276.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"276\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:31:\"Firefox-NTLM-Config-500x200.png\";s:5:\"width\";s:3:\"500\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(626,192,'_wp_attachment_image_alt','Add intranet domain to the NTLM trusted list'),(648,200,'_wp_attached_file','2011/08/Firefox-Warranty-Warning.png'),(649,200,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"752\";s:6:\"height\";s:3:\"212\";s:14:\"hwstring_small\";s:23:\"height=\'36\' width=\'128\'\";s:4:\"file\";s:36:\"2011/08/Firefox-Warranty-Warning.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:36:\"Firefox-Warranty-Warning-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:35:\"Firefox-Warranty-Warning-300x84.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:2:\"84\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:36:\"Firefox-Warranty-Warning-752x200.png\";s:5:\"width\";s:3:\"752\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(675,153,'_pingme','1'),(676,153,'_encloseme','1'),(747,225,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"361\";s:6:\"height\";s:3:\"214\";s:14:\"hwstring_small\";s:23:\"height=\'75\' width=\'128\'\";s:4:\"file\";s:17:\"2011/08/Model.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:17:\"Model-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:17:\"Model-300x177.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"177\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:17:\"Model-361x200.png\";s:5:\"width\";s:3:\"361\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(737,222,'_menu_item_target',''),(736,222,'_menu_item_object','custom'),(735,222,'_menu_item_object_id','222'),(734,222,'_menu_item_menu_item_parent','71'),(733,222,'_menu_item_type','custom'),(716,220,'_menu_item_menu_item_parent','114'),(697,218,'_menu_item_type','taxonomy'),(698,218,'_menu_item_menu_item_parent','114'),(699,218,'_menu_item_object_id','22'),(700,218,'_menu_item_object','category'),(701,218,'_menu_item_target',''),(702,218,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(703,218,'_menu_item_xfn',''),(704,218,'_menu_item_url',''),(715,220,'_menu_item_type','taxonomy'),(706,219,'_menu_item_type','custom'),(707,219,'_menu_item_menu_item_parent','114'),(708,219,'_menu_item_object_id','219'),(709,219,'_menu_item_object','custom'),(710,219,'_menu_item_target',''),(711,219,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(712,219,'_menu_item_xfn',''),(713,219,'_menu_item_url','http://ole.michelsen.dk/blog/'),(717,220,'_menu_item_object_id','16'),(718,220,'_menu_item_object','category'),(719,220,'_menu_item_target',''),(720,220,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(721,220,'_menu_item_xfn',''),(722,220,'_menu_item_url',''),(840,274,'_menu_item_object','category'),(839,274,'_menu_item_object_id','7'),(838,274,'_menu_item_menu_item_parent','114'),(837,274,'_menu_item_type','taxonomy'),(836,247,'_encloseme','1'),(835,247,'_pingme','1'),(738,222,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(739,222,'_menu_item_xfn',''),(740,222,'_menu_item_url','http://ole.michelsen.dk/blog/feed/'),(748,226,'_wp_attached_file','2011/08/Output.png'),(749,226,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"444\";s:6:\"height\";s:3:\"320\";s:14:\"hwstring_small\";s:23:\"height=\'92\' width=\'128\'\";s:4:\"file\";s:18:\"2011/08/Output.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:18:\"Output-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:18:\"Output-300x216.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"216\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:18:\"Output-444x200.png\";s:5:\"width\";s:3:\"444\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(750,225,'_wp_attachment_image_alt','Entity model of the Article database tables'),(800,224,'robotsmeta','index,follow'),(763,231,'_wp_attached_file','2011/08/LinqResourceFallback.zip'),(764,231,'_wp_attachment_metadata','a:0:{}'),(765,232,'_wp_attached_file','2011/08/vs.png'),(766,232,'_wp_attachment_metadata','a:5:{s:5:\"width\";s:2:\"31\";s:6:\"height\";s:2:\"29\";s:14:\"hwstring_small\";s:22:\"height=\'29\' width=\'31\'\";s:4:\"file\";s:14:\"2011/08/vs.png\";s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(776,226,'_wp_attachment_image_alt','Output of our Article view'),(796,224,'_pingme','1'),(797,224,'_encloseme','1'),(801,27,'_pingme','1'),(802,27,'_encloseme','1'),(803,27,'_pingme','1'),(804,27,'_encloseme','1'),(805,27,'_pingme','1'),(806,27,'_encloseme','1'),(807,153,'_pingme','1'),(808,153,'_encloseme','1'),(809,247,'_edit_last','2'),(810,247,'_edit_lock','1336383870:2'),(811,247,'_yoast_wpseo_focuskw',''),(812,247,'_yoast_wpseo_title',''),(813,247,'_yoast_wpseo_metadesc',''),(814,247,'_yoast_wpseo_meta-robots-noindex','0'),(815,247,'_yoast_wpseo_meta-robots-nofollow','0'),(816,247,'_yoast_wpseo_meta-robots-adv','none'),(817,247,'_yoast_wpseo_bctitle',''),(818,247,'_yoast_wpseo_sitemap-include','-'),(819,247,'_yoast_wpseo_sitemap-prio','-'),(820,247,'_yoast_wpseo_canonical',''),(821,247,'_yoast_wpseo_redirect',''),(822,259,'_wp_attached_file','2011/10/Sql2Tree-HTML-nested-list.png'),(823,259,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"315\";s:6:\"height\";s:3:\"322\";s:14:\"hwstring_small\";s:22:\"height=\'96\' width=\'93\'\";s:4:\"file\";s:37:\"2011/10/Sql2Tree-HTML-nested-list.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:37:\"Sql2Tree-HTML-nested-list-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:37:\"Sql2Tree-HTML-nested-list-293x300.png\";s:5:\"width\";s:3:\"293\";s:6:\"height\";s:3:\"300\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:37:\"Sql2Tree-HTML-nested-list-315x200.png\";s:5:\"width\";s:3:\"315\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(824,260,'_wp_attached_file','2011/10/Sql2Tree-SQL-table-data.png'),(825,260,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"341\";s:6:\"height\";s:3:\"272\";s:14:\"hwstring_small\";s:23:\"height=\'96\' width=\'120\'\";s:4:\"file\";s:35:\"2011/10/Sql2Tree-SQL-table-data.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:35:\"Sql2Tree-SQL-table-data-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:35:\"Sql2Tree-SQL-table-data-300x239.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"239\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:35:\"Sql2Tree-SQL-table-data-341x200.png\";s:5:\"width\";s:3:\"341\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(826,259,'_wp_attachment_image_alt','Sql2Tree HTML nested list'),(827,247,'_pingme','1'),(828,247,'_encloseme','1'),(829,247,'_pingme','1'),(830,247,'_encloseme','1'),(831,247,'_pingme','1'),(832,247,'_encloseme','1'),(833,247,'_pingme','1'),(834,247,'_encloseme','1'),(841,274,'_menu_item_target',''),(842,274,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(843,274,'_menu_item_xfn',''),(844,274,'_menu_item_url',''),(846,247,'_pingme','1'),(847,247,'_encloseme','1'),(848,277,'_edit_last','2'),(849,277,'_edit_lock','1339188951:2'),(850,277,'_yoast_wpseo_focuskw',''),(851,277,'_yoast_wpseo_title',''),(852,277,'_yoast_wpseo_metadesc','Show a list or table of data grouped by category or group header using LINQ with a reusable generic class.'),(853,277,'_yoast_wpseo_meta-robots-noindex','0'),(854,277,'_yoast_wpseo_meta-robots-nofollow','0'),(855,277,'_yoast_wpseo_meta-robots-adv','none'),(856,277,'_yoast_wpseo_bctitle',''),(857,277,'_yoast_wpseo_sitemap-include','-'),(858,277,'_yoast_wpseo_sitemap-prio','-'),(859,277,'_yoast_wpseo_canonical',''),(860,277,'_yoast_wpseo_redirect',''),(861,281,'_wp_attached_file','2011/11/Output.png'),(862,281,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"501\";s:6:\"height\";s:3:\"547\";s:14:\"hwstring_small\";s:22:\"height=\'96\' width=\'87\'\";s:4:\"file\";s:18:\"2011/11/Output.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:18:\"Output-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:18:\"Output-274x300.png\";s:5:\"width\";s:3:\"274\";s:6:\"height\";s:3:\"300\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:18:\"Output-501x200.png\";s:5:\"width\";s:3:\"501\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(863,281,'_wp_attachment_image_alt','Books grouped by Genre'),(864,285,'_wp_attached_file','2011/11/LinqGrouping.zip'),(865,285,'_wp_attachment_metadata','a:0:{}'),(866,277,'_pingme','1'),(867,277,'_encloseme','1'),(868,277,'_pingme','1'),(869,277,'_encloseme','1'),(870,277,'_pingme','1'),(871,277,'_encloseme','1'),(872,277,'_pingme','1'),(873,277,'_encloseme','1'),(874,277,'_pingme','1'),(875,277,'_encloseme','1'),(876,277,'_pingme','1'),(877,277,'_encloseme','1'),(878,277,'_pingme','1'),(879,277,'_encloseme','1'),(880,277,'_pingme','1'),(881,277,'_encloseme','1'),(882,277,'_pingme','1'),(883,277,'_encloseme','1'),(884,277,'_pingme','1'),(885,277,'_encloseme','1'),(886,277,'_pingme','1'),(887,277,'_encloseme','1'),(888,120,'_yoast_wpseo_focuskw',''),(889,120,'_yoast_wpseo_title',''),(890,120,'_yoast_wpseo_metadesc',''),(891,120,'_yoast_wpseo_meta-robots-noindex','0'),(892,120,'_yoast_wpseo_meta-robots-nofollow','0'),(893,120,'_yoast_wpseo_meta-robots-adv','none'),(894,120,'_yoast_wpseo_bctitle',''),(895,120,'_yoast_wpseo_sitemap-include','-'),(896,120,'_yoast_wpseo_sitemap-prio','-'),(897,120,'_yoast_wpseo_canonical',''),(898,120,'_yoast_wpseo_redirect',''),(899,120,'_pingme','1'),(900,120,'_encloseme','1'),(901,300,'_edit_last','2'),(902,300,'_edit_lock','1340779552:2'),(903,300,'_yoast_wpseo_focuskw','bind model property to alias'),(904,300,'_yoast_wpseo_title',''),(905,300,'_yoast_wpseo_metadesc',''),(906,300,'_yoast_wpseo_meta-robots-noindex','0'),(907,300,'_yoast_wpseo_meta-robots-nofollow','0'),(908,300,'_yoast_wpseo_meta-robots-adv','none'),(909,300,'_yoast_wpseo_bctitle',''),(910,300,'_yoast_wpseo_sitemap-include','-'),(911,300,'_yoast_wpseo_sitemap-prio','-'),(912,300,'_yoast_wpseo_canonical',''),(913,300,'_yoast_wpseo_redirect',''),(939,320,'_wp_attachment_metadata','a:0:{}'),(967,300,'_oembed_f1de2b41f8fd940248446c06cd1726c2','{{unknown}}'),(930,313,'_wp_attached_file','2012/03/BindAliasAttribute-Example.png'),(931,313,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"492\";s:6:\"height\";s:3:\"558\";s:14:\"hwstring_small\";s:22:\"height=\'96\' width=\'84\'\";s:4:\"file\";s:38:\"2012/03/BindAliasAttribute-Example.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:38:\"BindAliasAttribute-Example-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:38:\"BindAliasAttribute-Example-264x300.png\";s:5:\"width\";s:3:\"264\";s:6:\"height\";s:3:\"300\";}s:14:\"post-thumbnail\";a:3:{s:4:\"file\";s:38:\"BindAliasAttribute-Example-492x200.png\";s:5:\"width\";s:3:\"492\";s:6:\"height\";s:3:\"200\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(938,320,'_wp_attached_file','2012/03/QueryStringAlias.zip'),(966,300,'_oembed_036d94a9c2d5a06bb0afaf339180b884','{{unknown}}'),(956,300,'_pingme','1'),(957,300,'_encloseme','1'),(960,300,'_pingme','1'),(961,300,'_encloseme','1'),(964,300,'_pingme','1'),(965,300,'_encloseme','1'),(968,247,'_pingme','1'),(969,247,'_encloseme','1'),(970,337,'_wp_attached_file','2011/07/viewsource.txt'),(971,337,'_wp_attachment_metadata','a:0:{}'),(972,68,'_yoast_wpseo_focuskw',''),(973,68,'_yoast_wpseo_title',''),(974,68,'_yoast_wpseo_metadesc',''),(975,68,'_yoast_wpseo_meta-robots-noindex','0'),(976,68,'_yoast_wpseo_meta-robots-nofollow','0'),(977,68,'_yoast_wpseo_meta-robots-adv','none'),(978,68,'_yoast_wpseo_bctitle',''),(979,68,'_yoast_wpseo_sitemap-include','-'),(980,68,'_yoast_wpseo_sitemap-prio','-'),(981,68,'_yoast_wpseo_canonical',''),(982,68,'_yoast_wpseo_redirect',''),(983,68,'_pingme','1'),(984,68,'_encloseme','1'),(985,68,'_pingme','1'),(986,68,'_encloseme','1'),(987,340,'_edit_last','2'),(988,340,'_edit_lock','1341844183:2'),(1005,346,'_wp_attached_file','2012/04/results-partition.png'),(1004,345,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"180\";s:6:\"height\";s:3:\"107\";s:14:\"hwstring_small\";s:23:\"height=\'76\' width=\'128\'\";s:4:\"file\";s:25:\"2012/04/running-total.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:25:\"running-total-150x107.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"107\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(1003,345,'_wp_attached_file','2012/04/running-total.png'),(992,340,'_yoast_wpseo_focuskw',''),(993,340,'_yoast_wpseo_title',''),(994,340,'_yoast_wpseo_metadesc','How to calculate a running total in SQL Server 2012 with alternative solution for SQL Server 2005 and 2008 using Common Table Expressions.'),(995,340,'_yoast_wpseo_meta-robots-noindex','0'),(996,340,'_yoast_wpseo_meta-robots-nofollow','0'),(997,340,'_yoast_wpseo_meta-robots-adv','none'),(998,340,'_yoast_wpseo_bctitle',''),(999,340,'_yoast_wpseo_sitemap-include','-'),(1000,340,'_yoast_wpseo_sitemap-prio','-'),(1001,340,'_yoast_wpseo_canonical',''),(1002,340,'_yoast_wpseo_redirect',''),(1006,346,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"255\";s:6:\"height\";s:3:\"196\";s:14:\"hwstring_small\";s:23:\"height=\'96\' width=\'124\'\";s:4:\"file\";s:29:\"2012/04/results-partition.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:29:\"results-partition-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(1007,347,'_wp_attached_file','2012/04/results.png'),(1008,347,'_wp_attachment_metadata','a:6:{s:5:\"width\";s:3:\"255\";s:6:\"height\";s:3:\"196\";s:14:\"hwstring_small\";s:23:\"height=\'96\' width=\'124\'\";s:4:\"file\";s:19:\"2012/04/results.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:19:\"results-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}'),(1009,349,'_wp_attached_file','2012/04/running-total-sql-server-2012.txt'),(1010,349,'_wp_attachment_metadata','a:0:{}'),(1011,340,'_pingme','1'),(1012,340,'_encloseme','1'),(1013,340,'_pingme','1'),(1014,340,'_encloseme','1'),(1015,340,'_pingme','1'),(1016,340,'_encloseme','1'),(1017,340,'_wp_old_slug','calculate-running-totals-in-sql-server-2012'),(1018,247,'_pingme','1'),(1019,247,'_encloseme','1'),(1020,247,'_pingme','1'),(1021,247,'_encloseme','1'),(1022,340,'_yoast_wpseo_linkdex','0'),(1023,300,'_yoast_wpseo_linkdex','61'),(1024,277,'_yoast_wpseo_linkdex','0'),(1025,247,'_yoast_wpseo_linkdex','0'),(1026,224,'_yoast_wpseo_linkdex','0'),(1027,153,'_yoast_wpseo_linkdex','0'),(1028,68,'_yoast_wpseo_linkdex','0'),(1029,120,'_yoast_wpseo_linkdex','0'),(1030,4,'_yoast_wpseo_linkdex','0'),(1031,27,'_yoast_wpseo_linkdex','0'),(1032,20,'_yoast_wpseo_linkdex','0'),(1033,359,'_wp_attached_file','2012/04/SerializeToQueryString.zip'),(1034,359,'_wp_attachment_metadata','a:0:{}'),(1035,356,'_edit_last','2'),(1036,356,'_yoast_wpseo_linkdex','81'),(1037,356,'_edit_lock','1348059761:2'),(1038,361,'_yoast_wpseo_linkdex','0'),(1039,356,'_yoast_wpseo_focuskw','serialize'),(1040,356,'_yoast_wpseo_title',''),(1041,356,'_yoast_wpseo_metadesc',''),(1042,356,'_yoast_wpseo_meta-robots-noindex','0'),(1043,356,'_yoast_wpseo_meta-robots-nofollow','0'),(1044,356,'_yoast_wpseo_meta-robots-adv','none'),(1045,356,'_yoast_wpseo_bctitle',''),(1046,356,'_yoast_wpseo_sitemap-include','-'),(1047,356,'_yoast_wpseo_sitemap-prio','-'),(1048,356,'_yoast_wpseo_canonical',''),(1049,356,'_yoast_wpseo_redirect',''),(1050,356,'_pingme','1'),(1051,356,'_encloseme','1'),(1052,356,'_pingme','1'),(1053,356,'_encloseme','1'),(1054,356,'_pingme','1'),(1055,356,'_encloseme','1'),(1056,356,'_pingme','1'),(1057,356,'_encloseme','1'),(1058,356,'_pingme','1'),(1059,356,'_encloseme','1'),(1060,356,'_pingme','1'),(1061,356,'_encloseme','1');
/*!40000 ALTER TABLE `ole_postmeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_posts`
--

DROP TABLE IF EXISTS `ole_posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(20) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=MyISAM AUTO_INCREMENT=377 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_posts`
--

LOCK TABLES `ole_posts` WRITE;
/*!40000 ALTER TABLE `ole_posts` DISABLE KEYS */;
INSERT INTO `ole_posts` VALUES (223,2,'2011-07-28 13:36:32','2011-07-28 12:36:32','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable</li>\n</ul>\n<div>\n\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\n\n</div>\n\n<!--more-->\n\n<h2>The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\" escaped=\"true\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'<!DOCTYPE html><html><head><title>Loading Source</title></head><body></body></html>\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','To view source on the iPad, create a bookmarklet which will show you the source code with syntax highlighting, clickable links for URI\'s and selectable text.','inherit','open','open','','68-revision-34','','','2011-07-28 13:36:32','2011-07-28 12:36:32','',68,'http://ole.michelsen.dk/blog/68-revision-34/',0,'revision','',0),(2,1,'2010-10-21 07:38:38','2010-10-21 07:38:38','This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.','About','','trash','open','open','','about','','','2011-07-05 11:53:35','2011-07-05 10:53:35','',0,'http://ole.michelsen.dk/blog/?page_id=2',0,'page','',0),(20,2,'2011-06-17 12:39:25','2011-06-17 11:39:25','A <abbr title=\"Uniform Resource Identifier\">URI</abbr> hash is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable. It can be used in a manner similar to query strings, but changes will not cause a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.<!--more-->\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allows users to set a timer for a specific date with a message of their choice. By using a URI hash all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash a.k.a location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using URI hash instead of query strings','Using URI location hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','publish','open','open','','using-uri-hash-instead-of-query-strings','','','2011-06-29 08:09:18','2011-06-29 07:09:18','',0,'http://ole.michelsen.dk/blog/?p=20',0,'post','',0),(4,2,'2011-07-01 12:03:16','0000-00-00 00:00:00','When creating a system for managing these SEO URLs, the following elements are key to observe:\r\n<ul>\r\n	<li> URLs must be unique</li>\r\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\r\n	<li>URLs should not contain (illegal) characters needing transcoding</li>\r\n</ul>\r\n<h2>Why rewrites won\'t cut it</h2>\r\nThe quick approach to SEO URLs is dynamic URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\r\n\r\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like part no. on a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\r\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\r\n\r\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\r\n<h3>Database model</h3>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Path</th>\r\n<th>SEO</th>\r\n<th>Redirect</th>\r\n<th>Table</th>\r\n<th>Key</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>/product.aspx?id=prod-x</td>\r\n<td>/product/name-of-product</td>\r\n<td></td>\r\n<td>Products</td>\r\n<td>prod-x</td>\r\n</tr>\r\n<tr>\r\n<td>/product.aspx?id=prod-x</td>\r\n<td>/product/old-name-of-product</td>\r\n<td>True</td>\r\n<td>Products</td>\r\n<td>prod-x</td>\r\n</tr>\r\n</tbody>\r\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','draft','open','open','','creating-seo-urls-on-a-large-website','','','2011-07-01 12:03:16','2011-07-01 11:03:16','',0,'http://ole.michelsen.dk/blog/?p=4',0,'post','',0),(7,2,'2010-10-21 08:28:57','2010-10-21 06:28:57','','Auto Draft','','inherit','open','open','','4-revision','','','2010-10-21 08:28:57','2010-10-21 06:28:57','',4,'http://ole.michelsen.dk/blog/2010/10/21/4-revision/',0,'revision','',0),(9,2,'2010-11-03 10:12:33','2010-11-03 08:12:33','When creating a system for managing these SEO URL\'s, the following elements are key to observe:\nURL\'s must be unique\nSystem should handle history for URL changes (and do a 301 redirect)\n\nWhy rewrites won\'t cut it\nThe quick approach to SEO URL\'s, are URL rewriting which is (now) natively supported in both Apache and IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-2','','','2010-11-03 10:12:33','2010-11-03 08:12:33','',4,'http://ole.michelsen.dk/blog/4-revision-2/',0,'revision','',0),(10,2,'2010-11-03 10:15:34','2010-11-03 08:15:34','When creating a system for managing these SEO URL\'s, the following elements are key to observe:\r\n<ul>\r\n	<li> URL\'s must be unique</li>\r\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\r\n</ul>\r\n<h2>Why rewrites won\'t cut it</h2>\r\nThe quick approach to SEO URL\'s, are URL rewriting which is (now) natively supported in both Apache and IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-3','','','2010-11-03 10:15:34','2010-11-03 08:15:34','',4,'http://ole.michelsen.dk/blog/4-revision-3/',0,'revision','',0),(11,2,'2010-11-03 10:15:38','2010-11-03 08:15:38','When creating a system for managing these SEO URL\'s, the following elements are key to observe:\r\n<ul>\r\n	<li> URL\'s must be unique</li>\r\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\r\n</ul>\r\n<h2>Why rewrites won\'t cut it</h2>\r\nThe quick approach to SEO URL\'s, are URL rewriting which is (now) natively supported in both Apache and IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-4','','','2010-11-03 10:15:38','2010-11-03 08:15:38','',4,'http://ole.michelsen.dk/blog/4-revision-4/',0,'revision','',0),(12,2,'2010-11-03 10:19:40','2010-11-03 08:19:40','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs, is URL rewriting which is (now) natively supported in both Apache and IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here.','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-5','','','2010-11-03 10:19:40','2010-11-03 08:19:40','',4,'http://ole.michelsen.dk/blog/4-revision-5/',0,'revision','',0),(13,2,'2010-11-03 10:20:09','2010-11-03 08:20:09','When creating a system for managing these SEO URLs, the following elements are key to observe:\r\n<ul>\r\n	<li> URLs must be unique</li>\r\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\r\n</ul>\r\n<h2>Why rewrites won\'t cut it</h2>\r\nThe quick approach to SEO URLs, is URL rewriting which is (now) natively supported in both Apache and IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\r\n\r\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here.','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-6','','','2010-11-03 10:20:09','2010-11-03 08:20:09','',4,'http://ole.michelsen.dk/blog/4-revision-6/',0,'revision','',0),(14,2,'2010-11-03 11:31:20','2010-11-03 09:31:20','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here.\n\nEnsuring uniqueness can also become a problem if you wish to use i.e. the product name for your URL. When handling more than 100.000 products, the possibility of names overlapping become greater (even if only by error).','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-7','','','2010-11-03 11:31:20','2010-11-03 09:31:20','',4,'http://ole.michelsen.dk/blog/4-revision-7/',0,'revision','',0),(15,2,'2010-11-03 16:03:07','2010-11-03 14:03:07','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n	<li>URLs should not contain illegal characters or characters needing transcoding</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\n\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\n<h3>Database model</h3>\n<table>\n<thead>\n<tr>\n<th>Path</th>\n<th>SEO</th>\n<th>Redirect</th>\n<th>Table</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/name-of-product</td>\n<td></td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/old-name-of-product</td>\n<td>True</td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n</tbody>\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-8','','','2010-11-03 16:03:07','2010-11-03 14:03:07','',4,'http://ole.michelsen.dk/blog/4-revision-8/',0,'revision','',0),(16,2,'2010-11-03 16:03:18','2010-11-03 14:03:18','When creating a system for managing these SEO URLs, the following elements are key to observe:\r\n<ul>\r\n	<li> URLs must be unique</li>\r\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\r\n	<li>URLs should not contain illegal characters or characters needing transcoding</li>\r\n</ul>\r\n<h2>Why rewrites won\'t cut it</h2>\r\nThe quick approach to SEO URLs is URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\r\n\r\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\r\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\r\n\r\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\r\n<h3>Database model</h3>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Path</th>\r\n<th>SEO</th>\r\n<th>Redirect</th>\r\n<th>Table</th>\r\n<th>Key</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>/product.aspx?id=prod-x</td>\r\n<td>/product/name-of-product</td>\r\n<td></td>\r\n<td>Products</td>\r\n<td>prod-x</td>\r\n</tr>\r\n<tr>\r\n<td>/product.aspx?id=prod-x</td>\r\n<td>/product/old-name-of-product</td>\r\n<td>True</td>\r\n<td>Products</td>\r\n<td>prod-x</td>\r\n</tr>\r\n</tbody>\r\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-9','','','2010-11-03 16:03:18','2010-11-03 14:03:18','',4,'http://ole.michelsen.dk/blog/4-revision-9/',0,'revision','',0),(17,2,'2010-11-03 16:05:26','2010-11-03 14:05:26','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n	<li>URLs should not contain illegal characters or characters needing transcoding</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is dynamic URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\n\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\n<h3>Database model</h3>\n<table>\n<thead>\n<tr>\n<th>Path</th>\n<th>SEO</th>\n<th>Redirect</th>\n<th>Table</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/name-of-product</td>\n<td></td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/old-name-of-product</td>\n<td>True</td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n</tbody>\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-10','','','2010-11-03 16:05:26','2010-11-03 14:05:26','',4,'http://ole.michelsen.dk/blog/4-revision-10/',0,'revision','',0),(18,2,'2010-11-03 16:07:04','2010-11-03 14:07:04','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n	<li>URLs should not contain illegal characters or characters needing transcoding</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is dynamic URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\n\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\n<h3>Database model</h3>\n<table>\n<thead>\n<tr>\n<th>Path</th>\n<th>SEO</th>\n<th>Redirect</th>\n<th>Table</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/name-of-product</td>\n<td></td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/old-name-of-product</td>\n<td>True</td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n</tbody>\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-11','','','2010-11-03 16:07:04','2010-11-03 14:07:04','',4,'http://ole.michelsen.dk/blog/4-revision-11/',0,'revision','',0),(21,2,'2011-03-13 21:48:57','2011-03-13 19:48:57','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used just as/instead of query strings, and changes will not incur a post-back to the server. This allows you to store data in the URI which can be read by javascript, changed and bookmarked, all without any post-backs.\n\nA side note however, is that URI hashes are not transferred back to the server, to you can only access them client-side.','URI hashing','','inherit','open','open','','20-revision','','','2011-03-13 21:48:57','2011-03-13 19:48:57','',20,'http://ole.michelsen.dk/blog/20-revision/',0,'revision','',0),(22,2,'2011-03-13 21:49:19','2011-03-13 19:49:19','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used just as/instead of query strings, and changes will not incur a post-back to the server. This allows you to store data in the URI which can be read by javascript, changed and bookmarked, all without any post-backs.\r\n\r\nA side note however, is that URI hashes are not transferred back to the server, to you can only access them client-side.','URI hashing','','inherit','open','open','','20-revision-2','','','2011-03-13 21:49:19','2011-03-13 19:49:19','',20,'http://ole.michelsen.dk/blog/20-revision-2/',0,'revision','',0),(23,2,'2011-03-13 22:00:43','2011-03-13 20:00:43','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar of query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nA side note however: URI hashes are not transferred back to the server, to you can only access them client-side.\n\nTest example: Configurable Countdown Clock\n\nI have created an example of URI hashing in my Countdown Clock. This allows users to set a countdown timer for a specific date, with a message of their choice. By using URI hashing, all these settings can be stored in the URI for bookmarking and sharing, but all configuration changes are made completely client-side.\n\nDoing this with query strings would require the page to reload with every change, in order to be able to bookmark the right URI.','URI hashing','','inherit','open','open','','20-revision-3','','','2011-03-13 22:00:43','2011-03-13 20:00:43','',20,'http://ole.michelsen.dk/blog/20-revision-3/',0,'revision','',0),(27,2,'2011-07-01 11:53:42','2011-07-01 10:53:42','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre lang=\"xml\" escaped=\"true\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','publish','open','open','','custom-membershipprovider-principal-and-identity','','','2011-08-18 09:06:57','2011-08-18 08:06:57','',0,'http://ole.michelsen.dk/blog/?p=27',0,'post','',6),(25,2,'2011-03-13 21:46:01','2011-03-13 20:46:01','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar of query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-h\n</pre>\nA side note however: URI hashes are not transferred back to the server, to you can only access them client-side.\n<h2>Test example: Countdown Clock</h2>\nI have created an example of URI hashing in my Countdown Clock, which allows users to set a timer for a specific date with a message of their choice. By using URI hashing, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side.\n\nDoing this with query strings would require the page to reload with every change, in order to be able to bookmark the right URI.','URI hashing','','inherit','open','open','','20-revision-4','','','2011-03-13 21:46:01','2011-03-13 20:46:01','',20,'http://ole.michelsen.dk/blog/20-revision-4/',0,'revision','',0),(26,2,'2011-03-13 21:46:10','2011-03-13 20:46:10','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar of query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash\r\n</pre>\r\nA side note however: URI hashes are not transferred back to the server, to you can only access them client-side.\r\n<h2>Test example: Countdown Clock</h2>\r\nI have created an example of URI hashing in my Countdown Clock, which allows users to set a timer for a specific date with a message of their choice. By using URI hashing, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side.\r\n\r\nDoing this with query strings would require the page to reload with every change, in order to be able to bookmark the right URI.','URI hashing','','inherit','open','open','','20-revision-5','','','2011-03-13 21:46:10','2011-03-13 20:46:10','',20,'http://ole.michelsen.dk/blog/20-revision-5/',0,'revision','',0),(28,2,'2011-06-03 12:22:50','2011-06-03 11:22:50','I recently ported my company\'s \"old\" ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, as everybody else it seems, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to review our code base, and implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered in various forums. Also, most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for newcomers (and myself if I have to implement this again someday).\n\nCreating the backend MembershipProvider-stuff\nMembershipProvider\nThe MembershipProvider interface is the thing handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement each function to actually do something in your database, like create a new user. You can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\nMembershipUser\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\nRoleProvider\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n\n\nUsing the MembershipProvider on your web pages\nNow we are moving into actually _using_ all these classes. The following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\nApplication_AuthenticateRequestThis is hit when your user is fetching a page. The system automatically gets the users cookie, and validates that it can be decrypted and isn\'t expired. This will set Request.IsAuthenticated.\nIPrincipalThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\nIIdentityThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\nPS. If you mix it up, and only build either a custom IPricipal or IIdentity, you need to implement serialization or move your initialization to Application_PostAuthenticateRequest(?) to avoid compiler errors.\n\nProfileJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n\nCustom Membership Provider Tutorial (I used)http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\nASP.NET Membership, Roles and Profile - 18 part serieshttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as Ihttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:http://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentityhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asaxhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used:iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision','','','2011-06-03 12:22:50','2011-06-03 11:22:50','',27,'http://ole.michelsen.dk/blog/27-revision/',0,'revision','',0),(29,2,'2011-06-03 12:27:01','2011-06-03 11:27:01','I recently ported my company\'s \"old\" ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, as everybody else it seems, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to review our code base, and implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered in various forums. Also, most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\n\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for newcomers (and myself if I have to implement this again someday).\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is the thing handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement each function to actually do something in your database, like create a new user. You can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Using the MembershipProvider</h2>\nNow we are moving into actually _using_ all these classes. The following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>Application_AuthenticateRequest</h3>\nThis is hit when your user is fetching a page. The system automatically gets the users cookie, and validates that it can be decrypted and isn\'t expired. This will set Request.IsAuthenticated.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\nPS. If you mix it up, and only build either a custom IPricipal or IIdentity, you need to implement serialization or move your initialization to Application_PostAuthenticateRequest(?) to avoid compiler errors.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n\nCustom Membership Provider Tutorial (I used)http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\nASP.NET Membership, Roles and Profile - 18 part serieshttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as Ihttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:http://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentityhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asaxhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used:iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-2','','','2011-06-03 12:27:01','2011-06-03 11:27:01','',27,'http://ole.michelsen.dk/blog/27-revision-2/',0,'revision','',0),(30,2,'2011-06-03 12:27:11','2011-06-03 11:27:11','I recently ported my company\'s \"old\" ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, as everybody else it seems, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to review our code base, and implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered in various forums. Also, most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\r\n\r\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for newcomers (and myself if I have to implement this again someday).\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is the thing handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement each function to actually do something in your database, like create a new user. You can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Using the MembershipProvider</h2>\r\nNow we are moving into actually _using_ all these classes. The following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit when your user is fetching a page. The system automatically gets the users cookie, and validates that it can be decrypted and isn\'t expired. This will set Request.IsAuthenticated.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\r\nPS. If you mix it up, and only build either a custom IPricipal or IIdentity, you need to implement serialization or move your initialization to Application_PostAuthenticateRequest(?) to avoid compiler errors.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n\r\nCustom Membership Provider Tutorial (I used)http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\nASP.NET Membership, Roles and Profile - 18 part serieshttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as Ihttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:http://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentityhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asaxhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used:iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-3','','','2011-06-03 12:27:11','2011-06-03 11:27:11','',27,'http://ole.michelsen.dk/blog/27-revision-3/',0,'revision','',0),(31,2,'2011-06-03 12:27:14','2011-06-03 11:27:14','I recently ported my company\'s \"old\" ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, as everybody else it seems, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to review our code base, and implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered in various forums. Also, most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\r\n\r\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for newcomers (and myself if I have to implement this again someday).\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is the thing handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement each function to actually do something in your database, like create a new user. You can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Using the MembershipProvider</h2>\r\nNow we are moving into actually _using_ all these classes. The following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit when your user is fetching a page. The system automatically gets the users cookie, and validates that it can be decrypted and isn\'t expired. This will set Request.IsAuthenticated.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\r\nPS. If you mix it up, and only build either a custom IPricipal or IIdentity, you need to implement serialization or move your initialization to Application_PostAuthenticateRequest(?) to avoid compiler errors.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n\r\nCustom Membership Provider Tutorial (I used)http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\nASP.NET Membership, Roles and Profile - 18 part serieshttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as Ihttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:http://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentityhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asaxhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used:iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-4','','','2011-06-03 12:27:14','2011-06-03 11:27:14','',27,'http://ole.michelsen.dk/blog/27-revision-4/',0,'revision','',0),(153,2,'2011-08-07 10:51:03','2011-08-07 09:51:03','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your NTLM (Active Directory) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website - given of course that you actually <em>have</em> permission ;-)','Firefox auto login with Windows Authentication and AD','Get Firefox to login automatically on your intranet websites with Windows Authentication and Active Directory with a simple change in about:config.','publish','open','open','','firefox-auto-login-with-windows-authentication-and-ad','','','2011-08-18 09:07:23','2011-08-18 08:07:23','',0,'http://ole.michelsen.dk/blog/?p=153',0,'post','',1),(74,2,'2011-06-28 19:17:05','2011-06-28 18:17:05','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nHowever during this process I became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of these problems was attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-22','','','2011-06-28 19:17:05','2011-06-28 18:17:05','',27,'http://ole.michelsen.dk/blog/27-revision-22/',0,'revision','',0),(38,2,'2011-06-16 13:33:45','2011-06-16 12:33:45','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\r\n\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n\r\npublic static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n\r\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-10','','','2011-06-16 13:33:45','2011-06-16 12:33:45','',27,'http://ole.michelsen.dk/blog/27-revision-10/',0,'revision','',0),(35,2,'2011-06-16 13:30:15','2011-06-16 12:30:15','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads, problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. This small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for other newcomers.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-7','','','2011-06-16 13:30:15','2011-06-16 12:30:15','',27,'http://ole.michelsen.dk/blog/27-revision-7/',0,'revision','',0),(33,2,'2011-06-03 13:10:35','2011-06-03 12:10:35','I recently ported my company\'s ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered by tracking through endless forum threads. And in the end most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\n\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for other newcomers.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-5','','','2011-06-03 13:10:35','2011-06-03 12:10:35','',27,'http://ole.michelsen.dk/blog/27-revision-5/',0,'revision','',0),(34,2,'2011-06-16 13:27:00','2011-06-16 12:27:00','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nThere\'s a lot of great guides out there, and quite a few example implementations to learn from, but I found that a lot of the questions that popped up along the way were only answered by tracking through endless forum threads. And in the end most of my trouble came from not understanding the the overall security model and how all the individual parts and classes fit into the big picture.\n\nThis small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for other newcomers.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-6','','','2011-06-16 13:27:00','2011-06-16 12:27:00','',27,'http://ole.michelsen.dk/blog/27-revision-6/',0,'revision','',0),(37,2,'2011-06-16 13:32:15','2011-06-16 12:32:15','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. This small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for other newcomers.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-9','','','2011-06-16 13:32:15','2011-06-16 12:32:15','',27,'http://ole.michelsen.dk/blog/27-revision-9/',0,'revision','',0),(36,2,'2011-06-16 13:30:38','2011-06-16 12:30:38','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. I had had enough of page events and ViewState, and was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads, problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. This small article is therefore an attempt to gather my experiences in a simple overview, and hopefully help new implementers to understand the structure of the MembershipProvider model so they know where to start, and where to put their own business logic. This is a pragmatic guide to an implementation, and I hope it can help ease the learning curve for other newcomers.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\r\n\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n\r\npublic static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n\r\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-8','','','2011-06-16 13:30:38','2011-06-16 12:30:38','',27,'http://ole.michelsen.dk/blog/27-revision-8/',0,'revision','',0),(42,2,'2011-06-16 14:54:41','2011-06-16 13:54:41','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n\nMembership.Validate(<em>...</em>);\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n\n((MyProvider)Membership.Provider).DeleteRange(...)\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-14','','','2011-06-16 14:54:41','2011-06-16 13:54:41','',27,'http://ole.michelsen.dk/blog/27-revision-14/',0,'revision','',0),(39,2,'2011-06-16 14:16:20','2011-06-16 13:16:20','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n\nMembership.Validate(<em>x</em>);\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n\n(()Membership.Provider)\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-11','','','2011-06-16 14:16:20','2011-06-16 13:16:20','',27,'http://ole.michelsen.dk/blog/27-revision-11/',0,'revision','',0),(40,2,'2011-06-16 14:17:47','2011-06-16 13:17:47','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n\nMembership.Validate(<em>...</em>);\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n\n((MyProvider)Membership.Provider).DeleteRange(...)\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record.You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually _use_ in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-12','','','2011-06-16 14:17:47','2011-06-16 13:17:47','',27,'http://ole.michelsen.dk/blog/27-revision-12/',0,'revision','',0),(41,2,'2011-06-16 14:41:00','2011-06-16 13:41:00','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n\nMembership.Validate(<em>...</em>);\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n\n((MyProvider)Membership.Provider).DeleteRange(...)\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will probably have to map MembershipUser to a similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the \"personal\" information like first name, the users special discount code and what language he speaks etc. Some of this overlaps the targeted use of Profiles, but if you want to skip the implementation and abstraction of yet _another_ class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize anything): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you will need to use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This automatically uses your new default MembershipProvider because you said so in web.config. Then call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy page. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-13','','','2011-06-16 14:41:00','2011-06-16 13:41:00','',27,'http://ole.michelsen.dk/blog/27-revision-13/',0,'revision','',0),(43,2,'2011-06-17 08:02:32','2011-06-17 07:02:32','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n\n<pre lang=\"LANGUAGE\" line=\"1\">Membership.Validate(<em>...</em>);</pre>\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n\n((MyProvider)Membership.Provider).DeleteRange(...)\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-15','','','2011-06-17 08:02:32','2011-06-17 07:02:32','',27,'http://ole.michelsen.dk/blog/27-revision-15/',0,'revision','',0),(44,2,'2011-06-17 08:02:58','2011-06-17 07:02:58','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n\r\nTo call standard functions included in the interface, in your web page write:\r\n\r\n<pre lang=\"csharp\">Membership.Validate(<em>...</em>);</pre>\r\n\r\nTo call your custom functions, you need to cast the provider (set as default in web.config):\r\n\r\n((MyProvider)Membership.Provider).DeleteRange(...)\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\r\n\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n\r\npublic static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n\r\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-16','','','2011-06-17 08:02:58','2011-06-17 07:02:58','',27,'http://ole.michelsen.dk/blog/27-revision-16/',0,'revision','',0),(45,2,'2011-06-17 08:03:00','2011-06-17 07:03:00','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n\r\nTo call standard functions included in the interface, in your web page write:\r\n\r\n<pre lang=\"csharp\">Membership.Validate(<em>...</em>);</pre>\r\n\r\nTo call your custom functions, you need to cast the provider (set as default in web.config):\r\n\r\n((MyProvider)Membership.Provider).DeleteRange(...)\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n\r\n<!-- p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; font: 9.5px Consolas} span.s1 {color: #1c0eff} span.s2 {color: #46a1bd} -->var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\r\n\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n\r\npublic static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n\r\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-17','','','2011-06-17 08:03:00','2011-06-17 07:03:00','',27,'http://ole.michelsen.dk/blog/27-revision-17/',0,'revision','',0),(46,2,'2011-06-17 08:07:06','2011-06-17 07:07:06','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\n\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<pre lang=\"csharp\" line=\"1>var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-18','','','2011-06-17 08:07:06','2011-06-17 07:07:06','',27,'http://ole.michelsen.dk/blog/27-revision-18/',0,'revision','',0),(47,2,'2011-06-17 08:11:17','2011-06-17 07:11:17','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\n\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\n\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\n\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n\npublic static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}\n\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-19','','','2011-06-17 08:11:17','2011-06-17 07:11:17','',27,'http://ole.michelsen.dk/blog/27-revision-19/',0,'revision','',0),(48,2,'2011-06-17 08:11:25','2011-06-17 07:11:25','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\r\n\r\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\r\n\r\nTo call standard functions included in the interface, in your web page write:\r\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\r\n\r\nTo call your custom functions, you need to cast the provider (set as default in web.config):\r\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\r\n\r\n<h3>MembershipUser</h3>\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\n\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n\r\n<pre lang=\"csharp\">\r\npublic static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}\r\n</pre>\r\n\r\nI use this wrapper for other user related functions, such as IP etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-20','','','2011-06-17 08:11:25','2011-06-17 07:11:25','',27,'http://ole.michelsen.dk/blog/27-revision-20/',0,'revision','',0),(73,2,'2011-06-27 20:53:37','2011-06-27 19:53:37','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. Fed up with page events and ViewState, I was lured by the promise of elegant and testable Models and Controllers. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nI had tried to get into the MembershipProvider pattern before, but gave up due to the sheer number of different classes you have to implement/override in order to do a simple database lookup, and add the extra user data that any business is sure to have in a custom setup.\n\nDuring this process I ran into a lot of minor problems and feebly banged my head against more than a fair share of forum threads. All problems which could primarily be attributed to my lack of understanding of the overall picture and how the elements of the Provider pattern fit together. Here I will attempt to gather my experiences in a simple overview, and give and implementation oriented overview of the structure of the MembershipProvider model, and where to put your own business logic.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all operations (CRUD) you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc., or you can just support the standard interface, and do all your special user handling \"outside\", directly on the database or through your normal business layer.\n\nTo call standard functions included in the interface, in your web page write:\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\n<h3>MembershipUser</h3>\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-21','','','2011-06-27 20:53:37','2011-06-27 19:53:37','',27,'http://ole.michelsen.dk/blog/27-revision-21/',0,'revision','',0),(49,2,'2011-03-13 21:46:13','2011-03-13 20:46:13','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar of query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, to you can only access them client-side.\r\n<h2>Test example: Countdown Clock</h2>\r\nI have created an example of URI hashing in my Countdown Clock, which allows users to set a timer for a specific date with a message of their choice. By using URI hashing, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side.\r\n\r\nDoing this with query strings would require the page to reload with every change, in order to be able to bookmark the right URI.','URI hashing','','inherit','open','open','','20-revision-6','','','2011-03-13 21:46:13','2011-03-13 20:46:13','',20,'http://ole.michelsen.dk/blog/20-revision-6/',0,'revision','',0),(50,2,'2011-06-17 12:20:43','2011-06-17 11:20:43','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n\nEnd note: the URI hash is also known as the location hash, and is actually intended to enable jumping to named sections within the document. Therefore you should','URI hashing','','inherit','open','open','','20-revision-7','','','2011-06-17 12:20:43','2011-06-17 11:20:43','',20,'http://ole.michelsen.dk/blog/20-revision-7/',0,'revision','',0),(51,2,'2011-06-17 12:25:09','2011-06-17 11:25:09','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n<h4>Official use of the URI hash</h4>\nThe URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of HTML elements, or your browser will scroll down to that element.','URI hashing','','inherit','open','open','','20-revision-8','','','2011-06-17 12:25:09','2011-06-17 11:25:09','',20,'http://ole.michelsen.dk/blog/20-revision-8/',0,'revision','',0),(52,2,'2011-06-17 12:32:03','2011-06-17 11:32:03','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI locator hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n<h4>Official use of the URI hash</h4>\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','URI hashing','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-9','','','2011-06-17 12:32:03','2011-06-17 11:32:03','',20,'http://ole.michelsen.dk/blog/20-revision-9/',0,'revision','',0),(53,2,'2011-06-17 12:34:16','2011-06-17 11:34:16','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI locator hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h4>Official use of the URI hash</h4>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI locator hash in lieu of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-10','','','2011-06-17 12:34:16','2011-06-17 11:34:16','',20,'http://ole.michelsen.dk/blog/20-revision-10/',0,'revision','',0),(54,2,'2011-06-17 12:35:10','2011-06-17 11:35:10','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI locator hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h4>Official use of the URI hash</h4>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash in lieu of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-11','','','2011-06-17 12:35:10','2011-06-17 11:35:10','',20,'http://ole.michelsen.dk/blog/20-revision-11/',0,'revision','',0),(55,2,'2011-06-17 12:35:39','2011-06-17 11:35:39','URI hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n<h4>Official use of the URI hash</h4>\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash in lieu of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-12','','','2011-06-17 12:35:39','2011-06-17 11:35:39','',20,'http://ole.michelsen.dk/blog/20-revision-12/',0,'revision','',0),(56,2,'2011-06-17 12:37:11','2011-06-17 11:37:11','<abbr title=\"Uniform Resource Identifier\">URI</abbr> hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h4>Official use of the URI hash</h4>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash in lieu of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-13','','','2011-06-17 12:37:11','2011-06-17 11:37:11','',20,'http://ole.michelsen.dk/blog/20-revision-13/',0,'revision','',0),(57,2,'2011-06-17 12:37:53','2011-06-17 11:37:53','<abbr title=\"Uniform Resource Identifier\">URI</abbr> hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\n\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\n\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n<h3>Original use of the URI hash</h3>\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash instead of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-14','','','2011-06-17 12:37:53','2011-06-17 11:37:53','',20,'http://ole.michelsen.dk/blog/20-revision-14/',0,'revision','',0),(58,2,'2011-06-17 12:39:25','2011-06-17 11:39:25','<abbr title=\"Uniform Resource Identifier\">URI</abbr> hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash instead of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-15','','','2011-06-17 12:39:25','2011-06-17 11:39:25','',20,'http://ole.michelsen.dk/blog/20-revision-15/',0,'revision','',0),(59,2,'2010-11-03 16:18:16','2010-11-03 14:18:16','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n	<li>URLs should not contain illegal characters or characters needing transcoding</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is dynamic URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like part no. on a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\n\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\n<h3>Database model</h3>\n<table>\n<thead>\n<tr>\n<th>Path</th>\n<th>SEO</th>\n<th>Redirect</th>\n<th>Table</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/name-of-product</td>\n<td></td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/old-name-of-product</td>\n<td>True</td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n</tbody>\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-12','','','2010-11-03 16:18:16','2010-11-03 14:18:16','',4,'http://ole.michelsen.dk/blog/4-revision-12/',0,'revision','',0),(113,2,'2011-07-01 11:55:46','2011-07-01 10:55:46','When creating a system for managing these SEO URLs, the following elements are key to observe:\n<ul>\n	<li> URLs must be unique</li>\n	<li> System should handle history for URL changes (and do a 301 redirect)</li>\n	<li>URLs should not contain (illegal) characters needing transcoding</li>\n</ul>\n<h2>Why rewrites won\'t cut it</h2>\nThe quick approach to SEO URLs is dynamic URL rewriting, which is natively supported in both Apache and (recently) IIS. This allows you to \"remodel\" the information already present in a URL, and perhaps remove some of the more trivial parts (like the file extension).\n\nThe problem becomes maintaining history, and making sure that the URL actually contains the elements you wish to have appear. Normally a system will pass an ID for the page (like part no. on a product page), but you actually want to show the product <strong>name</strong> in the URL. Rewriting wont help you here, since the name is not already present, and the system needs the unique ID to find the product.\nEnsuring uniqueness can also become a problem if you wish to use things like product names for your URL. When handling more than 100.000 products, the possibility of names overlapping is great, so picking a friendly text requires great control over the source data.\n\nRewriting can also be an annoyance when coding, where you will have to handle the conversion of your internal site links in some way. Here you will probably need to have some sort of function in place, which rewrites the real file to the external SEO URLs in production. In many cases this means having to handle your rewriting in <em>two</em> places, \"outgoing\" when generating links on the page, and \"incoming\" when mapping them to the real files.\n<h3>Database model</h3>\n<table>\n<thead>\n<tr>\n<th>Path</th>\n<th>SEO</th>\n<th>Redirect</th>\n<th>Table</th>\n<th>Key</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/name-of-product</td>\n<td></td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n<tr>\n<td>/product.aspx?id=prod-x</td>\n<td>/product/old-name-of-product</td>\n<td>True</td>\n<td>Products</td>\n<td>prod-x</td>\n</tr>\n</tbody>\n</table>','Creating SEO URL\'s on a large website (+100.000 pages)','','inherit','open','open','','4-revision-13','','','2011-07-01 11:55:46','2011-07-01 10:55:46','',4,'http://ole.michelsen.dk/blog/4-revision-13/',0,'revision','',0),(63,2,'2011-06-17 12:39:57','2011-06-17 11:39:57','<abbr title=\"Uniform Resource Identifier\">URI</abbr> hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using the URI hash instead of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-16','','','2011-06-17 12:39:57','2011-06-17 11:39:57','',20,'http://ole.michelsen.dk/blog/20-revision-16/',0,'revision','',0),(64,2,'2011-06-29 08:10:19','2011-06-29 07:10:19','A <abbr title=\"Uniform Resource Identifier\">URI</abbr> hash is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable. It can be used in a manner similar to query strings, but changes will not cause a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.<!--more-->\n\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\nA side note: URI hashes are not transferred back to the server, you can only access them client-side.\n<h2>Example: Countdown Clock</h2>\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allows users to set a timer for a specific date with a message of their choice. By using a URI hash all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\n<h3>Original use of the URI hash</h3>\nNote that the URI hash a.k.a location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using URI hash instead of query strings','Using URI location hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-autosave','','','2011-06-29 08:10:19','2011-06-29 07:10:19','',20,'http://ole.michelsen.dk/blog/20-autosave/',0,'revision','',0),(65,2,'2011-06-18 14:44:03','2011-06-18 13:44:03','<abbr title=\"Uniform Resource Identifier\">URI</abbr> hashing is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nURI hashes can be used in a manner similar to query strings, but changes will not incur a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note however: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allow users to set a timer for a specific date with a message of their choice. By using a URI hash, all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash aka. location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using URI hash instead of query strings','Using the URI locator hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-17','','','2011-06-18 14:44:03','2011-06-18 13:44:03','',20,'http://ole.michelsen.dk/blog/20-revision-17/',0,'revision','',0),(66,2,'2011-06-18 14:49:26','2011-06-18 13:49:26','A <abbr title=\"Uniform Resource Identifier\">URI</abbr> hash is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable.\r\n\r\nIt can be used in a manner similar to query strings, but changes will not cause a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allows users to set a timer for a specific date with a message of their choice. By using a URI hash all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash a.k.a location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using URI hash instead of query strings','Using URI location hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-18','','','2011-06-18 14:49:26','2011-06-18 13:49:26','',20,'http://ole.michelsen.dk/blog/20-revision-18/',0,'revision','',0),(68,2,'2011-07-28 11:45:37','2011-07-28 10:45:37','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:<!--more-->\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<div>\r\n\r\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\r\n\r\n</div>\r\n<h2>The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.\r\n<h3>Update April 5, 2012</h3>\r\nBy popular demand, I have <a title=\"Bookmarklet server-side source code (PHP)\" href=\"https://github.com/bufferunderrun/View-Source\" target=\"_blank\">published the server-side PHP code to GitHub</a>, so you can modify or host your own version of the bookmarklet. Remember that <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a> is required.','View source on the iPad and iPhone','View source on the iPad using a bookmarklet to see the source code with syntax highlighting, selectable text and clickable links for URIs.','publish','open','open','','view-source-on-the-ipad-and-iphone','http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/','','2012-04-05 12:31:44','2012-04-05 11:31:44','',0,'http://ole.michelsen.dk/blog/?p=68',0,'post','',37),(154,2,'2011-07-24 18:33:45','2011-07-24 17:33:45','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPads has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.','View source on the iPad','','inherit','open','open','','68-revision-2','','','2011-07-24 18:33:45','2011-07-24 17:33:45','',68,'http://ole.michelsen.dk/blog/68-revision-2/',0,'revision','',0),(70,2,'2011-06-22 14:21:54','2011-06-22 13:21:54','','Home','','publish','open','open','','home','','','2011-10-03 23:12:24','2011-10-03 22:12:24','',0,'http://ole.michelsen.dk/blog/?p=70',1,'nav_menu_item','',0),(71,2,'2011-06-22 14:21:54','2011-06-22 13:21:54','','Feeds','','publish','open','open','','feed-2','','','2011-10-03 23:13:04','2011-10-03 22:13:04','',0,'http://ole.michelsen.dk/blog/?p=71',7,'nav_menu_item','',0),(72,2,'2011-06-22 14:23:33','2011-06-22 13:23:33','','Atom','','publish','open','open','','atom-2','','','2011-10-03 23:13:16','2011-10-03 22:13:16','',0,'http://ole.michelsen.dk/blog/?p=72',9,'nav_menu_item','',0),(75,2,'2011-06-28 22:03:57','2011-06-28 21:03:57','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n\n<span style=\"color: #000000; font-size: 18px; line-height: 27px;\">MembershipUser</span>\n\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\n\nTo call standard functions included in the interface, in your web page write:\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\nTo call your custom functions, you need to cast the provider (set as default in web.config):\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-23','','','2011-06-28 22:03:57','2011-06-28 21:03:57','',27,'http://ole.michelsen.dk/blog/27-revision-23/',0,'revision','',0),(76,2,'2011-06-28 22:04:55','2011-06-28 21:04:55','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: DeleteRange(object[] keys) etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n\r\n<h3>MembershipUser</h3>\r\n\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\r\n\r\nTo call standard functions included in the interface, in your web page write:\r\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\r\nTo call your custom functions, you need to cast the provider (set as default in web.config):\r\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-24','','','2011-06-28 22:04:55','2011-06-28 21:04:55','',27,'http://ole.michelsen.dk/blog/27-revision-24/',0,'revision','',0),(77,2,'2011-06-28 22:05:08','2011-06-28 21:05:08','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like UnlockUser(string), then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n\r\n<h3>MembershipUser</h3>\r\n\r\nThis is the data class that your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe class representing the security context of your (authenticated) user. Think basic Microsoft Windows-like stuff. What is the user to the system, which role is he in? It\'s a subtle distinction to IIdentity, and it still confuses me a bit.This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented.If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis is the actual representation of the user. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default. Then you can use it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password). This calls your new default MembershipProvider. If successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on every page load?\r\n\r\nTo call standard functions included in the interface, in your web page write:\r\n<pre lang=\"csharp\">Membership.Validate(...);</pre>\r\nTo call your custom functions, you need to cast the provider (set as default in web.config):\r\n<pre lang=\"csharp\">((MyProvider)Membership.Provider).DeleteRange(...)</pre>\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the user auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-25','','','2011-06-28 22:05:08','2011-06-28 21:05:08','',27,'http://ole.michelsen.dk/blog/27-revision-25/',0,'revision','',0),(78,2,'2011-06-28 22:18:44','2011-06-28 21:18:44','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      enablePasswordRetrieval=\"false\"\n      enablePasswordReset=\"true\"\n      requiresQuestionAndAnswer=\"false\"\n      requiresUniqueEmail=\"false\"\n      maxInvalidPasswordAttempts=\"5\"\n      minRequiredPasswordLength=\"6\"\n      minRequiredNonalphanumericCharacters=\"0\"\n      passwordAttemptWindow=\"10\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password) which will call your new default MembershipProvider. If validation was successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-26','','','2011-06-28 22:18:44','2011-06-28 21:18:44','',27,'http://ole.michelsen.dk/blog/27-revision-26/',0,'revision','',0),(81,2,'2011-06-28 22:21:30','2011-06-28 21:21:30','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre lang=\"xml\"><membership defaultProvider=\"CustomMembershipProvider\">\n <providers>\n <clear/>\n <add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" />\n </providers>\n</membership></pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run Membership.ValidateUser(username, password) which will call your new default MembershipProvider. If validation was successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\npublic static MyPrincipal User { return (MyPrincipal)User; }\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-29','','','2011-06-28 22:21:30','2011-06-28 21:21:30','',27,'http://ole.michelsen.dk/blog/27-revision-29/',0,'revision','',0),(79,2,'2011-06-28 22:19:33','2011-06-28 21:19:33','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      enablePasswordRetrieval=\"false\"\r\n      enablePasswordReset=\"true\"\r\n      requiresQuestionAndAnswer=\"false\"\r\n      requiresUniqueEmail=\"false\"\r\n      maxInvalidPasswordAttempts=\"5\"\r\n      minRequiredPasswordLength=\"6\"\r\n      minRequiredNonalphanumericCharacters=\"0\"\r\n      passwordAttemptWindow=\"10\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password) which will call your new default MembershipProvider. If validation was successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-27','','','2011-06-28 22:19:33','2011-06-28 21:19:33','',27,'http://ole.michelsen.dk/blog/27-revision-27/',0,'revision','',0),(80,2,'2011-06-28 22:19:57','2011-06-28 21:19:57','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre lang=\"xml\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      enablePasswordRetrieval=\"false\"\r\n      enablePasswordReset=\"true\"\r\n      requiresQuestionAndAnswer=\"false\"\r\n      requiresUniqueEmail=\"false\"\r\n      maxInvalidPasswordAttempts=\"5\"\r\n      minRequiredPasswordLength=\"6\"\r\n      minRequiredNonalphanumericCharacters=\"0\"\r\n      passwordAttemptWindow=\"10\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password) which will call your new default MembershipProvider. If validation was successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-28','','','2011-06-28 22:19:57','2011-06-28 21:19:57','',27,'http://ole.michelsen.dk/blog/27-revision-28/',0,'revision','',0),(82,2,'2011-06-28 22:21:34','2011-06-28 21:21:34','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre lang=\"xml\"><membership defaultProvider=\"CustomMembershipProvider\">\r\n <providers>\r\n <clear/>\r\n <add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" />\r\n </providers>\r\n</membership></pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run Membership.ValidateUser(username, password) which will call your new default MembershipProvider. If validation was successful call FormsAuthentication.SetAuthCookie(username, remember) and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set Request.IsAuthenticated to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\npublic static MyPrincipal User { return (MyPrincipal)User; }\r\npublic static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-30','','','2011-06-28 22:21:34','2011-06-28 21:21:34','',27,'http://ole.michelsen.dk/blog/27-revision-30/',0,'revision','',0),(83,2,'2011-06-28 22:23:21','2011-06-28 21:23:21','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre lang=\"xml\"><membership defaultProvider=\"CustomMembershipProvider\">\n <providers>\n <clear/>\n <add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" />\n </providers>\n</membership></pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n	public static MyPrincipal User { \n		return (MyPrincipal)User; }\n	public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-31','','','2011-06-28 22:23:21','2011-06-28 21:23:21','',27,'http://ole.michelsen.dk/blog/27-revision-31/',0,'revision','',0),(84,2,'2011-06-28 22:24:54','2011-06-28 21:24:54','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre lang=\"xml\"></pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n	public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-32','','','2011-06-28 22:24:54','2011-06-28 21:24:54','',27,'http://ole.michelsen.dk/blog/27-revision-32/',0,'revision','',0),(85,2,'2011-06-28 22:26:53','2011-06-28 21:26:53','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre lang=\"xml\">&lt;\n<pre>membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      enablePasswordRetrieval=\"false\"\n      enablePasswordReset=\"true\"\n      requiresQuestionAndAnswer=\"false\"\n      requiresUniqueEmail=\"false\"\n      maxInvalidPasswordAttempts=\"5\"\n      minRequiredPasswordLength=\"6\"\n      minRequiredNonalphanumericCharacters=\"0\"\n      passwordAttemptWindow=\"10\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership</pre>\n&gt;</pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Accessing it in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-33','','','2011-06-28 22:26:53','2011-06-28 21:26:53','',27,'http://ole.michelsen.dk/blog/27-revision-33/',0,'revision','',0),(87,2,'2011-06-28 22:31:00','2011-06-28 21:31:00','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre lang=\"xml\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Reading user data in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-35','','','2011-06-28 22:31:00','2011-06-28 21:31:00','',27,'http://ole.michelsen.dk/blog/27-revision-35/',0,'revision','',0),(86,2,'2011-06-28 22:27:25','2011-06-28 21:27:25','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre lang=\"xml\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      enablePasswordRetrieval=\"false\"\r\n      enablePasswordReset=\"true\"\r\n      requiresQuestionAndAnswer=\"false\"\r\n      requiresUniqueEmail=\"false\"\r\n      maxInvalidPasswordAttempts=\"5\"\r\n      minRequiredPasswordLength=\"6\"\r\n      minRequiredNonalphanumericCharacters=\"0\"\r\n      passwordAttemptWindow=\"10\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for each request - if you have a page with 10 images, it will get called 10+1 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session was the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Accessing it in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-34','','','2011-06-28 22:27:25','2011-06-28 21:27:25','',27,'http://ole.michelsen.dk/blog/27-revision-34/',0,'revision','',0),(91,2,'2011-06-29 11:15:12','2011-06-29 10:15:12','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Reading user data in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-38','','','2011-06-29 11:15:12','2011-06-29 10:15:12','',27,'http://ole.michelsen.dk/blog/27-revision-38/',0,'revision','',0),(88,2,'2011-06-28 22:32:01','2011-06-28 21:32:01','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre lang=\"xml\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Reading user data in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-36','','','2011-06-28 22:32:01','2011-06-28 21:32:01','',27,'http://ole.michelsen.dk/blog/27-revision-36/',0,'revision','',0),(89,2,'2011-06-18 14:50:09','2011-06-18 13:50:09','A <abbr title=\"Uniform Resource Identifier\">URI</abbr> hash is a great way to make JavaScript/AJAX pages with dynamic content bookmarkable. It can be used in a manner similar to query strings, but changes will not cause a new page request. This allows you to store data in the URI which can be read and changed by JavaScript without ever reloading the page.\r\n\r\nFor the uninitiated, a URI location hash is everything after the # sign in the URI:\r\n<pre>http://domain.com/page.html#i-am-a-hash</pre>\r\nA side note: URI hashes are not transferred back to the server, you can only access them client-side.\r\n<h2>Example: Countdown Clock</h2>\r\nI have created an example of URI hashes in my <a title=\"Yet Another Countdown Clock\" href=\"http://ole.michelsen.dk/tools/countdown.html\">Countdown Clock</a>, which allows users to set a timer for a specific date with a message of their choice. By using a URI hash all these settings can be stored in the URI for bookmarking and sharing, while all configuration changes are made completely client-side. Doing the same thing with query strings would require the page to reload with every change.\r\n<h3>Original use of the URI hash</h3>\r\nNote that the URI hash a.k.a location hash, is actually intended for jumping to named sections within the document. Therefore you should probably ensure not to use hash values that correspond to ID\'s of existing HTML elements, or your browser will scroll down to that element.','Using URI hash instead of query strings','Using URI location hash instead of query strings for bookmarkable JavaScript/AJAX pages with dynamic content.','inherit','open','open','','20-revision-19','','','2011-06-18 14:50:09','2011-06-18 13:50:09','',20,'http://ole.michelsen.dk/blog/20-revision-19/',0,'revision','',0),(90,2,'2011-06-28 22:32:20','2011-06-28 21:32:20','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I however became quite confused about the sheer number of different classes you have to implement/override, and ended up spending quite a lot of time in forum threads searching for answers. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model.\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\nThen you can start using it:\r\n<h3>Login a user</h3>\r\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\r\n\r\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\r\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\r\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\r\n<h3>Reading user data in a page</h3>\r\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\r\n\r\n&nbsp;\r\n\r\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\r\n\r\nASP.NET Membership, Roles and Profile - 18 part series\r\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\r\n\r\nIsAuthenticated = Name.isEmpty (bottom of page)\r\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\r\n\r\nConfused as I\r\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\r\nSolving [Serializable()]\r\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\r\n\r\nDunno if good:\r\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\r\n\r\nUsing custom attributes with IIdentity\r\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\r\nSetting IIdentity and IPrincipal in Global.asax\r\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\r\n\r\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-37','','','2011-06-28 22:32:20','2011-06-28 21:32:20','',27,'http://ole.michelsen.dk/blog/27-revision-37/',0,'revision','',0),(92,2,'2011-06-29 12:30:47','2011-06-29 11:30:47','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all CRUD operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use features like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! They will only be called if <em>you</em> do it from the code.\n\nYou can also extend it with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to handle more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. You don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles or can live with the standard string-based roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default.\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\nThen you can start using it:\n<h3>Login a user</h3>\nThis is trivial; make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your users are logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically gets the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username in the standard generic IPrincipal and IIdentity.\n\nNow we can put in our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects (we are now authorized), with our own versions that contain all our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! To remedy this you basically have two options:\n<ol>\n	<li>Store all the data you need about the user in the cookie (not very secure, but perhaps ok for very small values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user.\n<h3>Reading user data in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-39','','','2011-06-29 12:30:47','2011-06-29 11:30:47','',27,'http://ole.michelsen.dk/blog/27-revision-39/',0,'revision','',0),(93,2,'2011-06-29 14:06:43','2011-06-29 13:06:43','Recently I ported my company\'s website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I decided to also implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider interface is handling all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc, but it\'s quite optional if you just wish to do the more intricate user handling through other classes.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t even need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser, but implementing it is not all that complicated. You just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc. Our system was actually using a role id system with greater/less than int\'s, but we changed to the string version to comply with the interface and not make things more complicated than they already are.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">var identity = new EET.Web.Security.Identity(username, true);\nvar principal = new EET.Web.Security.Principal(identity, identity.Roles);</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user. I have done this:\n\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(cacheKey, userObject, null, DateTime.Now.AddMinutes(2),                        Cache.NoSlidingExpiration);</pre>\n\nThis will cache the user data for 2 min, before updating it from the server again. If you lock out the user, the server will therefore not know for 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow for the rest of this request, you have a user object with some important data you wish to access. This is done through User and User.Identity. These have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so in all regards it\'s nice to have.\n\n&nbsp;\n\nCustom Membership Provider Tutorial (I used) http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/#comment-836\n\nASP.NET Membership, Roles and Profile - 18 part series\nhttp://www.4guysfromrolla.com/articles/120705-1.aspx\n\nIsAuthenticated = Name.isEmpty (bottom of page)\nhttp://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\n\nConfused as I\nhttp://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\nSolving [Serializable()]\nhttp://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\n\nDunno if good:\nhttp://ondotnet.com/pub/a/dotnet/2004/02/02/effectiveformsauth.html\n\nUsing custom attributes with IIdentity\nhttp://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\nSetting IIdentity and IPrincipal in Global.asax\nhttp://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\n\nSearches I used: iidentity vs iprovidercustom membershipprovider','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-40','','','2011-06-29 14:06:43','2011-06-29 13:06:43','',27,'http://ole.michelsen.dk/blog/27-revision-40/',0,'revision','',0),(94,2,'2011-06-29 14:49:02','2011-06-29 13:49:02','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null, \n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-41','','','2011-06-29 14:49:02','2011-06-29 13:49:02','',27,'http://ole.michelsen.dk/blog/27-revision-41/',0,'revision','',0),(95,2,'2011-06-30 13:32:09','2011-06-30 12:32:09','','MembershipProvider diagram overview','','inherit','open','open','','membershipprovider','','','2011-06-30 13:32:09','2011-06-30 12:32:09','',27,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png',0,'attachment','image/png',0),(96,2,'2011-06-29 14:58:27','2011-06-29 13:58:27','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Sign in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    var identity = new MyIdentity(username, true);\r\n    var principal = new MyPrincipal(identity, identity.Roles);\r\n    HttpContext.Current.User = principal;\r\n}</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, \r\n    DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\r\n<h3>Reading user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\r\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-42','','','2011-06-29 14:58:27','2011-06-29 13:58:27','',27,'http://ole.michelsen.dk/blog/27-revision-42/',0,'revision','',0),(97,2,'2011-06-30 13:39:50','2011-06-30 12:39:50','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<p style=\"text-align: center;\">&nbsp;</p>\n\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\n&nbsp;\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-43','','','2011-06-30 13:39:50','2011-06-30 12:39:50','',27,'http://ole.michelsen.dk/blog/27-revision-43/',0,'revision','',0),(98,2,'2011-06-30 13:40:24','2011-06-30 12:40:24','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\r\n<p style=\"text-align: center;\">&nbsp;</p>\r\n\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\n&nbsp;\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n<h3>RoleProvider</h3>\r\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Sign in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    var identity = new MyIdentity(username, true);\r\n    var principal = new MyPrincipal(identity, identity.Roles);\r\n    HttpContext.Current.User = principal;\r\n}</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null,\r\n    DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\r\n<h3>Reading user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\r\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-44','','','2011-06-30 13:40:24','2011-06-30 12:40:24','',27,'http://ole.michelsen.dk/blog/27-revision-44/',0,'revision','',0),(99,2,'2011-06-30 13:55:20','2011-06-30 12:55:20','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<p style=\"text-align: center;\">&nbsp;</p>\n\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the MSDN sample code.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-45','','','2011-06-30 13:55:20','2011-06-30 12:55:20','',27,'http://ole.michelsen.dk/blog/27-revision-45/',0,'revision','',0),(100,2,'2011-06-30 13:56:51','2011-06-30 12:56:51','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<p style=\"text-align: center;\">&nbsp;</p>\n\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also create your own RoleProvider. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-46','','','2011-06-30 13:56:51','2011-06-30 12:56:51','',27,'http://ole.michelsen.dk/blog/27-revision-46/',0,'revision','',0),(103,2,'2011-06-30 14:26:45','2011-06-30 13:26:45','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat YourselfDRY.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-49','','','2011-06-30 14:26:45','2011-06-30 13:26:45','',27,'http://ole.michelsen.dk/blog/27-revision-49/',0,'revision','',0),(101,2,'2011-06-30 14:00:05','2011-06-30 13:00:05','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\r\n<p style=\"text-align: center;\">&nbsp;</p>\r\n\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Sign in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    var identity = new MyIdentity(username, true);\r\n    var principal = new MyPrincipal(identity, identity.Roles);\r\n    HttpContext.Current.User = principal;\r\n}</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null,\r\n    DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\r\n<h3>Reading user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\r\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Overview of a custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-47','','','2011-06-30 14:00:05','2011-06-30 13:00:05','',27,'http://ole.michelsen.dk/blog/27-revision-47/',0,'revision','',0),(102,2,'2011-06-30 14:00:31','2011-06-30 13:00:31','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\r\n<p style=\"text-align: center;\">&nbsp;</p>\r\n\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not DRY.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission-stuff, so if you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Sign in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    var identity = new MyIdentity(username, true);\r\n    var principal = new MyPrincipal(identity, identity.Roles);\r\n    HttpContext.Current.User = principal;\r\n}</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null,\r\n    DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\r\n<h3>Reading user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\r\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Custom MembershipProvider, IPrincipal and IIdentity','','inherit','open','open','','27-revision-48','','','2011-06-30 14:00:31','2011-06-30 13:00:31','',27,'http://ole.michelsen.dk/blog/27-revision-48/',0,'revision','',0),(104,2,'2011-06-30 14:30:15','2011-06-30 13:30:15','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. This is used for attribute PrincipalPermission:\n<pre>[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\n&nbsp;\n\nIf you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-50','','','2011-06-30 14:30:15','2011-06-30 13:30:15','',27,'http://ole.michelsen.dk/blog/27-revision-50/',0,'revision','',0),(105,2,'2011-06-30 14:38:19','2011-06-30 13:38:19','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nDuring this process I became quite confused about the sheer number of different classes you have to implement/override however, and ended up spending quite a lot of time in forum threads searching for help. Most of my problems were attributed to not understanding the Provider pattern, so here I will attempt to give an implementation oriented overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. IsInRole(<em>r</em>) is called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new home-built security attributes, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. It\'s a subtle distinction to IIdentity, and it still confuses me a bit. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nJust a short mention, as I have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Sign in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! In global.asax we overwrite the generic objects, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. If you lock out the user, the server will not know for up to 2 min though, so you have to think about the security implications.\n<h3>Reading user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this wrapper for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyways.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>\n<a href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">Setting IIdentity and IPrincipal in Global.asax</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-51','','','2011-06-30 14:38:19','2011-06-30 13:38:19','',27,'http://ole.michelsen.dk/blog/27-revision-51/',0,'revision','',0),(109,2,'2011-07-01 10:55:13','2011-07-01 09:55:13','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    if (Request.IsAuthenticated)\n    {\n        string username = HttpContext.Current.User.Identity.Name;\n        var identity = new MyIdentity(username, true);\n        var principal = new MyPrincipal(identity, identity.Roles);\n        HttpContext.Current.User = principal;\n    }\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. But if you lock out/delete the user server-sider, the server will not know for that period though, so you have to consider the security implications.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so anyhow it\'s nice to have.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-55','','','2011-07-01 10:55:13','2011-07-01 09:55:13','',27,'http://ole.michelsen.dk/blog/27-revision-55/',0,'revision','',0),(108,2,'2011-06-30 15:32:48','2011-06-30 14:32:48','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. But if you lock out/delete the user server-sider, the server will not know for that period though, so you have to consider the security implications.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so anyhow it\'s nice to have.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-54','','','2011-06-30 15:32:48','2011-06-30 14:32:48','',27,'http://ole.michelsen.dk/blog/27-revision-54/',0,'revision','',0),(106,2,'2011-06-30 15:00:42','2011-06-30 14:00:42','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time in searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n<h2>Creating the backend MembershipProvider-stuff</h2>\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a bool field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. <code>IsInRole(<em>r</em>)</code> is called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThis class represents the user and holds all additional information <em>about </em>the user. As my MVC book((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contain our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    var identity = new MyIdentity(username, true);\n    var principal = new MyPrincipal(identity, identity.Roles);\n    HttpContext.Current.User = principal;\n}</pre>\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. But if you lock out/delete the user server-sider, the server will not know for that period though, so you have to consider the security implications.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so anyhow it\'s nice to have.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-52','','','2011-06-30 15:00:42','2011-06-30 14:00:42','',27,'http://ole.michelsen.dk/blog/27-revision-52/',0,'revision','',0),(107,2,'2011-06-30 15:02:44','2011-06-30 14:02:44','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time in searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nThere\'s a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represent the context of a logged in user, which is what you can actually <em>use</em> in your web pages. They are created by all the backend stuff that we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nThe IPrincipal class represents the security context of your (authenticated) user and only tells you if the user is authenticated and is in a given role. <code>IsInRole(<em>r</em>)</code> is called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is the class where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThis class represents the user and holds all additional information <em>about </em>the user. As my MVC book((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI have skipped using it (I don\'t allow my users to customize much): this interface is for settings that the user can manipulate. Examples could be selection of web site color, number of pages to display in a product list etc. The fields here are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider system instead of the default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens next on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThis is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and store the username as a generic IPrincipal and IIdentity.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contain our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    var identity = new MyIdentity(username, true);\r\n    var principal = new MyPrincipal(identity, identity.Roles);\r\n    HttpContext.Current.User = principal;\r\n}</pre>\r\nYou just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null,\r\n    DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. But if you lock out/delete the user server-sider, the server will not know for that period though, so you have to consider the security implications.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so anyhow it\'s nice to have.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-53','','','2011-06-30 15:02:44','2011-06-30 14:02:44','',27,'http://ole.michelsen.dk/blog/27-revision-53/',0,'revision','',0),(111,2,'2011-07-01 11:04:57','2011-07-01 10:04:57','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    if (Request.IsAuthenticated)\n    {\n        string username = HttpContext.Current.User.Identity.Name;\n        var identity = new MyIdentity(username, true);\n        var principal = new MyPrincipal(identity, identity.Roles);\n        HttpContext.Current.User = principal;\n    }\n}</pre>\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-57','','','2011-07-01 11:04:57','2011-07-01 10:04:57','',27,'http://ole.michelsen.dk/blog/27-revision-57/',0,'revision','',0),(110,2,'2011-07-01 10:57:10','2011-07-01 09:57:10','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    if (Request.IsAuthenticated)\n    {\n        string username = HttpContext.Current.User.Identity.Name;\n        var identity = new MyIdentity(username, true);\n        var principal = new MyPrincipal(identity, identity.Roles);\n        HttpContext.Current.User = principal;\n    }\n}</pre>\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling Membership.GetUser(<em>u</em>). You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! If you are loading the user data from your database, this will probably not perform optimal. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null,\n    DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. But if you lock out/delete the user server-sider, the server will not know for that period though, so you have to consider the security implications.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so anyhow it\'s nice to have.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the interfaces and classes referenced above.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nJust to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-56','','','2011-07-01 10:57:10','2011-07-01 09:57:10','',27,'http://ole.michelsen.dk/blog/27-revision-56/',0,'revision','',0),(112,2,'2011-07-01 11:49:34','2011-07-01 10:49:34','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    if (Request.IsAuthenticated)\n    {\n        string username = HttpContext.Current.User.Identity.Name;\n        var identity = new MyIdentity(username, true);\n        var principal = new MyPrincipal(identity, identity.Roles);\n        HttpContext.Current.User = principal;\n    }\n}</pre>\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\n\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','','inherit','open','open','','27-revision-58','','','2011-07-01 11:49:34','2011-07-01 10:49:34','',27,'http://ole.michelsen.dk/blog/27-revision-58/',0,'revision','',0),(114,2,'2011-07-01 12:04:49','2011-07-01 11:04:49','','Blog','','publish','open','open','','index','','','2011-10-03 23:12:35','2011-10-03 22:12:35','',0,'http://ole.michelsen.dk/blog/?p=114',2,'nav_menu_item','',0),(115,2,'2011-07-05 11:39:20','2011-07-05 10:39:20','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\n\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\n\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\n<h2>Creating the backend MembershipProvider-stuff</h2>\n<h3>MembershipProvider</h3>\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\n\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\n\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\n<h3>MembershipUser</h3>\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\n\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\n<h3>RoleProvider</h3>\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\n<h2>Creating the \"front end\" stuff</h2>\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\n<h3>IPrincipal</h3>\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\nstatic void DoAdminStuff()\n{\n...\n}</pre>\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\n<h3>IIdentity</h3>\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\n<h3>Profile</h3>\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\n &lt;providers&gt;\n &lt;clear/&gt;\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\n      connectionStringName=\"ApplicationServices\"\n      applicationName=\"/\" /&gt;\n &lt;/providers&gt;\n&lt;/membership&gt;</pre>\n<h3>Signing in a user</h3>\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\n<h3>Application_AuthenticateRequest</h3>\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\n\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\n{\n    if (Request.IsAuthenticated)\n    {\n        string username = HttpContext.Current.User.Identity.Name;\n        var identity = new MyIdentity(username, true);\n        var principal = new MyPrincipal(identity, identity.Roles);\n        HttpContext.Current.User = principal;\n    }\n}</pre>\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\n<ol>\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\n	<li>Cache the database object on your server between requests</li>\n</ol>\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\n    Cache.NoSlidingExpiration);</pre>\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\n\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\n<h3>Reading our user data in a page</h3>\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\n<pre lang=\"csharp\">public static class UserContext\n{\n    public static MyPrincipal User { return (MyPrincipal)User; }\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\n}</pre>\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\n<h2>References</h2>\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\n\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\n\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\n\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\n\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-autosave','','','2011-07-05 11:39:20','2011-07-05 10:39:20','',27,'http://ole.michelsen.dk/blog/27-autosave/',0,'revision','',0),(116,2,'2011-07-05 11:36:59','2011-07-05 10:36:59','','MembershipProvider diagram overview','Overview of the MembershipProvider model','inherit','open','open','','membershipprovider-drawing-pencil','','','2011-07-05 11:36:59','2011-07-05 10:36:59','',27,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg',0,'attachment','image/jpeg',0),(117,2,'2011-07-01 11:53:42','2011-07-01 10:53:42','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_95\" align=\"aligncenter\" width=\"547\" caption=\"Overview of the MembershipProvider model\"]<img class=\"size-full wp-image-95 \" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/06/MembershipProvider.png\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"547\" height=\"225\" />[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-59','','','2011-07-01 11:53:42','2011-07-01 10:53:42','',27,'http://ole.michelsen.dk/blog/27-revision-59/',0,'revision','',0),(119,2,'2010-10-21 07:38:38','2010-10-21 07:38:38','This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.','About','','inherit','open','open','','2-revision','','','2010-10-21 07:38:38','2010-10-21 07:38:38','',2,'http://ole.michelsen.dk/blog/2-revision/',0,'revision','',0),(118,2,'2011-07-05 11:37:43','2011-07-05 10:37:43','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"alignnone\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-60','','','2011-07-05 11:37:43','2011-07-05 10:37:43','',27,'http://ole.michelsen.dk/blog/27-revision-60/',0,'revision','',0),(120,2,'2011-07-14 17:09:09','2011-07-14 16:09:09','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the option to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','publish','open','open','','gmail-plus-your-email-to-filter-maillists-and-catch-spam','','','2011-11-27 10:57:49','2011-11-27 09:57:49','',0,'http://ole.michelsen.dk/blog/?p=120',0,'post','',0),(121,2,'2011-07-30 09:40:09','2011-07-30 08:40:09','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.','Gmail+ (plus) - organizing maillists and catching spam','','inherit','open','open','','120-revision','','','2011-07-30 09:40:09','2011-07-30 08:40:09','',120,'http://ole.michelsen.dk/blog/120-revision/',0,'revision','',0),(122,2,'2011-07-13 13:36:32','2011-07-13 12:36:32','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.','Gmail+ your emails - sort maillists and catch spam','','inherit','open','open','','120-revision-2','','','2011-07-13 13:36:32','2011-07-13 12:36:32','',120,'http://ole.michelsen.dk/blog/120-revision-2/',0,'revision','',0),(123,2,'2011-07-13 13:36:44','2011-07-13 12:36:44','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.','Gmail+ your email - sort maillists and catch spam','','inherit','open','open','','120-revision-3','','','2011-07-13 13:36:44','2011-07-13 12:36:44','',120,'http://ole.michelsen.dk/blog/120-revision-3/',0,'revision','',0),(124,2,'2011-07-13 13:38:55','2011-07-13 12:38:55','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\n\n\n<h3>Google Apps accounts</h3>\nYou can also use this feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - sort maillists and catch spam','','inherit','open','open','','120-revision-4','','','2011-07-13 13:38:55','2011-07-13 12:38:55','',120,'http://ole.michelsen.dk/blog/120-revision-4/',0,'revision','',0),(125,2,'2011-07-13 15:39:50','2011-07-13 14:39:50','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is brian@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nbrian+twitter@gmail.com\nbrian+facebook@gmail.com\nbrian+hpcomic@gmail.com\n\nEach of these aliases will be sent to your normal email, but now you can easily filter the mails you receive. If they come from brian+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\n\n<h3>Google Apps accounts</h3>\nYou can also use this feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - sort maillists and catch spam','','inherit','open','open','','120-revision-5','','','2011-07-13 15:39:50','2011-07-13 14:39:50','',120,'http://ole.michelsen.dk/blog/120-revision-5/',0,'revision','',0),(126,2,'2011-07-13 16:40:46','2011-07-13 15:40:46','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to brian+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find out that the email ole+evilmaillist@gmail.com, which you used to subscribe on some maillist, has been sold to spammers, you can just direct all mail to that address directly into thrash. Easy peasy!\n\n<h3>Google Apps accounts</h3>\nYou can also use this feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - sort maillists and catch spam','','inherit','open','open','','120-revision-6','','','2011-07-13 16:40:46','2011-07-13 15:40:46','',120,'http://ole.michelsen.dk/blog/120-revision-6/',0,'revision','',0),(127,2,'2011-07-13 16:51:30','2011-07-13 15:51:30','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert, move and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - sort maillists and catch spam','','inherit','open','open','','120-revision-7','','','2011-07-13 16:51:30','2011-07-13 15:51:30','',120,'http://ole.michelsen.dk/blog/120-revision-7/',0,'revision','',0),(130,2,'2011-07-13 16:55:16','2011-07-13 15:55:16','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-10','','','2011-07-13 16:55:16','2011-07-13 15:55:16','',120,'http://ole.michelsen.dk/blog/120-revision-10/',0,'revision','',0),(128,2,'2011-07-13 16:52:05','2011-07-13 15:52:05','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert, move and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-8','','','2011-07-13 16:52:05','2011-07-13 15:52:05','',120,'http://ole.michelsen.dk/blog/120-revision-8/',0,'revision','',0),(129,2,'2011-07-13 16:53:08','2011-07-13 15:53:08','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert, move and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however the inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-9','','','2011-07-13 16:53:08','2011-07-13 15:53:08','',120,'http://ole.michelsen.dk/blog/120-revision-9/',0,'revision','',0),(131,2,'2011-07-13 16:55:44','2011-07-13 15:55:44','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail, and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-11','','','2011-07-13 16:55:44','2011-07-13 15:55:44','',120,'http://ole.michelsen.dk/blog/120-revision-11/',0,'revision','',0),(132,2,'2011-07-13 16:58:39','2011-07-13 15:58:39','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail and weed out sources of spam. If your find that the email ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-12','','','2011-07-13 16:58:39','2011-07-13 15:58:39','',120,'http://ole.michelsen.dk/blog/120-revision-12/',0,'revision','',0),(133,2,'2011-07-13 17:00:06','2011-07-13 16:00:06','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-13','','','2011-07-13 17:00:06','2011-07-13 16:00:06','',120,'http://ole.michelsen.dk/blog/120-revision-13/',0,'revision','',0),(134,2,'2011-07-14 11:32:31','2011-07-14 10:32:31','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. If they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-14','','','2011-07-14 11:32:31','2011-07-14 10:32:31','',120,'http://ole.michelsen.dk/blog/120-revision-14/',0,'revision','',0),(135,2,'2011-07-14 11:35:18','2011-07-14 10:35:18','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\n\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\n\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\n\nole+twitter@gmail.com\nole+facebook@gmail.com\nole+hpcomic@gmail.com\n\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\n\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\n\n<h2>The dotted line</h2>\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use these variations:\n\no.l.e.michelsen@gmail.com\nolemichelse.n@gmail.com\nolemichelsen@gmail.com\n\nAnd so on. All of these aliases will still point to your normal email address.\n\n<h3>Google Apps accounts</h3>\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-15','','','2011-07-14 11:35:18','2011-07-14 10:35:18','',120,'http://ole.michelsen.dk/blog/120-revision-15/',0,'revision','',0),(136,2,'2011-07-14 14:22:50','2011-07-14 13:22:50','','Gmail','','inherit','open','open','','gmail','','','2011-07-14 14:22:50','2011-07-14 13:22:50','',120,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png',0,'attachment','image/png',0),(137,2,'2011-07-14 14:05:38','2011-07-14 13:05:38','A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h3>Google Apps accounts</h3>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-16','','','2011-07-14 14:05:38','2011-07-14 13:05:38','',120,'http://ole.michelsen.dk/blog/120-revision-16/',0,'revision','',0),(138,2,'2011-07-14 14:23:48','2011-07-14 13:23:48','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-17','','','2011-07-14 14:23:48','2011-07-14 13:23:48','',120,'http://ole.michelsen.dk/blog/120-revision-17/',0,'revision','',0),(139,2,'2011-07-14 14:24:33','2011-07-14 13:24:33','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address. This text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-18','','','2011-07-14 14:24:33','2011-07-14 13:24:33','',120,'http://ole.michelsen.dk/blog/120-revision-18/',0,'revision','',0),(140,2,'2011-07-14 14:24:53','2011-07-14 13:24:53','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-19','','','2011-07-14 14:24:53','2011-07-14 13:24:53','',120,'http://ole.michelsen.dk/blog/120-revision-19/',0,'revision','',0),(141,2,'2011-07-14 14:26:53','2011-07-14 13:26:53','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-20','','','2011-07-14 14:26:53','2011-07-14 13:26:53','',120,'http://ole.michelsen.dk/blog/120-revision-20/',0,'revision','',0),(142,2,'2011-07-14 14:28:23','2011-07-14 13:28:23','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-21','','','2011-07-14 14:28:23','2011-07-14 13:28:23','',120,'http://ole.michelsen.dk/blog/120-revision-21/',0,'revision','',0),(143,2,'2011-07-14 14:28:42','2011-07-14 13:28:42','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','','inherit','open','open','','120-revision-22','','','2011-07-14 14:28:42','2011-07-14 13:28:42','',120,'http://ole.michelsen.dk/blog/120-revision-22/',0,'revision','',0),(144,2,'2011-07-14 14:42:30','2011-07-14 13:42:30','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-23','','','2011-07-14 14:42:30','2011-07-14 13:42:30','',120,'http://ole.michelsen.dk/blog/120-revision-23/',0,'revision','',0),(145,2,'2011-07-14 14:43:50','2011-07-14 13:43:50','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-24','','','2011-07-14 14:43:50','2011-07-14 13:43:50','',120,'http://ole.michelsen.dk/blog/120-revision-24/',0,'revision','',0),(146,2,'2011-07-14 16:18:35','2011-07-14 15:18:35','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-autosave','','','2011-07-14 16:18:35','2011-07-14 15:18:35','',120,'http://ole.michelsen.dk/blog/120-autosave/',0,'revision','',0),(147,2,'2011-07-14 16:18:30','2011-07-14 15:18:30','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-25','','','2011-07-14 16:18:30','2011-07-14 15:18:30','',120,'http://ole.michelsen.dk/blog/120-revision-25/',0,'revision','',0),(148,2,'2011-07-14 17:10:22','2011-07-14 16:10:22','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-26','','','2011-07-14 17:10:22','2011-07-14 16:10:22','',120,'http://ole.michelsen.dk/blog/120-revision-26/',0,'revision','',0),(149,2,'2011-07-14 17:10:40','2011-07-14 16:10:40','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-27','','','2011-07-14 17:10:40','2011-07-14 16:10:40','',120,'http://ole.michelsen.dk/blog/120-revision-27/',0,'revision','',0),(150,2,'2011-07-14 17:10:45','2011-07-14 16:10:45','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-28','','','2011-07-14 17:10:45','2011-07-14 16:10:45','',120,'http://ole.michelsen.dk/blog/120-revision-28/',0,'revision','',0),(151,2,'2011-07-14 17:11:03','2011-07-14 16:11:03','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-29','','','2011-07-14 17:11:03','2011-07-14 16:11:03','',120,'http://ole.michelsen.dk/blog/120-revision-29/',0,'revision','',0),(152,2,'2011-06-22 14:18:15','2011-06-22 13:18:15','','Auto Draft','','inherit','open','open','','68-revision','','','2011-06-22 14:18:15','2011-06-22 13:18:15','',68,'http://ole.michelsen.dk/blog/68-revision/',0,'revision','',0),(159,2,'2011-07-25 09:33:32','2011-07-25 08:33:32','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\n<ul>\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Same convenience as the normal bookmarklet</li>\n</ul>\nThe bookmarklet looks like this:\n<pre>javascript:(function(){\n    var w = window.open(\'about:blank\'), \n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>','View source on the iPad','','inherit','open','open','','68-revision-7','','','2011-07-25 09:33:32','2011-07-25 08:33:32','',68,'http://ole.michelsen.dk/blog/68-revision-7/',0,'revision','',0),(156,2,'2011-07-25 09:31:21','2011-07-25 08:31:21','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\r\n<ul>\r\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'), \r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>','View source on the iPad','','inherit','open','open','','68-revision-4','','','2011-07-25 09:31:21','2011-07-25 08:31:21','',68,'http://ole.michelsen.dk/blog/68-revision-4/',0,'revision','',0),(155,2,'2011-07-25 09:30:37','2011-07-25 08:30:37','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\n<ul>\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Same convenience as the normal bookmarklet</li>\n</ul>\n<div><span style=\"font-size: small;\"><span class=\"Apple-style-span\" style=\"line-height: 24px;\">The bookmarklet looks like this:</span></span></div>\n<div>\n<pre>javascript:(function(){\n    var w = window.open(\'about:blank\'), \n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\n</div>','View source on the iPad','','inherit','open','open','','68-revision-3','','','2011-07-25 09:30:37','2011-07-25 08:30:37','',68,'http://ole.michelsen.dk/blog/68-revision-3/',0,'revision','',0),(157,2,'2011-07-25 09:31:34','2011-07-25 08:31:34','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\r\n<ul>\r\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'), \r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>','View source on the iPad','','inherit','open','open','','68-revision-5','','','2011-07-25 09:31:34','2011-07-25 08:31:34','',68,'http://ole.michelsen.dk/blog/68-revision-5/',0,'revision','',0),(158,2,'2011-07-25 09:32:42','2011-07-25 08:32:42','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\r\n<ul>\r\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'), \r\n        s = w.document;\r\n    s.write(\'<!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>','View source on the iPad','','inherit','open','open','','68-revision-6','','','2011-07-25 09:32:42','2011-07-25 08:32:42','',68,'http://ole.michelsen.dk/blog/68-revision-6/',0,'revision','',0),(160,2,'2011-07-25 10:31:34','2011-07-25 09:31:34','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\n<ul>\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Same convenience as the normal bookmarklet</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'), \n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nNote that the source shown is the DOM, and not the actual source. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad','','inherit','open','open','','68-revision-8','','','2011-07-25 10:31:34','2011-07-25 09:31:34','',68,'http://ole.michelsen.dk/blog/68-revision-8/',0,'revision','',0),(161,2,'2011-07-25 11:07:35','2011-07-25 10:07:35','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\n<ul>\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Same convenience as the normal bookmarklet</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nNote that the source shown is the generated DOM, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad','','inherit','open','open','','68-revision-9','','','2011-07-25 11:07:35','2011-07-25 10:07:35','',68,'http://ole.michelsen.dk/blog/68-revision-9/',0,'revision','',0),(162,2,'2011-07-25 11:08:24','2011-07-25 10:08:24','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\r\n<ul>\r\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nNote that the source shown is the generated <abbr title=\"Document Object Models\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad','','inherit','open','open','','68-revision-10','','','2011-07-25 11:08:24','2011-07-25 10:08:24','',68,'http://ole.michelsen.dk/blog/68-revision-10/',0,'revision','',0),(163,2,'2011-07-25 11:08:36','2011-07-25 10:08:36','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was greatly inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but the it this solution still lacks syntax highlighting. Therefore I have created an alternative solution, which can be used just like the bookmarklet, but improves upon it on a couple of areas:\r\n<ul>\r\n	<li>HTML, CSS and JavaScript is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nNote that the source shown is the generated <abbr title=\"Document Object Models\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad','','inherit','open','open','','68-revision-11','','','2011-07-25 11:08:36','2011-07-25 10:08:36','',68,'http://ole.michelsen.dk/blog/68-revision-11/',0,'revision','',0),(164,2,'2011-07-25 11:37:19','2011-07-25 10:37:19','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. Instead I\'ve created an alternative solution, which can be used just like the bookmarklet, but improves upon it these issues:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Same convenience as the normal bookmarklet</li>\n	<li>Text is fully selectable on the iPad</li>\n	<li>... and of course it also works on the iPhone ;-)</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-12','','','2011-07-25 11:37:19','2011-07-25 10:37:19','',68,'http://ole.michelsen.dk/blog/68-revision-12/',0,'revision','',0),(165,2,'2011-07-25 11:37:33','2011-07-25 10:37:33','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. Instead I\'ve created an alternative solution, which can be used just like the bookmarklet, but improves upon it these issues:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-13','','','2011-07-25 11:37:33','2011-07-25 10:37:33','',68,'http://ole.michelsen.dk/blog/68-revision-13/',0,'revision','',0),(166,2,'2011-07-25 11:37:37','2011-07-25 10:37:37','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. Instead I\'ve created an alternative solution, which can be used just like the bookmarklet, but improves upon it these issues:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-14','','','2011-07-25 11:37:37','2011-07-25 10:37:37','',68,'http://ole.michelsen.dk/blog/68-revision-14/',0,'revision','',0),(167,2,'2011-07-25 11:37:48','2011-07-25 10:37:48','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. Instead I\'ve created an alternative solution, which can be used just like the bookmarklet, but improves upon it these issues:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Same convenience as the normal bookmarklet</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-15','','','2011-07-25 11:37:48','2011-07-25 10:37:48','',68,'http://ole.michelsen.dk/blog/68-revision-15/',0,'revision','',0),(173,2,'2011-07-25 14:38:56','2011-07-25 13:38:56','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"/viewsource/bookmarklet.min.js\">View Source</a>\r\n\r\nasdflkjaslkdf\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-21','','','2011-07-25 14:38:56','2011-07-25 13:38:56','',68,'http://ole.michelsen.dk/blog/68-revision-21/',0,'revision','',0),(171,2,'2011-07-25 14:37:40','2011-07-25 13:37:40','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\">Loading Source\");a.close();var b=a.body.appendChild(a.createElement(\"form\"));b.setAttribute(\"method\",\"post\");b.setAttribute(\"action\",\"http://ole.michelsen.dk/viewsource/?uri=\"+location.href);var c=b.appendChild(a.createElement(\"input\"));c.setAttribute(\"type\",\"hidden\");c.setAttribute(\"name\",\"DOM\");c.setAttribute(\"value\",document.documentElement.innerHTML);b.submit()})()\">View Source</a>\r\n\r\nasdflkjaslkdf\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-19','','','2011-07-25 14:37:40','2011-07-25 13:37:40','',68,'http://ole.michelsen.dk/blog/68-revision-19/',0,'revision','',0),(168,2,'2011-07-25 14:30:06','2011-07-25 13:30:06','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n	<li>... and of course it also works on the iPhone ;-)</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(&quot;about:blank&quot;),a=d.document;a.write(&quot;<!DOCTYPE html><html><head><title>Loading Source</title></head><body></body></html>&quot;);a.close();var b=a.body.appendChild(a.createElement(&quot;form&quot;));b.setAttribute(&quot;method&quot;,&quot;post&quot;);b.setAttribute(&quot;action&quot;,&quot;http://ole.michelsen.dk/viewsource/?uri=&quot;+location.href);var c=b.appendChild(a.createElement(&quot;input&quot;));c.setAttribute(&quot;type&quot;,&quot;hidden&quot;);c.setAttribute(&quot;name&quot;,&quot;DOM&quot;);c.setAttribute(&quot;value&quot;,document.documentElement.innerHTML);b.submit()})()\">View Source</a>\n\n&nbsp;\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-16','','','2011-07-25 14:30:06','2011-07-25 13:30:06','',68,'http://ole.michelsen.dk/blog/68-revision-16/',0,'revision','',0),(170,2,'2011-07-25 14:36:58','2011-07-25 13:36:58','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\"about:blank\"),a=d.document;a.write(\"<!DOCTYPE html><html><head><title>Loading Source</title></head><body></body></html>\");a.close();var b=a.body.appendChild(a.createElement(\"form\"));b.setAttribute(\"method\",\"post\");b.setAttribute(\"action\",\"http://ole.michelsen.dk/viewsource/?uri=\"+location.href);var c=b.appendChild(a.createElement(\"input\"));c.setAttribute(\"type\",\"hidden\");c.setAttribute(\"name\",\"DOM\");c.setAttribute(\"value\",document.documentElement.innerHTML);b.submit()})()\">View Source</a>\r\n\r\nasdflkjaslkdf\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-18','','','2011-07-25 14:36:58','2011-07-25 13:36:58','',68,'http://ole.michelsen.dk/blog/68-revision-18/',0,'revision','',0),(169,2,'2011-07-25 14:36:09','2011-07-25 13:36:09','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n	<li>... and of course it also works on the iPhone ;-)</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(&quot;about:blank&quot;),a=d.document;a.write(&quot;<!DOCTYPE html><html><head><title>Loading Source</title></head><body></body></html>&quot;);a.close();var b=a.body.appendChild(a.createElement(&quot;form&quot;));b.setAttribute(&quot;method&quot;,&quot;post&quot;);b.setAttribute(&quot;action&quot;,&quot;http://ole.michelsen.dk/viewsource/?uri=&quot;+location.href);var c=b.appendChild(a.createElement(&quot;input&quot;));c.setAttribute(&quot;type&quot;,&quot;hidden&quot;);c.setAttribute(&quot;name&quot;,&quot;DOM&quot;);c.setAttribute(&quot;value&quot;,document.documentElement.innerHTML);b.submit()})()\">View Source</a>\n\nasdflkjaslkdf\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-17','','','2011-07-25 14:36:09','2011-07-25 13:36:09','',68,'http://ole.michelsen.dk/blog/68-revision-17/',0,'revision','',0),(172,2,'2011-07-25 14:38:07','2011-07-25 13:38:07','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\r\n<ul>\r\n	<li>The code is syntax highlighted</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable on the iPad</li>\r\n	<li>... and of course it also works on the iPhone ;-)</li>\r\n</ul>\r\nThe bookmarklet looks like this:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n	var f = s.body.appendChild(s.createElement(\'form\'));\r\n    	f.setAttribute(\'method\',\'post\');\r\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n	var i = f.appendChild(s.createElement(\'input\'));\r\n		i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\"Loading Source\");a.close();var b=a.body.appendChild(a.createElement(\"form\"));b.setAttribute(\"method\",\"post\");b.setAttribute(\"action\",\"http://ole.michelsen.dk/viewsource/?uri=\"+location.href);var c=b.appendChild(a.createElement(\"input\"));c.setAttribute(\"type\",\"hidden\");c.setAttribute(\"name\",\"DOM\");c.setAttribute(\"value\",document.documentElement.innerHTML);b.submit()})()\">View Source</a>\r\n\r\nasdflkjaslkdf\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-20','','','2011-07-25 14:38:07','2011-07-25 13:38:07','',68,'http://ole.michelsen.dk/blog/68-revision-20/',0,'revision','',0),(174,2,'2011-07-25 14:46:58','2011-07-25 13:46:58','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but that still lacks syntax highlighting. So I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n	<li>... and of course it also works on the iPhone ;-)</li>\n</ul>\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\">View Source</a>\n\nasdflkjaslkdf\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-22','','','2011-07-25 14:46:58','2011-07-25 13:46:58','',68,'http://ole.michelsen.dk/blog/68-revision-22/',0,'revision','',0),(175,2,'2011-07-25 16:02:29','2011-07-25 15:02:29','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it lacks syntax highlighting and links are not clickable (nor easily selected and copied). Therefore I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n</ul>\nBasically it works using a JavaScript bookmarklet to post the DOM to my server, which then takes care of syntax highlighting and clickable URI\'s.\n\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em>\n\nTo add it directly from your iPad (or iPhone) <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All &gt; Copy. Then add  this page as a bookmark, and call it \"View Source\". Then edit that same bookmark, and paste the code you just copied into the URL. Voilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-23','','','2011-07-25 16:02:29','2011-07-25 15:02:29','',68,'http://ole.michelsen.dk/blog/68-revision-23/',0,'revision','',0),(176,2,'2011-07-25 16:04:12','2011-07-25 15:04:12','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nI was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it lacks syntax highlighting and links are not clickable (nor easily selected and copied). Therefore I\'ve created an alternative solution which addresses these shortcomings, but can still be used just like the bookmarklet:\n<ul>\n	<li>The code is syntax highlighted</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n</ul>\nBasically it works using a JavaScript bookmarklet to post the DOM to my server, which then takes care of syntax highlighting and clickable URI\'s.\n\nThe bookmarklet looks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em>\n\nTo add it directly from your iPad (or iPhone) add this page as a bookmark. Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All &gt; Copy. Then edit that same bookmark, and paste the code you just copied into the URL and call it \"View Source\". Voilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-24','','','2011-07-25 16:04:12','2011-07-25 15:04:12','',68,'http://ole.michelsen.dk/blog/68-revision-24/',0,'revision','',0),(177,2,'2011-07-26 12:17:47','2011-07-26 11:17:47','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it lacks syntax highlighting and links are not clickable (nor easily selected and copied). To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n</ul>\nThe bookmarklet basilooks like this:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n	var f = s.body.appendChild(s.createElement(\'form\'));\n    	f.setAttribute(\'method\',\'post\');\n    	f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n	var i = f.appendChild(s.createElement(\'input\'));\n		i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em>\n\nTo add it directly from your iPad (or iPhone), first add this page as a bookmark. Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All &gt; Copy. Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\". Voilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-25','','','2011-07-26 12:17:47','2011-07-26 11:17:47','',68,'http://ole.michelsen.dk/blog/68-revision-25/',0,'revision','',0),(178,2,'2011-07-26 12:45:52','2011-07-26 11:45:52','As a web developer I\'m frequently looking at the source of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it lacks syntax highlighting and links are not clickable (nor easily selected and copied). To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n</ul>\n<!--more-->The following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks: <a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em>\n\nTo add it directly from your iPad (or iPhone), first add this page as a bookmark. Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All &gt; Copy. Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\". Voilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-26','','','2011-07-26 12:45:52','2011-07-26 11:45:52','',68,'http://ole.michelsen.dk/blog/68-revision-26/',0,'revision','',0),(179,2,'2011-07-26 12:59:00','2011-07-26 11:59:00','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable on the iPad</li>\n</ul>\n<h2><!--more-->The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-27','','','2011-07-26 12:59:00','2011-07-26 11:59:00','',68,'http://ole.michelsen.dk/blog/68-revision-27/',0,'revision','',0),(180,2,'2011-07-27 09:52:30','2011-07-27 08:52:30','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable</li>\n</ul>\n<h2><!--more-->The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-28','','','2011-07-27 09:52:30','2011-07-27 08:52:30','',68,'http://ole.michelsen.dk/blog/68-revision-28/',0,'revision','',0),(224,2,'2011-08-17 09:28:40','2011-08-17 08:28:40','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\r\n\r\nSince localization is a basic need for all international applications, I have made a simple structure, which can be applied in situations where an entity is required to have localizable values.\r\n<!--more-->I have created a <a href=\"#projectattachment\">sample project</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll go through the data structure and how the articles easily can be shown with LINQ handling localization.\r\n<h3>Data structure</h3>\r\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\r\n\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h3>View model</h3>\r\nBefore we get the data, we need to structure it a bit for MVC. This view model class will contain the Article entry, as well as a Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h3>Controller</h3>\r\nNow we want to display a list of Articles. Let\'s say we want to display them in Danish, and if that is not available, we will display them in English. With LINQ we can achieve this with the following statement:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n           languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language respectively. Then, finally, we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n<h3>View</h3>\r\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation, and one with only English. Let\'s display it to check that we\'ve gotten it right:\r\n<pre lang=\"csharp\" escaped=\"true\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two Articles, the first with its Danish translation, and the second with the English fallback:\r\n\r\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\r\n\r\nBut don\'t take my word for it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\r\n\r\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','How to get localization in MVC with fallback using a single LINQ statement, translated texts will be selected if available or fallback to a default.','publish','open','open','','localization-with-fallback-using-linq','','','2011-08-17 09:28:40','2011-08-17 08:28:40','',0,'http://ole.michelsen.dk/blog/?p=224',0,'post','',0),(182,2,'2011-07-27 09:52:40','2011-07-27 08:52:40','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<h2><!--more-->The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',document.documentElement.innerHTML);\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-29','','','2011-07-27 09:52:40','2011-07-27 08:52:40','',68,'http://ole.michelsen.dk/blog/68-revision-29/',0,'revision','',0),(183,2,'2011-07-28 12:08:10','2011-07-28 11:08:10','','View Source Bookmarklet','View Source Bookmarklet','inherit','open','open','','bookmark','','','2011-07-28 12:08:10','2011-07-28 11:08:10','',68,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png',0,'attachment','image/png',0),(184,2,'2011-07-28 12:13:46','2011-07-28 11:13:46','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable</li>\n</ul>\n<div>\n\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\n\n</div>\n<h2><!--more-->The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','','inherit','open','open','','68-revision-30','','','2011-07-28 12:13:46','2011-07-28 11:13:46','',68,'http://ole.michelsen.dk/blog/68-revision-30/',0,'revision','',0),(185,2,'2011-07-28 12:29:37','2011-07-28 11:29:37','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<div>\r\n\r\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\r\n\r\n</div>\r\n<h2><!--more-->The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\" escaped=\"true\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',document.documentElement.innerHTML);b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','To view source on the iPad, create a bookmarklet which will show you the source code with syntax highlighting, clickable links for URI\'s and selectable text.','inherit','open','open','','68-revision-31','','','2011-07-28 12:29:37','2011-07-28 11:29:37','',68,'http://ole.michelsen.dk/blog/68-revision-31/',0,'revision','',0),(188,2,'2011-07-05 11:38:17','2011-07-05 10:38:17','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre>&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-61','','','2011-07-05 11:38:17','2011-07-05 10:38:17','',27,'http://ole.michelsen.dk/blog/27-revision-61/',0,'revision','',0),(186,2,'2011-07-28 12:30:34','2011-07-28 11:30:34','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<div>\r\n\r\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\r\n\r\n</div>\r\n<h2><!--more-->The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\" escaped=\"true\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','To view source on the iPad, create a bookmarklet which will show you the source code with syntax highlighting, clickable links for URI\'s and selectable text.','inherit','open','open','','68-revision-32','','','2011-07-28 12:30:34','2011-07-28 11:30:34','',68,'http://ole.michelsen.dk/blog/68-revision-32/',0,'revision','',0),(187,2,'2011-07-28 12:32:17','2011-07-28 11:32:17','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<div>\r\n\r\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\r\n\r\n</div>\r\n<!--more-->\r\n<h2>The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\" escaped=\"true\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Loading Source&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','To view source on the iPad, create a bookmarklet which will show you the source code with syntax highlighting, clickable links for URI\'s and selectable text.','inherit','open','open','','68-revision-33','','','2011-07-28 12:32:17','2011-07-28 11:32:17','',68,'http://ole.michelsen.dk/blog/68-revision-33/',0,'revision','',0),(189,2,'2011-07-24 18:33:45','2011-07-24 17:33:45','','Auto Draft','','inherit','open','open','','153-revision','','','2011-07-24 18:33:45','2011-07-24 17:33:45','',153,'http://ole.michelsen.dk/blog/153-revision/',0,'revision','',0),(191,2,'2011-07-30 17:20:30','2011-07-30 16:20:30','','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-2','','','2011-07-30 17:20:30','2011-07-30 16:20:30','',153,'http://ole.michelsen.dk/blog/153-revision-2/',0,'revision','',0),(192,2,'2011-07-30 17:39:06','2011-07-30 16:39:06','','Firefox NTLM Config','','inherit','open','open','','firefox-ntlm-config','','','2011-07-30 17:39:06','2011-07-30 16:39:06','',153,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png',0,'attachment','image/png',0),(193,2,'2011-07-30 17:41:36','2011-07-30 16:41:36','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n\nabout:config\n\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n\n<!--?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?--> network.automatic-ntlm-auth.trusted-uris\n\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-3','','','2011-07-30 17:41:36','2011-07-30 16:41:36','',153,'http://ole.michelsen.dk/blog/153-revision-3/',0,'revision','',0),(194,2,'2011-07-30 17:42:59','2011-07-30 16:42:59','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n\n<code>about:config</code>\n\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n\n<code>network.automatic-ntlm-auth.trusted-uris</code>\n\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-4','','','2011-07-30 17:42:59','2011-07-30 16:42:59','',153,'http://ole.michelsen.dk/blog/153-revision-4/',0,'revision','',0),(195,2,'2011-07-30 17:44:35','2011-07-30 16:44:35','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n\n<code>about:config</code>\n\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n\n<code>network.automatic-ntlm-auth.trusted-uris</code>\n\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-5','','','2011-07-30 17:44:35','2011-07-30 16:44:35','',153,'http://ole.michelsen.dk/blog/153-revision-5/',0,'revision','',0),(196,2,'2011-07-30 17:44:55','2011-07-30 16:44:55','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n\r\n<code>about:config</code>\r\n\r\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n\r\n<code>network.automatic-ntlm-auth.trusted-uris</code>\r\n\r\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-6','','','2011-07-30 17:44:55','2011-07-30 16:44:55','',153,'http://ole.michelsen.dk/blog/153-revision-6/',0,'revision','',0),(197,2,'2011-07-30 17:46:07','2011-07-30 16:46:07','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n\r\n\r\n\r\n<blockquote>about:config</blockquote>\r\n\r\n\r\n\r\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n\r\n<code>network.automatic-ntlm-auth.trusted-uris</code>\r\n\r\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-7','','','2011-07-30 17:46:07','2011-07-30 16:46:07','',153,'http://ole.michelsen.dk/blog/153-revision-7/',0,'revision','',0),(198,2,'2011-07-30 17:46:10','2011-07-30 16:46:10','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n\r\n\r\n\r\n<blockquote>about:config</blockquote>\r\n\r\n\r\n\r\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n\r\n<code>network.automatic-ntlm-auth.trusted-uris</code>\r\n\r\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-8','','','2011-07-30 17:46:10','2011-07-30 16:46:10','',153,'http://ole.michelsen.dk/blog/153-revision-8/',0,'revision','',0),(199,2,'2011-07-30 17:46:36','2011-07-30 16:46:36','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. However it\'s quite easy to enable this in Firefox as well, and only requires a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with a warning, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-9','','','2011-07-30 17:46:36','2011-07-30 16:46:36','',153,'http://ole.michelsen.dk/blog/153-revision-9/',0,'revision','',0),(200,2,'2011-08-05 09:10:20','2011-08-05 08:10:20','','Firefox Warranty Warning','','inherit','open','open','','firefox-warranty-warning','','','2011-08-05 09:10:20','2011-08-05 08:10:20','',153,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png',0,'attachment','image/png',0),(201,2,'2011-08-05 09:12:33','2011-08-05 08:12:33','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox as well, and it only requires a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n<blockquote>about:config</blockquote>\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-10','','','2011-08-05 09:12:33','2011-08-05 08:12:33','',153,'http://ole.michelsen.dk/blog/153-revision-10/',0,'revision','',0),(203,2,'2011-08-05 09:16:32','2011-08-05 08:16:32','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox as well with a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n<blockquote>about:config</blockquote>\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-12','','','2011-08-05 09:16:32','2011-08-05 08:16:32','',153,'http://ole.michelsen.dk/blog/153-revision-12/',0,'revision','',0),(202,2,'2011-08-05 09:13:16','2011-08-05 08:13:16','When creating intranet websites, Windows Authentication will take care of all your user identification needs. In Internet Explorer (and Chrome), the browser will automatically pass the logged in Active Directory user credentials, but Firefox doesn\'t and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox as well, and it only requires a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-11','','','2011-08-05 09:13:16','2011-08-05 08:13:16','',153,'http://ole.michelsen.dk/blog/153-revision-11/',0,'revision','',0),(204,2,'2011-08-05 09:31:24','2011-08-05 08:31:24','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass the logged in Active Directory user credentials to the server, but Firefox doesn\'t and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox as well with a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n<blockquote>about:config</blockquote>\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\nDouble-click this value and add the domain of your intranet website, i.e. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by comma separating them. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Active Directory','','inherit','open','open','','153-revision-13','','','2011-08-05 09:31:24','2011-08-05 08:31:24','',153,'http://ole.michelsen.dk/blog/153-revision-13/',0,'revision','',0),(206,2,'2011-08-07 10:41:10','2011-08-07 09:41:10','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your Active Directory (<abbr title=\"Active Directory\">AD</abbr>) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\n\nGo to the address bar, and enter the following:\n<blockquote>about:config</blockquote>\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\n\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\n\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website.','Firefox auto login with Windows Authentication and AD','','inherit','open','open','','153-revision-14','','','2011-08-07 10:41:10','2011-08-07 09:41:10','',153,'http://ole.michelsen.dk/blog/153-revision-14/',0,'revision','',0),(207,2,'2011-08-07 10:41:49','2011-08-07 09:41:49','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your Active Directory (<abbr title=\"Active Directory\">AD</abbr>) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website (given of course that you actually <em>have</em> permission ;-)).','Firefox auto login with Windows Authentication and AD','','inherit','open','open','','153-revision-15','','','2011-08-07 10:41:49','2011-08-07 09:41:49','',153,'http://ole.michelsen.dk/blog/153-revision-15/',0,'revision','',0),(208,2,'2011-08-07 10:41:53','2011-08-07 09:41:53','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your Active Directory (<abbr title=\"Active Directory\">AD</abbr>) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website (given of course that you actually <em>have</em> permission ;-)).','Firefox auto login with Windows Authentication and AD','','inherit','open','open','','153-revision-16','','','2011-08-07 10:41:53','2011-08-07 09:41:53','',153,'http://ole.michelsen.dk/blog/153-revision-16/',0,'revision','',0),(209,2,'2011-08-07 10:42:30','2011-08-07 09:42:30','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your Active Directory (<abbr title=\"Active Directory\">AD</abbr>) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website - given of course that you actually <em>have</em> permission ;-)','Firefox auto login with Windows Authentication and AD','','inherit','open','open','','153-revision-17','','','2011-08-07 10:42:30','2011-08-07 09:42:30','',153,'http://ole.michelsen.dk/blog/153-revision-17/',0,'revision','',0),(210,2,'2011-08-07 10:42:33','2011-08-07 09:42:33','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your Active Directory (<abbr title=\"Active Directory\">AD</abbr>) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website - given of course that you actually <em>have</em> permission ;-)','Firefox auto login with Windows Authentication and AD','','inherit','open','open','','153-revision-18','','','2011-08-07 10:42:33','2011-08-07 09:42:33','',153,'http://ole.michelsen.dk/blog/153-revision-18/',0,'revision','',0),(247,2,'2011-10-03 10:32:13','2011-10-03 09:32:13','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List Children = new List();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n@foreach (var node in Model.Children) {\r\n	<li>@Html.DisplayFor(x => node)</li>\r\n}\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n	<li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure and display it as a nested list using recursive Razor display templates.','publish','open','open','','mapping-relational-table-data-to-a-tree-structure-in-mvc','','','2012-05-06 10:48:05','2012-05-06 09:48:05','',0,'http://ole.michelsen.dk/blog/?p=247',0,'post','',4),(218,2,'2011-08-13 10:09:27','2011-08-13 09:09:27',' ','','','publish','open','open','','218','','','2011-10-03 23:12:59','2011-10-03 22:12:59','',0,'http://ole.michelsen.dk/blog/?p=218',6,'nav_menu_item','',0),(219,2,'2011-08-13 10:09:27','2011-08-13 09:09:27','','Recent','','publish','open','open','','recent-posts','','','2011-10-03 23:12:41','2011-10-03 22:12:41','',0,'http://ole.michelsen.dk/blog/?p=219',3,'nav_menu_item','',0),(220,2,'2011-08-13 10:28:24','2011-08-13 09:28:24',' ','','','publish','open','open','','220','','','2011-10-03 23:12:53','2011-10-03 22:12:53','',0,'http://ole.michelsen.dk/blog/?p=220',5,'nav_menu_item','',0),(222,2,'2011-08-13 10:44:52','2011-08-13 09:44:52','','RSS','','publish','open','open','','rss-2','','','2011-10-03 23:13:10','2011-10-03 22:13:10','',0,'http://ole.michelsen.dk/blog/?p=222',8,'nav_menu_item','',0),(273,2,'2011-10-03 18:02:51','2011-10-03 17:02:51','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-23','','','2011-10-03 18:02:51','2011-10-03 17:02:51','',247,'http://ole.michelsen.dk/blog/247-revision-23/',0,'revision','',0),(225,2,'2011-08-16 11:49:08','2011-08-16 10:49:08','','Database Entity Model','','inherit','open','open','','model','','','2011-08-16 11:49:08','2011-08-16 10:49:08','',224,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png',0,'attachment','image/png',0),(226,2,'2011-08-16 11:49:09','2011-08-16 10:49:09','','Output','','inherit','open','open','','output','','','2011-08-16 11:49:09','2011-08-16 10:49:09','',224,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png',0,'attachment','image/png',0),(227,2,'2011-08-16 11:51:17','2011-08-16 10:51:17','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\n\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\n<!--more-->I\'ve created a sample solution in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\n<h2>Data Structure</h2>\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h2><span class=\"Apple-style-span\" style=\"color: #444444; font-size: 16px; line-height: 24px;\">The basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.</span></h2>\n<h2>View Model</h2>\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\n<pre>public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h2>Controller</h2>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n\n(CODE)\n\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n\nView\n\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\n<pre>@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt; \n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\n\nYou can try it out and double check my findings in the attached VS project. Happy coding! :-)','Localization with fallback using LINQ','','inherit','open','open','','224-revision','','','2011-08-16 11:51:17','2011-08-16 10:51:17','',224,'http://ole.michelsen.dk/blog/224-revision/',0,'revision','',0),(231,2,'2011-08-16 11:56:37','2011-08-16 10:56:37','Visual Studio Project for Localization with fallback using LINQ','LinqResourceFallback','','inherit','open','open','','linqresourcefallback','','','2011-08-16 11:56:37','2011-08-16 10:56:37','',224,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip',0,'attachment','application/zip',0),(228,2,'2011-08-16 11:52:13','2011-08-16 10:52:13','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\r\n\r\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\r\n<!--more-->I\'ve created a sample solution in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\r\n<h2>Data Structure</h2>\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h2><span class=\"Apple-style-span\" style=\"color: #444444; font-size: 16px; line-height: 24px;\">The basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.</span></h2>\r\n<h2>View Model</h2>\r\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h2>Controller</h2>\r\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n            languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on \r\n                    new { a.ArticleId, LanguageId = languageSelected } equals \r\n                    new { t.ArticleId, t.LanguageId } \r\n                    into LanguageSelected\r\n                join t in Translations on \r\n                    new { a.ArticleId, LanguageId = languageFallback } equals \r\n                    new { t.ArticleId, t.LanguageId } \r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n\r\nView\r\n\r\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt; \r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\r\n\r\nYou can try it out and double check my findings in the attached VS project. Happy coding! :-)','Localization with fallback using LINQ','','inherit','open','open','','224-revision-2','','','2011-08-16 11:52:13','2011-08-16 10:52:13','',224,'http://ole.michelsen.dk/blog/224-revision-2/',0,'revision','',0),(229,2,'2011-08-16 11:52:19','2011-08-16 10:52:19','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\r\n\r\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\r\n<!--more-->I\'ve created a sample solution in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\r\n<h2>Data Structure</h2>\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h2><span class=\"Apple-style-span\" style=\"color: #444444; font-size: 16px; line-height: 24px;\">The basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.</span></h2>\r\n<h2>View Model</h2>\r\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h2>Controller</h2>\r\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n            languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n\r\nView\r\n\r\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\r\n\r\nYou can try it out and double check my findings in the attached VS project. Happy coding! :-)','Localization with fallback using LINQ','','inherit','open','open','','224-revision-3','','','2011-08-16 11:52:19','2011-08-16 10:52:19','',224,'http://ole.michelsen.dk/blog/224-revision-3/',0,'revision','',0),(230,2,'2011-08-16 11:53:46','2011-08-16 10:53:46','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\r\n\r\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\r\n<!--more-->I\'ve created a sample solution in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\r\n<h2>Data Structure</h2>\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h2><span class=\"Apple-style-span\" style=\"color: #444444; font-size: 16px; line-height: 24px;\">The basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.</span></h2>\r\n<h2>View Model</h2>\r\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h2>Controller</h2>\r\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n            languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n<h2>View</h2>\r\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\r\n\r\nYou can try it out and double check my findings in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)','Localization with fallback using LINQ','','inherit','open','open','','224-revision-4','','','2011-08-16 11:53:46','2011-08-16 10:53:46','',224,'http://ole.michelsen.dk/blog/224-revision-4/',0,'revision','',0),(232,2,'2011-08-16 11:59:35','2011-08-16 10:59:35','','Visual Studio 10 Project','','inherit','open','open','','vs','','','2011-08-16 11:59:35','2011-08-16 10:59:35','',224,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png',0,'attachment','image/png',0),(233,2,'2011-08-16 12:00:07','2011-08-16 11:00:07','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\n\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\n<!--more-->I\'ve created a sample solution in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\n<h2>Data Structure</h2>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h2>View Model</h2>\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h2>Controller</h2>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h2>View</h2>\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\n\nYou can try it out and double check my findings in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\">LinqResourceFallb<img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" />ack</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-5','','','2011-08-16 12:00:07','2011-08-16 11:00:07','',224,'http://ole.michelsen.dk/blog/224-revision-5/',0,'revision','',0),(235,2,'2011-08-16 12:06:04','2011-08-16 11:06:04','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\n\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\n<!--more-->I\'ve attached a <a href=\"#projectattachment\">sample solution</a> in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily show the articles with LINQ handling the localization.\n<h2>Data Structure</h2>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h2>View Model</h2>\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h2>Controller</h2>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h2>View</h2>\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\n\nYou can try it out and double check my findings in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-7','','','2011-08-16 12:06:04','2011-08-16 11:06:04','',224,'http://ole.michelsen.dk/blog/224-revision-7/',0,'revision','',0),(234,2,'2011-08-16 12:04:07','2011-08-16 11:04:07','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\n\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values but still have a fallback.\n<!--more-->I\'ve attached a <a href=\"#projectattachment\">sample solution</a> in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily pull out the articles with LINQ in the requested language if available or else the fallback language (English).\n<h2>Data Structure</h2>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h2>View Model</h2>\nBefore we get the data, we just need to structure it a bit. This View Model class will contain the Article root entry, as well as one Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h2>Controller</h2>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h2>View</h2>\nTo put it to the test, I\'ve added test data for two articles, one with a Danish translation and one with only English. Let\'s display it to check that I\'m right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback.\n\nYou can try it out and double check my findings in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-6','','','2011-08-16 12:04:07','2011-08-16 11:04:07','',224,'http://ole.michelsen.dk/blog/224-revision-6/',0,'revision','',0),(236,2,'2011-08-16 12:28:22','2011-08-16 11:28:22','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and all within a single SQL statement.\n\nSince this is a basic requirement for all international applications, I have devised a simple structure, which can be applied to most situations where you require an entity to have localizable values.\n<!--more-->I\'ve attached a <a href=\"#projectattachment\">sample solution</a> in ASP.NET MVC based on an Article object. What you need is a two-table database layout for the \"root\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily show the articles with LINQ handling the localization.\n<h2>Data Structure</h2>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h2>View Model</h2>\nBefore we get the data, we just need to structure it a bit for MVC. This view model class will contain the Article root entry, as well as one Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h2>Controller</h2>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the root Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h2>View</h2>\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation and one with only English. Let\'s display it to check that I\'m right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback:\n\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\n\nBut don\'t take my word it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-8','','','2011-08-16 12:28:22','2011-08-16 11:28:22','',224,'http://ole.michelsen.dk/blog/224-revision-8/',0,'revision','',0),(238,2,'2011-08-16 12:48:32','2011-08-16 11:48:32','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\n\nSince localization is a basic requirement for all international applications, I have standardized a simple structure, which can be applied to most situations where you require an entity to have localizable values.\n<!--more-->Attached is a <a href=\"#projectattachment\">sample solution</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily show the articles with LINQ handling the localization.\n<h3>Data Structure</h3>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h3>View Model</h3>\nBefore we get the data, we just need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h3>Controller</h3>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h3>View</h3>\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation and one with only English. Let\'s display it to check that we\'ve gotten it right:\n<pre lang=\"csharp\" escaped=\"true\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second with the English fallback:\n\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\n\nBut don\'t take my word it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-10','','','2011-08-16 12:48:32','2011-08-16 11:48:32','',224,'http://ole.michelsen.dk/blog/224-revision-10/',0,'revision','',0),(237,2,'2011-08-16 12:39:35','2011-08-16 11:39:35','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\n\nSince localization is a basic requirement for all international applications, I have standardized a simple structure, which can be applied to most situations where you require an entity to have localizable values.\n<!--more-->Attached is a <a href=\"#projectattachment\">sample solution</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll walk through the data structure, and how you can easily show the articles with LINQ handling the localization.\n<h3>Data Structure</h3>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h3>View Model</h3>\nBefore we get the data, we just need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h3>Controller</h3>\nNow we want to list all the Articles in Danish, but if that isn\'t available, we still want to show the Article in English. LINQ to the rescue:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n            languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language, respectively. Then finally we can choose between these two translations using the C# <abbr title=\"null-coalescing operator\">??</abbr> operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h3>View</h3>\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation and one with only English. Let\'s display it to check that we\'ve gotten it right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two articles, the first with it\'s Danish translation, and the second has used the English fallback:\n\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\n\nBut don\'t take my word it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-9','','','2011-08-16 12:39:35','2011-08-16 11:39:35','',224,'http://ole.michelsen.dk/blog/224-revision-9/',0,'revision','',0),(239,2,'2011-08-16 23:02:42','2011-08-16 22:02:42','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\n\nSince localization is a basic need for all international applications, I have made a simple structure, which can be applied in situations where an entity is required to have localizable values.\n<!--more-->I have created a <a href=\"#projectattachment\">sample project</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll go through the data structure and how the articles easily can be shown with LINQ handling localization.\n<h3>Data structure</h3>\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\n\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\n<h3>View model</h3>\nBefore we get the data, we need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\n<pre lang=\"csharp\">public class ArticleViewModel\n{\n    public Article Article { get; set; }\n    public ArticleTranslation Translation { get; set; }\n}</pre>\n<h3>Controller</h3>\nNow we want to display a list of Articles. Let\'s say we want to display them in Danish, and if that is not available, we will display them in English. With LINQ we can achieve this with the following statement:\n<pre lang=\"csharp\">public ActionResult Index()\n{\n    string languageSelected = \"da\",\n           languageFallback = \"en\";\n\n    var model = from a in Articles\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageSelected } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageSelected\n                join t in Translations on\n                    new { a.ArticleId, LanguageId = languageFallback } equals\n                    new { t.ArticleId, t.LanguageId }\n                    into LanguageFallback\n                from selected in LanguageSelected.DefaultIfEmpty()\n                from fallback in LanguageFallback.DefaultIfEmpty()\n                orderby a.PubDate\n                select new ArticleViewModel()\n                {\n                    Article = a,\n                    Translation = selected ?? fallback,\n                };\n\n    return View(model.ToList());\n}</pre>\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language respectively. Then, finally, we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\n<h3>View</h3>\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation, and one with only English. Let\'s display it to check that we\'ve gotten it right:\n<pre lang=\"csharp\">@foreach (var m in Model)\n{\n    &lt;article&gt;\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\n    &lt;/article&gt;\n}</pre>\nAnd as expected we see our two Articles, the first with its Danish translation, and the second with the English fallback:\n\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\n\nBut don\'t take my word for it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\n\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-11','','','2011-08-16 23:02:42','2011-08-16 22:02:42','',224,'http://ole.michelsen.dk/blog/224-revision-11/',0,'revision','',0),(240,2,'2011-08-16 23:02:47','2011-08-16 22:02:47','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\r\n\r\nSince localization is a basic need for all international applications, I have made a simple structure, which can be applied in situations where an entity is required to have localizable values.\r\n<!--more-->I have created a <a href=\"#projectattachment\">sample project</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll go through the data structure and how the articles easily can be shown with LINQ handling localization.\r\n<h3>Data structure</h3>\r\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\r\n\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h3>View model</h3>\r\nBefore we get the data, we need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h3>Controller</h3>\r\nNow we want to display a list of Articles. Let\'s say we want to display them in Danish, and if that is not available, we will display them in English. With LINQ we can achieve this with the following statement:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n           languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language respectively. Then, finally, we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n<h3>View</h3>\r\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation, and one with only English. Let\'s display it to check that we\'ve gotten it right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two Articles, the first with its Danish translation, and the second with the English fallback:\r\n\r\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\r\n\r\nBut don\'t take my word for it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\r\n\r\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-12','','','2011-08-16 23:02:47','2011-08-16 22:02:47','',224,'http://ole.michelsen.dk/blog/224-revision-12/',0,'revision','',0),(241,2,'2011-08-16 23:02:50','2011-08-16 22:02:50','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\r\n\r\nSince localization is a basic need for all international applications, I have made a simple structure, which can be applied in situations where an entity is required to have localizable values.\r\n<!--more-->I have created a <a href=\"#projectattachment\">sample project</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll go through the data structure and how the articles easily can be shown with LINQ handling localization.\r\n<h3>Data structure</h3>\r\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\r\n\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h3>View model</h3>\r\nBefore we get the data, we need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h3>Controller</h3>\r\nNow we want to display a list of Articles. Let\'s say we want to display them in Danish, and if that is not available, we will display them in English. With LINQ we can achieve this with the following statement:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n           languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language respectively. Then, finally, we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n<h3>View</h3>\r\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation, and one with only English. Let\'s display it to check that we\'ve gotten it right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two Articles, the first with its Danish translation, and the second with the English fallback:\r\n\r\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\r\n\r\nBut don\'t take my word for it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\r\n\r\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-13','','','2011-08-16 23:02:50','2011-08-16 22:02:50','',224,'http://ole.michelsen.dk/blog/224-revision-13/',0,'revision','',0),(242,2,'2011-08-17 09:06:02','2011-08-17 08:06:02','So you need to support multiple languages in your website, and you need the system to fallback to a default language if no translation is available. Fortunately LINQ is here to help and can do it all within a single SQL statement.\r\n\r\nSince localization is a basic need for all international applications, I have made a simple structure, which can be applied in situations where an entity is required to have localizable values.\r\n<!--more-->I have created a <a href=\"#projectattachment\">sample project</a> in ASP.NET MVC based on an example Article object. What you need is a two-table database layout for the \"base\" article entries and one table for the translations. I\'ll go through the data structure and how the articles easily can be shown with LINQ handling localization.\r\n<h3>Data structure</h3>\r\nThe basic idea is to have the general settings in the primary Articles table, and the values that need translation in the ArticleTranslations table.\r\n\r\n<img class=\"aligncenter size-full wp-image-225\" title=\"Database Entity Model\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Model.png\" alt=\"Entity model of the Article database tables\" width=\"361\" height=\"214\" />\r\n<h3>View model</h3>\r\nBefore we get the data, we need to structure it a bit for MVC. This view model class will contain the Article base entry, as well as a Translation:\r\n<pre lang=\"csharp\">public class ArticleViewModel\r\n{\r\n    public Article Article { get; set; }\r\n    public ArticleTranslation Translation { get; set; }\r\n}</pre>\r\n<h3>Controller</h3>\r\nNow we want to display a list of Articles. Let\'s say we want to display them in Danish, and if that is not available, we will display them in English. With LINQ we can achieve this with the following statement:\r\n<pre lang=\"csharp\">public ActionResult Index()\r\n{\r\n    string languageSelected = \"da\",\r\n           languageFallback = \"en\";\r\n\r\n    var model = from a in Articles\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageSelected } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageSelected\r\n                join t in Translations on\r\n                    new { a.ArticleId, LanguageId = languageFallback } equals\r\n                    new { t.ArticleId, t.LanguageId }\r\n                    into LanguageFallback\r\n                from selected in LanguageSelected.DefaultIfEmpty()\r\n                from fallback in LanguageFallback.DefaultIfEmpty()\r\n                orderby a.PubDate\r\n                select new ArticleViewModel()\r\n                {\r\n                    Article = a,\r\n                    Translation = selected ?? fallback,\r\n                };\r\n\r\n    return View(model.ToList());\r\n}</pre>\r\nIf this seems complicated, don\'t fret. What happens is that we select the base Articles, and then (in the native tongue of SQL) LEFT JOIN the ArticleTranslations table two times, for the primary and fallback language respectively. Then, finally, we can choose between these two translations using the ?? null-coalescing operator. If the translation \"selected\" is not available (null), then \"fallback\" is used. Nice and terse!\r\n<h3>View</h3>\r\nTo put it to the test, I\'ve added test data for two articles, one with both an English and Danish translation, and one with only English. Let\'s display it to check that we\'ve gotten it right:\r\n<pre lang=\"csharp\">@foreach (var m in Model)\r\n{\r\n    &lt;article&gt;\r\n        &lt;h2&gt;@Html.DisplayFor(x =&gt; m.Translation.Title)&lt;/h2&gt;\r\n        &lt;time pubdate=\"pubdate\"&gt;@Html.DisplayFor(x =&gt; m.Article.PubDate)&lt;/time&gt;\r\n        &lt;p&gt;@Html.DisplayFor(x =&gt; m.Translation.Body)&lt;/p&gt;\r\n    &lt;/article&gt;\r\n}</pre>\r\nAnd as expected we see our two Articles, the first with its Danish translation, and the second with the English fallback:\r\n\r\n[caption id=\"attachment_226\" align=\"alignnone\" width=\"444\" caption=\"Output of our Article view\"]<img class=\"size-full wp-image-226\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Output.png\" alt=\"Output of our Article view\" width=\"444\" height=\"320\" />[/caption]\r\n\r\nBut don\'t take my word for it - try it out for yourself in the attached <abbr title=\"Visual Studio\">VS</abbr> project. Happy coding! :-)\r\n\r\n<a id=\"projectattachment\" title=\"Download Visual Studio 10 ASP.NET MVC Project for this article\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/LinqResourceFallback.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /> Download Project</a>','Localization with fallback using LINQ','','inherit','open','open','','224-revision-14','','','2011-08-17 09:06:02','2011-08-17 08:06:02','',224,'http://ole.michelsen.dk/blog/224-revision-14/',0,'revision','',0),(243,2,'2011-07-28 18:53:08','2011-07-28 17:53:08','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre lang=\"xml\" escaped=\"true\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-62','','','2011-07-28 18:53:08','2011-07-28 17:53:08','',27,'http://ole.michelsen.dk/blog/27-revision-62/',0,'revision','',0),(244,2,'2011-08-18 09:04:17','2011-08-18 08:04:17','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre lang=\"xml\" escaped=\"true\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-63','','','2011-08-18 09:04:17','2011-08-18 08:04:17','',27,'http://ole.michelsen.dk/blog/27-revision-63/',0,'revision','',0),(245,2,'2011-08-18 09:05:53','2011-08-18 08:05:53','Recently I ported a large website from ASP.NET Web Forms to the shining new ASP.NET MVC 3. During this process I also decided to implement \"proper\" MembershipProvider-based security instead of a simpler, custom HTTP module we were running.\r\n\r\nAs I started implementing my custom MembershipProvider, I became a bit confused, however, about the sheer number of classes you have to implement/override. I ended up spending quite a lot of time searching for help, so here I will attempt to give a \"shortcut\" overview of the structure of the MembershipProvider model and lessons learned.<!--more-->\r\n\r\n[caption id=\"attachment_116\" align=\"aligncenter\" width=\"550\" caption=\"Overview of the MembershipProvider model\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\"><img class=\"size-full wp-image-116\" title=\"MembershipProvider diagram overview\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/MembershipProvider-Drawing-Pencil.jpg\" alt=\"Overview of the data flow of the MembershipProvider model\" width=\"550\" height=\"250\" /></a>[/caption]\r\n<h2>Creating the backend MembershipProvider-stuff</h2>\r\n<h3>MembershipProvider</h3>\r\nThe MembershipProvider handles all <abbr title=\"Create, Read, Update, Delete\">CRUD</abbr> operations you can do with your collection of users. It\'s an interface between ASP.NET and your database, and you\'ll have to implement the functions you want to use. But remember, if you don\'t want to use a function like <code>UnlockUser(string)</code>, then just skip it and save yourself some time! It will only be called if <em>you</em> do it from the code.\r\n\r\nYou can also extend your MembershipProvider with special features such as: <code>DeleteRange(object[] keys)</code> etc.\r\n\r\nYou can see a <a href=\"http://msdn.microsoft.com/en-us/library/6tc47t75.aspx\">sample implementation on MSDN</a>, as well as a description of each of the <a href=\"http://msdn.microsoft.com/en-us/library/f1kyba5e.aspx\">required members</a>.\r\n<h3>MembershipUser</h3>\r\nThis is the data class your MembershipProvider passes around, so you just need to piggyback any data you might need to transfer to/from your database. You can either create a couple of new properties, or just add a reference to your LINQ2SQL classes if you need to pass along an entire user record. Again, you don\'t need to fill out the standard properties like \"LastLockedOutDate\" if you don\'t call them in your code.\r\n\r\nHere\'s the <a title=\"How to: Implement a Custom Membership User\" href=\"http://msdn.microsoft.com/en-us/library/ms366730.aspx\" target=\"_blank\">MSDN sample code</a>.\r\n<h3>RoleProvider</h3>\r\nLastly you can also <a title=\"Custom MembershipProvider and RoleProvider Implementations that use Web Services\" href=\"http://www.codeproject.com/KB/aspnet/WSSecurityProvider.aspx\" target=\"_blank\">create your own RoleProvider</a>. This is only needed if you actually wish to use roles. If you are doing something very simple like: \"is user admin or not?\", I would probably skip it and just add a <code>bool</code> field on the MembershipUser. But implementing it is not all that complicated, you just have to support roles as weakly typed strings like \"Admin\", \"Trusted\" etc.\r\n<h2>Creating the \"front end\" stuff</h2>\r\nThe following classes represents the context and data of a logged in user. They are created and populated by all the backend stuff we just did. A little bit of \"plumbing\" is needed here, as you will have to map the fields in MembershipUser to the similar IIdentity. We are definitely not <abbr title=\"Don\'t Repeat Yourself\">DRY</abbr>.\r\n<h3>IPrincipal</h3>\r\nIPrincipal represents the security context of your (authenticated) user and tells you if the user is authenticated or in a given role. <code>IsInRole(<em>r</em>)</code> is also called in use with PrincipalPermission attributes:\r\n<pre lang=\"csharp\">[PrincipalPermission(SecurityAction.Demand, Role = \"Administrators\")]\r\nstatic void DoAdminStuff()\r\n{\r\n...\r\n}</pre>\r\nIf you wish to add new <a href=\"http://msdn.microsoft.com/en-us/library/sw480ze8(v=VS.100).aspx\" target=\"_blank\">home-built security attributes</a>, this is where they should be implemented. If you don\'t need roles, you don\'t even need to implement this class, just use GenericPrincipal and stuff your custom Identity in there.\r\n<h3>IIdentity</h3>\r\nThe IIdentity holds information <em>about </em>the user. As my MVC book ((J. McCracken: <em>Test Drive ASP.NET MVC</em>)) phrases it: <em>\"The IIdentity is who you are. Your IPrincipal is what you have access to...\"</em>. Here you should store the account information like first name, country, language etc. Some of this perhaps overlaps the intended use of Profiles, but if you want to skip the implementation and abstraction of yet <em>another</em> class, you can probably justify putting it here.\r\n<h3>Profile</h3>\r\nI\'ve skipped using it: this interface is for settings that the user can manipulate (and I don\'t allow my users to customize much). Examples could be selection of web site color, number of pages to display in a product list etc. The properties are actually coded into the web.config file?! I don\'t know why, and I don\'t think I care for it. But you do get the properties strongly typed and serialized. In a case of <a href=\"http://lmgtfy.com/\" target=\"_blank\">LMGTFY</a>, here\'s an <a href=\"http://weblogs.asp.net/jgalloway/archive/2008/01/19/writing-a-custom-asp-net-profile-class.aspx\" target=\"_blank\">article about custom Profiles</a>.\r\n<h2>Actually <em>using</em> the MembershipProvider model</h2>\r\nDrop a few lines into your web.config, and your website will load your new MembershipProvider as default, and then you can start using it:\r\n<pre lang=\"xml\" escaped=\"true\">&lt;membership defaultProvider=\"CustomMembershipProvider\"&gt;\r\n &lt;providers&gt;\r\n &lt;clear/&gt;\r\n &lt;add name=\"CustomMembershipProvider\" type=\"MyMembershipProvider\"\r\n      connectionStringName=\"ApplicationServices\"\r\n      applicationName=\"/\" /&gt;\r\n &lt;/providers&gt;\r\n&lt;/membership&gt;</pre>\r\n<h3>Signing in a user</h3>\r\nJust make a form and run <code>Membership.ValidateUser(username, password)</code> which will call your new default MembershipProvider. If validation was successful call <code>FormsAuthentication.SetAuthCookie(username, remember)</code> and redirect to some happy place. Now your user is logged in, but then what happens on subsequent page loads?\r\n<h3>Application_AuthenticateRequest</h3>\r\nThe Application_AuthenticateRequest event in global.asax is hit every time your user is fetching something from your website, be that a web page or an image file. The system automatically reads the auth cookie, and validates that it can be decrypted and isn\'t expired. This will then set <code>Request.IsAuthenticated</code> to true, and create a generic IPrincipal and IIdentity with the username stored in the cookie.\r\n\r\nNow we can replace them with our own IPrincipal and IIdentity! <a title=\"Using Custom Principal with Forms Authentication in ASP.NET\" href=\"http://smehrozalam.wordpress.com/2009/01/01/using-customprincipal-with-forms-authentication-in-aspnet/\" target=\"_blank\">In global.asax we overwrite the generic objects</a>, with our own versions that contains our extra data:\r\n<pre lang=\"csharp\">protected void Application_AuthenticateRequest(object sender, EventArgs e)\r\n{\r\n    if (Request.IsAuthenticated)\r\n    {\r\n        string username = HttpContext.Current.User.Identity.Name;\r\n        var identity = new MyIdentity(username, true);\r\n        var principal = new MyPrincipal(identity, identity.Roles);\r\n        HttpContext.Current.User = principal;\r\n    }\r\n}</pre>\r\nIn my implementation, the constructor in MyIdentity populates the object with data from the database by calling <code>Membership.GetUser(<em>u</em>)</code>. You just have to remember, that this is called for <span style=\"text-decoration: underline;\">each</span> request - if you have 1 page with 10 images, it will get called 1+10 times! This is quite a lot of calls to your database. To remedy this you basically have two options:\r\n<ol>\r\n	<li>Store the data in the cookie (not very secure, but perhaps ok for very small, non-sensitive values)</li>\r\n	<li>Cache the database object on your server between requests</li>\r\n</ol>\r\nIf you want to cache the data, you might think that Session is the place for this. Wrong. You do not have access to the Session, so your only choice is HttpContext.Cache. This is global for all requests, so make sure you choose a key that is unique to each user:\r\n<pre lang=\"csharp\">HttpContext.Current.Cache.Insert(\r\n    uniqueCacheKey, userObject, null, DateTime.Now.AddMinutes(2),\r\n    Cache.NoSlidingExpiration);</pre>\r\nThis will cache the user data for 2 min before updating it from the server again. Though if you lock out/delete the user, the server will not know for that period, so you have to consider the security implications.\r\n\r\n<em>TIP: </em>You can also completely skip setting your custom Principal and Identity whenever the requested file is <em>not</em> an ASP.NET file, as static files don\'t have use for the extra user data.\r\n<h3>Reading our user data in a page</h3>\r\nNow (finally) you have a user object with some important data you wish to access. This is done through User and User.Identity within the HttpContext of your pages. They have to be typecast every time, so I suggest you create a simple wrapper like this:\r\n<pre lang=\"csharp\">public static class UserContext\r\n{\r\n    public static MyPrincipal User { return (MyPrincipal)User; }\r\n    public static MyIdentity Identity { return (MyIdentity)User.Identity; }\r\n}</pre>\r\nI use this class for other user related functions, such as <code>GetIP()</code> etc. so it\'s nice to have anyway.\r\n<h2>References</h2>\r\nBelow is a list of recommended resources for more detailed explanations and examples of each of the above mentioned interfaces and classes.\r\n\r\nA good step-by-step tutorial with full code examples: <a href=\"http://theintegrity.co.uk/2010/11/asp-net-mvc-2-custom-membership-provider-tutorial-part-1/\" target=\"_blank\">Custom Membership Provider Tutorial (in MVC2)</a>\r\n\r\nVery thorough walkthrough: <a href=\"http://www.4guysfromrolla.com/articles/120705-1.aspx\" target=\"_blank\">ASP.NET Membership, Roles and Profile - 18 part series</a>\r\n\r\nDocumentation that IsAuthenticated = !Name.isEmpty (bottom of page): <a href=\"http://msdn.microsoft.com/en-us/library/system.security.principal.genericidentity.aspx\" target=\"_blank\">MSDN, GenericIdentity Class</a>\r\n\r\nAnd just to prove I\'m not the only one who\'s a bit confused over this ;-):\r\n<a href=\"http://stackoverflow.com/questions/1064271/asp-net-mvc-set-custom-iidentity-or-iprincipal\" target=\"_blank\">Stack Overflow: IIdentity or IPrincipal</a>\r\n<a href=\"http://stackoverflow.com/questions/1884030/implementing-a-custom-identity-and-iprincipal-in-mvc\" target=\"_blank\">Stack Overflow: Solving [Serializable()]\r\n</a><a href=\"http://stackoverflow.com/questions/3426558/accessing-custom-principal-within-a-custom-actionfilterattribute\" target=\"_blank\">Using custom attributes with IIdentity</a>','Custom MembershipProvider, Principal and Identity','Implementing a custom MembershipProvider, IPrincipal and IIdentity. How to cache the objects accross page requests and access the objects through a wrapper.','inherit','open','open','','27-revision-64','','','2011-08-18 09:05:53','2011-08-18 08:05:53','',27,'http://ole.michelsen.dk/blog/27-revision-64/',0,'revision','',0),(246,2,'2011-08-07 10:51:03','2011-08-07 09:51:03','When creating intranet websites, Windows Authentication will take care of all your user identification needs. Both Internet Explorer and Chrome will automatically pass your NTLM (Active Directory) user credentials to the server, but Firefox will not and instead presents the user with an ugly login prompt. Fortunately it\'s quite easy to enable this in Firefox with a simple configuration change.<!--more-->\r\n\r\nGo to the address bar, and enter the following:\r\n<blockquote>about:config</blockquote>\r\nYou will be prompted with <a title=\"Firefox Warranty Warning\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/Firefox-Warranty-Warning.png\" target=\"_blank\">a warning</a>, so just confirm that \"I’ll be careful, I promise!\". Now go to the filter bar, and enter this string:\r\n<blockquote>network.automatic-ntlm-auth.trusted-uris</blockquote>\r\nDouble-click this value and add the domain of your intranet website, ex. \"michelsen.dk\":\r\n\r\n[caption id=\"attachment_192\" align=\"aligncenter\" width=\"500\" caption=\"Firefox NTLM Config\"]<img class=\"size-full wp-image-192\" title=\"Firefox NTLM Config\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Firefox-NTLM-Config.png\" alt=\"Add intranet domain to the NTLM trusted list\" width=\"500\" height=\"460\" />[/caption]\r\n\r\nYou can add multiple domains to this list by separating them with a comma. Now you should be automatically logged in when you browse to your intranet website - given of course that you actually <em>have</em> permission ;-)','Firefox auto login with Windows Authentication and AD','Get Firefox to login automatically on your intranet websites with Windows Authentication and Active Directory with a simple change in about:config.','inherit','open','open','','153-revision-19','','','2011-08-07 10:51:03','2011-08-07 09:51:03','',153,'http://ole.michelsen.dk/blog/153-revision-19/',0,'revision','',0),(248,2,'2011-10-02 22:33:05','2011-10-02 21:33:05','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code:\n\n&nbsp;','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision','','','2011-10-02 22:33:05','2011-10-02 21:33:05','',247,'http://ole.michelsen.dk/blog/247-revision/',0,'revision','',0),(249,2,'2011-10-02 22:38:09','2011-10-02 21:38:09','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code:\n<pre lang=\"csharp\">[Serializable]\npublic class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes e.g. as JSON for a web service. In that case you can\'t have circular references, and the unneeded fields will automatically be left out of the serialized string saving precious bytes.','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-2','','','2011-10-02 22:38:09','2011-10-02 21:38:09','',247,'http://ole.michelsen.dk/blog/247-revision-2/',0,'revision','',0),(277,2,'2011-11-20 23:40:37','2011-11-20 22:40:37','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique keys and parent keys.\r\n\r\nLINQ fortunately contains a handy <code>group by</code> function, but unfortunately this returns an anonymous type <code>IEnumerable&lt;\'a&gt;</code>, which we can\'t use as data model for our view.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web.Mvc;\r\nusing LinqGrouping.Models;\r\n\r\nnamespace LinqGrouping.Controllers\r\n{\r\n    public class GroupingController : Controller\r\n    {\r\n        public ActionResult Index()\r\n        {\r\n            var books = new List<Book>();\r\n\r\n            // Add test data\r\n            books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n            books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n            books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n            books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n            books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n            // Group the books by Genre\r\n            var booksGrouped = from b in books\r\n                               group b by b.Genre into g\r\n                               select new Group<string, Book> { Key = g.Key, Values = g };\r\n\r\n            return View(booksGrouped.ToList());\r\n        }\r\n    }\r\n}\r\n</pre>\r\nThe grouping is handled with the LINQ <code>group by</code> statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a <code>List&lt;Group&lt;string, Book&gt;&gt;</code>, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" />\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','publish','open','open','','grouping-data-with-linq-and-mvc','','','2011-11-23 13:12:53','2011-11-23 12:12:53','',0,'http://ole.michelsen.dk/blog/?p=277',0,'post','',3),(251,2,'2011-10-02 23:06:03','2011-10-02 22:06:03','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code:\n<pre lang=\"csharp\">[Serializable]\npublic class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes e.g. as JSON for a web service. In that case you can\'t have circular references, and the unneeded fields will automatically be left out of the serialized string saving precious bytes.\n\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-3','','','2011-10-02 23:06:03','2011-10-02 22:06:03','',247,'http://ole.michelsen.dk/blog/247-revision-3/',0,'revision','',0),(254,2,'2011-10-03 09:29:17','2011-10-03 08:29:17','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode \n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp; \n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can create a nested list in HTML using a recursive display template in Razor like so:\n\n&nbsp;','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-6','','','2011-10-03 09:29:17','2011-10-03 08:29:17','',247,'http://ole.michelsen.dk/blog/247-revision-6/',0,'revision','',0),(252,2,'2011-10-02 23:06:09','2011-10-02 22:06:09','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\nId, ParentId, Name, ...\r\n\r\nWhat we want is to map this data into the following tree-node structure in our code:\r\n<pre lang=\"csharp\">[Serializable]\r\npublic class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes e.g. as JSON for a web service. In that case you can\'t have circular references, and the unneeded fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-4','','','2011-10-02 23:06:09','2011-10-02 22:06:09','',247,'http://ole.michelsen.dk/blog/247-revision-4/',0,'revision','',0),(253,2,'2011-10-03 08:40:10','2011-10-03 07:40:10','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\nId, ParentId, Name, ...\r\n\r\nWhat we want is to map this data into the following tree-node structure in our code:\r\n<pre lang=\"csharp\">[Serializable]\r\npublic class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes e.g. as JSON for a web service. In that case you can\'t have circular references, and the unneeded fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-5','','','2011-10-03 08:40:10','2011-10-03 07:40:10','',247,'http://ole.michelsen.dk/blog/247-revision-5/',0,'revision','',0),(255,2,'2011-10-03 09:30:55','2011-10-03 08:30:55','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode \n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp; \n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can create a nested list in HTML using a recursive display template in Razor like so:\n<pre>@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n<ul>\n    @foreach (var node in Model.Children)\n    { \n        <li>@Html.DisplayFor(x => node)</li>\n    }\n</ul>\n}','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-7','','','2011-10-03 09:30:55','2011-10-03 08:30:55','',247,'http://ole.michelsen.dk/blog/247-revision-7/',0,'revision','',0),(256,2,'2011-10-03 09:36:53','2011-10-03 08:36:53','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree, by using a little LINQ magic in our controller:\n\n\nNow we can create a nested list in HTML using a recursive display template in Razor like so:\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n&lt;ul&gt;\n    @foreach (var node in Model.Children)\n    {\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\n    }\n&lt;/ul&gt;\n}</pre>\n\n','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-8','','','2011-10-03 09:36:53','2011-10-03 08:36:53','',247,'http://ole.michelsen.dk/blog/247-revision-8/',0,'revision','',0),(258,2,'2011-10-03 09:39:02','2011-10-03 08:39:02','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\nId, ParentId, Name, ...\n\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree, by using a little LINQ magic in our controller:\n<pre lang=\"csharp\">var tree = new Tree();\n\nusing (var db = new TreeEntities())\n{\n    // Add each element as a tree node\n    tree.Nodes = db.TreeMenu\n        .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\n        .ToDictionary(t => t.Id);\n\n    // Create a new root node\n    tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\n\n    // Build the tree, setting parent and children references for all elements\n    tree.BuildTree();\n}\n\nreturn tree;</pre>\n\nTo display our tree as  a nested list in HTML using a recursive display template in Razor like so:\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n&lt;ul&gt;\n    @foreach (var node in Model.Children)\n    {\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\n    }\n&lt;/ul&gt;\n}</pre>\n\n','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-10','','','2011-10-03 09:39:02','2011-10-03 08:39:02','',247,'http://ole.michelsen.dk/blog/247-revision-10/',0,'revision','',0),(257,2,'2011-10-03 09:37:15','2011-10-03 08:37:15','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\nId, ParentId, Name, ...\r\n\r\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree, by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">var tree = new Tree();\r\n\r\n            using (var db = new TreeEntities())\r\n            {\r\n                // Add each element as a tree node\r\n                tree.Nodes = db.TreeMenu\r\n                    .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n                    .ToDictionary(t => t.Id);\r\n\r\n                // Create a new root node\r\n                tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n                // Build the tree, setting parent and children references for all elements\r\n                tree.BuildTree();\r\n            }\r\n\r\n            return tree;</pre>\r\n\r\nNow we can create a nested list in HTML using a recursive display template in Razor like so:\r\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count &gt; 0)\r\n{\r\n&lt;ul&gt;\r\n    @foreach (var node in Model.Children)\r\n    {\r\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\r\n    }\r\n&lt;/ul&gt;\r\n}</pre>\r\n\r\n','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-9','','','2011-10-03 09:37:15','2011-10-03 08:37:15','',247,'http://ole.michelsen.dk/blog/247-revision-9/',0,'revision','',0),(259,2,'2011-10-03 09:41:38','2011-10-03 08:41:38','','Sql2Tree HTML nested list','Tree data displayed as a HTML nested list','inherit','open','open','','sql2tree-html-nested-list','','','2011-10-03 09:41:38','2011-10-03 08:41:38','',247,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png',0,'attachment','image/png',0),(260,2,'2011-10-03 09:41:40','2011-10-03 08:41:40','','Sql2Tree SQL table data','Table data stored in SQL table','inherit','open','open','','sql2tree-sql-table-data','','','2011-10-03 09:41:40','2011-10-03 08:41:40','',247,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png',0,'attachment','image/png',0),(261,2,'2011-10-03 09:43:20','2011-10-03 08:43:20','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\n\nIt\'s common to have tree data stored this way in a database:\n\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\n\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree, by using a little LINQ magic in our controller:\n<pre lang=\"csharp\">var tree = new Tree();\n\nusing (var db = new TreeEntities())\n{\n    // Add each element as a tree node\n    tree.Nodes = db.TreeMenu\n        .Select(t =&gt; new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\n        .ToDictionary(t =&gt; t.Id);\n\n    // Create a new root node\n    tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\n\n    // Build the tree, setting parent and children references for all elements\n    tree.BuildTree();\n}\n\nreturn tree;</pre>\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n&lt;ul&gt;\n    @foreach (var node in Model.Children)\n    {\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\n    }\n&lt;/ul&gt;\n}</pre>\nAnd voilá, our \"flat\" SQL table is now a betautiful','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-11','','','2011-10-03 09:43:20','2011-10-03 08:43:20','',247,'http://ole.michelsen.dk/blog/247-revision-11/',0,'revision','',0),(262,2,'2011-10-03 09:44:56','2011-10-03 08:44:56','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree-node structure in our code, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes will leave out these values if we serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each as parent and children. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree, by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">var tree = new Tree();\r\n\r\nusing (var db = new TreeEntities())\r\n{\r\n    // Add each element as a tree node\r\n    tree.Nodes = db.TreeMenu\r\n        .Select(t =&gt; new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n        .ToDictionary(t =&gt; t.Id);\r\n\r\n    // Create a new root node\r\n    tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n    // Build the tree, setting parent and children references for all elements\r\n    tree.BuildTree();\r\n}\r\n\r\nreturn tree;</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count &gt; 0)\r\n{\r\n&lt;ul&gt;\r\n    @foreach (var node in Model.Children)\r\n    {\r\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\r\n    }\r\n&lt;/ul&gt;\r\n}</pre>\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-12','','','2011-10-03 09:44:56','2011-10-03 08:44:56','',247,'http://ole.michelsen.dk/blog/247-revision-12/',0,'revision','',0),(267,2,'2011-10-03 10:30:14','2011-10-03 09:30:14','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\n\nIt\'s common to have tree data stored this way in a database:\n\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\n\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List<TreeNode> Children = new List<TreeNode>();\n}</pre>\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\n<pre lang=\"csharp\">private Tree GetData()\n{\n    var tree = new Tree();\n\n    using (var db = new TreeEntities())\n    {\n        // Add each element as a tree node\n        tree.Nodes = db.TreeMenu\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\n            .ToDictionary(t => t.Id);\n\n        // Create a new root node\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\n\n        // Build the tree, setting parent and children references for all elements\n        tree.BuildTree();\n    }\n\n    return tree;\n}\n\npublic ActionResult Index()\n{\n    var model = GetData();\n    return View(model);\n}</pre>\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count > 0)\n{\n<ul>\n    @foreach (var node in Model.Children)\n    { \n        <li>@Html.DisplayFor(x => node)</li>\n    }\n</ul>\n}</pre>\nAnd this is how we use it in our view:\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\n<ul>\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\n</ul></pre>\n\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\n\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\n\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\n\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-17','','','2011-10-03 10:30:14','2011-10-03 09:30:14','',247,'http://ole.michelsen.dk/blog/247-revision-17/',0,'revision','',0),(263,2,'2011-10-03 10:15:06','2011-10-03 09:15:06','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\n\nIt\'s common to have tree data stored this way in a database:\n\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\n\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\n}</pre>\nThe ScriptIgnore attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\n<pre lang=\"csharp\">private Tree GetData()\n{\n    var tree = new Tree();\n\n    using (var db = new TreeEntities())\n    {\n        // Add each element as a tree node\n        tree.Nodes = db.TreeMenu\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\n            .ToDictionary(t => t.Id);\n\n        // Create a new root node\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\n\n        // Build the tree, setting parent and children references for all elements\n        tree.BuildTree();\n    }\n\n    return tree;\n}\n\npublic ActionResult Index()\n{\n    var model = GetData();\n    return View(model);\n}</pre>\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n&lt;ul&gt;\n    @foreach (var node in Model.Children)\n    {\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\n    }\n&lt;/ul&gt;\n}</pre>\nAnd this is how we use it in our view:\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count &gt; 0)\n{\n&lt;ul&gt;\n    @foreach (var node in Model.Children)\n    {\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\n    }\n&lt;/ul&gt;\n}</pre>\n\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\n\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\n\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\n\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-13','','','2011-10-03 10:15:06','2011-10-03 09:15:06','',247,'http://ole.michelsen.dk/blog/247-revision-13/',0,'revision','',0),(264,2,'2011-10-03 10:15:24','2011-10-03 09:15:24','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count &gt; 0)\r\n{\r\n&lt;ul&gt;\r\n    @foreach (var node in Model.Children)\r\n    {\r\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\r\n    }\r\n&lt;/ul&gt;\r\n}</pre>\r\nAnd this is how we use it in our view:\r\n<pre lang=\"html\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-14','','','2011-10-03 10:15:24','2011-10-03 09:15:24','',247,'http://ole.michelsen.dk/blog/247-revision-14/',0,'revision','',0),(265,2,'2011-10-03 10:15:33','2011-10-03 09:15:33','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"html\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count &gt; 0)\r\n{\r\n&lt;ul&gt;\r\n    @foreach (var node in Model.Children)\r\n    {\r\n        &lt;li&gt;@Html.DisplayFor(x =&gt; node)&lt;/li&gt;\r\n    }\r\n&lt;/ul&gt;\r\n}</pre>\r\nAnd this is how we use it in our view:\r\n<pre lang=\"html\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-15','','','2011-10-03 10:15:33','2011-10-03 09:15:33','',247,'http://ole.michelsen.dk/blog/247-revision-15/',0,'revision','',0),(266,2,'2011-10-03 10:22:39','2011-10-03 09:22:39','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List&lt;TreeNode&gt; Children = new List&lt;TreeNode&gt;();\r\n}</pre>\r\nThe ScriptIgnore attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nAnd this is how we use it in our view:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-16','','','2011-10-03 10:22:39','2011-10-03 09:22:39','',247,'http://ole.michelsen.dk/blog/247-revision-16/',0,'revision','',0),(268,2,'2011-10-03 10:30:42','2011-10-03 09:30:42','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not include the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-18','','','2011-10-03 10:30:42','2011-10-03 09:30:42','',247,'http://ole.michelsen.dk/blog/247-revision-18/',0,'revision','',0),(269,2,'2011-10-03 10:31:51','2011-10-03 09:31:51','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-19','','','2011-10-03 10:31:51','2011-10-03 09:31:51','',247,'http://ole.michelsen.dk/blog/247-revision-19/',0,'revision','',0),(270,2,'2011-10-03 10:32:13','2011-10-03 09:32:13','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-20','','','2011-10-03 10:32:13','2011-10-03 09:32:13','',247,'http://ole.michelsen.dk/blog/247-revision-20/',0,'revision','',0),(271,2,'2011-10-03 11:19:39','2011-10-03 10:19:39','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-21','','','2011-10-03 11:19:39','2011-10-03 10:19:39','',247,'http://ole.michelsen.dk/blog/247-revision-21/',0,'revision','',0);
INSERT INTO `ole_posts` VALUES (272,2,'2011-10-03 18:02:33','2011-10-03 17:02:33','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','','inherit','open','open','','247-revision-22','','','2011-10-03 18:02:33','2011-10-03 17:02:33','',247,'http://ole.michelsen.dk/blog/247-revision-22/',0,'revision','',0),(274,2,'2011-10-03 23:12:47','2011-10-03 22:12:47',' ','','','publish','open','open','','274','','','2011-10-03 23:12:47','2011-10-03 22:12:47','',0,'http://ole.michelsen.dk/blog/?p=274',4,'nav_menu_item','',0),(275,2,'2012-05-06 10:47:44','2012-05-06 09:47:44','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\n\nIt\'s common to have tree data stored this way in a database:\n\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\n\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\n<pre lang=\"csharp\">public class TreeNode\n{\n    public int Id;\n\n    [ScriptIgnore]\n    public int ParentId;\n\n    [ScriptIgnore]\n    public TreeNode Parent;\n\n    public string Name;\n\n    public List Children = new List();\n}</pre>\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\n\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\n<pre lang=\"csharp\">public class Tree\n{\n    private TreeNode rootNode;\n    public TreeNode RootNode\n    {\n        get { return rootNode; }\n        set\n        {\n            if (RootNode != null)\n                Nodes.Remove(RootNode.Id);\n\n            Nodes.Add(value.Id, value);\n            rootNode = value;\n        }\n    }\n\n    public Dictionary Nodes { get; set; }\n\n    public Tree()\n    {\n    }\n\n    public void BuildTree()\n    {\n        TreeNode parent;\n        foreach (var node in Nodes.Values)\n        {\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\n                node.Id != node.ParentId)\n            {\n                node.Parent = parent;\n                parent.Children.Add(node);\n            }\n        }\n    }\n}</pre>\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\n\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\n<pre lang=\"csharp\">private Tree GetData()\n{\n    var tree = new Tree();\n\n    using (var db = new TreeEntities())\n    {\n        // Add each element as a tree node\n        tree.Nodes = db.TreeMenu\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\n            .ToDictionary(t => t.Id);\n\n        // Create a new root node\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\n\n        // Build the tree, setting parent and children references for all elements\n        tree.BuildTree();\n    }\n\n    return tree;\n}\n\npublic ActionResult Index()\n{\n    var model = GetData();\n    return View(model);\n}</pre>\nTo display our tree as a nested list in HTML we use a recursive display template in Razor like so:\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\n\n@Model.Name\n@if (Model.Children.Count > 0)\n{\n<ul>@foreach (var node in Model.Children) {\n	<li>@Html.DisplayFor(x => node)</li>\n}</ul>\n}</pre>\nUsing the template in our view is simple:\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\n<ul>\n	<li>@Html.DisplayFor(x => Model.RootNode)</li>\n</ul></pre>\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\n\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\n\nYou can download the example project here, with examples of a list that does not display the root node and how to output the tree as JSON for AJAX-based menus.\n\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure and display it as a nested list using recursive Razor display templates.','inherit','open','open','','247-autosave','','','2012-05-06 10:47:44','2012-05-06 09:47:44','',247,'http://ole.michelsen.dk/blog/247-autosave/',0,'revision','',0),(358,2,'2012-05-06 10:46:35','2012-05-06 09:46:35','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List Children = new List();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t =&gt; new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t =&gt; t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>@foreach (var node in Model.Children) {\r\n	<li>@Html.DisplayFor(x => node)</li>\r\n}</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n	<li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure and display it as a nested list using recursive Razor display templates.','inherit','open','open','','247-revision-27','','','2012-05-06 10:46:35','2012-05-06 09:46:35','',247,'http://ole.michelsen.dk/blog/247-revision-27/',0,'revision','',0),(335,2,'2011-10-08 08:13:15','2011-10-08 07:13:15','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure, to display as a nested list in MVC using recursive Razor display templates.','inherit','open','open','','247-revision-25','','','2011-10-08 08:13:15','2011-10-08 07:13:15','',247,'http://ole.michelsen.dk/blog/247-revision-25/',0,'revision','',0),(276,2,'2011-10-03 20:16:11','2011-10-03 19:16:11','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List<TreeNode> Children = new List<TreeNode>();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &&\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t => new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t => t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML, we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count > 0)\r\n{\r\n<ul>\r\n    @foreach (var node in Model.Children)\r\n    { \r\n        <li>@Html.DisplayFor(x => node)</li>\r\n    }\r\n</ul>\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree\r\n<ul>\r\n    <li>@Html.DisplayFor(x => Model.RootNode)</li>\r\n</ul></pre>\r\n\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node, and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure, to display as a nested list in MVC using recursive Razor display templates.','inherit','open','open','','247-revision-24','','','2011-10-03 20:16:11','2011-10-03 19:16:11','',247,'http://ole.michelsen.dk/blog/247-revision-24/',0,'revision','',0),(278,2,'2011-11-03 00:27:31','2011-11-02 23:27:31','Showing a list or table of data in groups is very common, and fortunately also very easy to do with some simple LINQ sprinkled with a little generics. We want our data to look something like this:\n\nIn the olden days we would probably just loop the data, and insert a new group header each time we encountered a new group, but this is neither especially elegant, nor is it reusable and it can lead to some pretty fugly code.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision','','','2011-11-03 00:27:31','2011-11-02 23:27:31','',277,'http://ole.michelsen.dk/blog/277-revision/',0,'revision','',0),(300,2,'2012-03-21 11:17:32','2012-03-21 10:17:32','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a title=\"Visual Studio Project\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\r\n\r\nFinally we have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in <a title=\"Visual Studio Project\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">attached project</a>).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\r\n{\r\n    return View(model);\r\n}</pre>\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property name and not the alias(es).','Bind a model property to a different named query string field','How to bind a model property to a different named query string field with a custom alias attribute and model binder in MVC3.','publish','open','open','','bind-a-model-property-to-a-different-named-query-string-field','','','2012-03-24 11:51:16','2012-03-24 10:51:16','',0,'http://ole.michelsen.dk/blog/?p=300',0,'post','',1),(280,2,'2011-11-20 13:48:42','2011-11-20 12:48:42','Showing a list or table of data in groups is very common, and fortunately also very easy to do with some simple LINQ sprinkled with a little generics. In the end we want our data to look something like this:\n<ul>\n	<li>Group A</li>\n<ul>\n	<li>Item 1</li>\n	<li>Item 2</li>\n</ul>\n	<li>Group B</li>\n<ul>\n	<li>Item 3</li>\n</ul>\n</ul>\nIn the olden days we would probably just loop the data, and insert a new group header each time we encountered a new group, but this is neither especially elegant, nor is it reusable and it can lead to some pretty ineligible code.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-2','','','2011-11-20 13:48:42','2011-11-20 12:48:42','',277,'http://ole.michelsen.dk/blog/277-revision-2/',0,'revision','',0),(281,2,'2011-11-20 17:06:23','2011-11-20 16:06:23','','Output','','inherit','open','open','','output-2','','','2011-11-20 17:06:23','2011-11-20 16:06:23','',277,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png',0,'attachment','image/png',0),(282,2,'2011-11-20 17:00:23','2011-11-20 16:00:23','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\n<ul>\n	<li>Group A</li>\n<ul>\n	<li>Item 1</li>\n	<li>Item 2</li>\n</ul>\n	<li>Group B</li>\n<ul>\n	<li>Item 3</li>\n</ul>\n</ul>\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\n\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\n<pre>namespace LinqGrouping.Models\n{\n    public class Group&lt;K, T&gt;\n    {\n        public K Key;\n        public IEnumerable&lt;T&gt; Values;\n    }\n\n    public class Book\n    {\n        public string Title;\n        public string Author;\n        public string Genre;\n        public decimal Price;\n    }\n}</pre>\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\n<pre>public class GroupingController : Controller\n{\n	public ActionResult Index()\n	{\n		var books = new List&lt;Book&gt;();\n\n		// Add test data\n		books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\n		books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\n		books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\n		books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\n		books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\n\n		// Group the books by Genre\n		var booksGrouped = from b in books\n						   group b by b.Genre into g\n						   select new Group&lt;string, Book&gt; { Key = g.Key, Values = g };\n\n		return View(booksGrouped.ToList());\n	}\n\n}</pre>\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key.\n\n&nbsp;','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-3','','','2011-11-20 17:00:23','2011-11-20 16:00:23','',277,'http://ole.michelsen.dk/blog/277-revision-3/',0,'revision','',0),(283,2,'2011-11-20 17:07:34','2011-11-20 16:07:34','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre>namespace LinqGrouping.Models\r\n{\r\n    public class Group&lt;K, T&gt;\r\n    {\r\n        public K Key;\r\n        public IEnumerable&lt;T&gt; Values;\r\n    }\r\n\r\n    public class Book\r\n    {\r\n        public string Title;\r\n        public string Author;\r\n        public string Genre;\r\n        public decimal Price;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre>public class GroupingController : Controller\r\n{\r\n	public ActionResult Index()\r\n	{\r\n		var books = new List&lt;Book&gt;();\r\n\r\n		// Add test data\r\n		books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n		books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n		books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n		books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n		books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n		// Group the books by Genre\r\n		var booksGrouped = from b in books\r\n						   group b by b.Genre into g\r\n						   select new Group&lt;string, Book&gt; { Key = g.Key, Values = g };\r\n\r\n		return View(booksGrouped.ToList());\r\n	}\r\n\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;&lt;td&gt;@book.Author&lt;/td&gt;&lt;td&gt;@book.Title&lt;/td&gt;&lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;&lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\n&nbsp;','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-4','','','2011-11-20 17:07:34','2011-11-20 16:07:34','',277,'http://ole.michelsen.dk/blog/277-revision-4/',0,'revision','',0),(284,2,'2011-11-20 17:09:21','2011-11-20 16:09:21','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre>namespace LinqGrouping.Models\r\n{\r\n  public class Group&lt;K, T&gt;\r\n  {\r\n    public K Key;\r\n    public IEnumerable&lt;T&gt; Values;\r\n  }\r\n\r\n  public class Book\r\n  {\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n  }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre>public class GroupingController : Controller\r\n{\r\n	public ActionResult Index()\r\n	{\r\n		var books = new List&lt;Book&gt;();\r\n\r\n		// Add test data\r\n		books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n		books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n		books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n		books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n		books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n		// Group the books by Genre\r\n		var booksGrouped = from b in books\r\n						   group b by b.Genre into g\r\n						   select new Group&lt;string, Book&gt; { Key = g.Key, Values = g };\r\n\r\n		return View(booksGrouped.ToList());\r\n	}\r\n\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;&lt;td&gt;@book.Author&lt;/td&gt;&lt;td&gt;@book.Title&lt;/td&gt;&lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;&lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\n&nbsp;','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-5','','','2011-11-20 17:09:21','2011-11-20 16:09:21','',277,'http://ole.michelsen.dk/blog/277-revision-5/',0,'revision','',0),(285,2,'2011-11-20 23:27:45','2011-11-20 22:27:45','','LinqGrouping','','inherit','open','open','','linqgrouping','','','2011-11-20 23:27:45','2011-11-20 22:27:45','',277,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip',0,'attachment','application/zip',0),(286,2,'2011-11-20 17:12:10','2011-11-20 16:12:10','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre>namespace LinqGrouping.Models\r\n{\r\n    public class Group&lt;K, T&gt;\r\n    {\r\n        public K Key;\r\n        public IEnumerable&lt;T&gt; Values;\r\n    }\r\n\r\n    public class Book\r\n    {\r\n        public string Title;\r\n        public string Author;\r\n        public string Genre;\r\n        public decimal Price;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre>public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List&lt;Book&gt;();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var booksGrouped = from b in books\r\n                           group b by b.Genre into g\r\n                           select new Group&lt;string, Book&gt; { Key = g.Key, Values = g };\r\n\r\n        return View(booksGrouped.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;&lt;td&gt;@book.Author&lt;/td&gt;&lt;td&gt;@book.Title&lt;/td&gt;&lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;&lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\n&nbsp;','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-6','','','2011-11-20 17:12:10','2011-11-20 16:12:10','',277,'http://ole.michelsen.dk/blog/277-revision-6/',0,'revision','',0),(296,2,'2011-11-21 09:47:42','2011-11-21 08:47:42','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\",\r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\",\r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\",\r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\",\r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\",\r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" />\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-15','','','2011-11-21 09:47:42','2011-11-21 08:47:42','',277,'http://ole.michelsen.dk/blog/277-revision-15/',0,'revision','',0),(288,2,'2011-11-23 12:50:44','2011-11-23 11:50:44','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\n<ul>\n	<li>Group A</li>\n<ul>\n	<li>Item 1</li>\n	<li>Item 2</li>\n</ul>\n	<li>Group B</li>\n<ul>\n	<li>Item 3</li>\n</ul>\n</ul>\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\n\nLINQ fortunately contains a handy <code>group by</code> function, but unfortunately this returns an anonymous type <code>IEnumerable&lt;\'a&gt;</code>, which we can\'t use as data model for our view.\n\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\n<pre lang=\"csharp\">namespace LinqGrouping.Models\n{\n    public class Group<T, K>\n    {\n        public K Key;\n        public IEnumerable<T> Values;\n    }\n}</pre>\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\n<pre lang=\"csharp\">public class Book\n{\n    public string Title;\n    public string Author;\n    public string Genre;\n    public decimal Price;\n}</pre>\n<pre lang=\"csharp\">using System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing LinqGrouping.Models;\n\nnamespace LinqGrouping.Controllers\n{\n    public class GroupingController : Controller\n    {\n        public ActionResult Index()\n        {\n            var books = new List<Book>();\n\n            // Add test data\n            books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\n            books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\n            books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\n            books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\n            books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\n\n            // Group the books by Genre\n            var booksGrouped = from b in books\n                               group b by b.Genre into g\n                               select new Group<string, Book> { Key = g.Key, Values = g };\n\n            return View(booksGrouped.ToList());\n        }\n    }\n}\n</pre>\nThe grouping is handled with the LINQ <code>group by</code> statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a <code>List&lt;Group&lt;string, Book&gt;&gt;</code>, which makes it easy for us to output as HTML:\n<pre lang=\"csharp\">@using LinqGrouping.Models\n@model List<Group<string, Book>>\n\n@{\n    ViewBag.Title = \"LINQ Grouping\";\n}\n\n<h2>Grouping books by Genre</h2>\n\n<table>\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\n<tbody>\n@foreach (var group in Model)\n{\n    <tr><th colspan=\"3\">@group.Key</th></tr>\n    foreach (var book in group.Values)\n    {\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\n    }\n}\n</tbody>\n</table></pre>\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\n\n<img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" />\n\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\n\nFor other uses of the group by in LINQ, Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-autosave','','','2011-11-23 12:50:44','2011-11-23 11:50:44','',277,'http://ole.michelsen.dk/blog/277-autosave/',0,'revision','',0),(287,2,'2011-11-20 23:40:05','2011-11-20 22:40:05','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\n<ul>\n	<li>Group A</li>\n<ul>\n	<li>Item 1</li>\n	<li>Item 2</li>\n</ul>\n	<li>Group B</li>\n<ul>\n	<li>Item 3</li>\n</ul>\n</ul>\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\n\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\n<pre lang=\"csharp\">namespace LinqGrouping.Models\n{\n    public class Group<K, T>;\n    {\n        public K Key;\n        public IEnumerable<T> Values;\n    }\n}</pre>\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\n<pre lang=\"csharp\">public class Book\n{\n    public string Title;\n    public string Author;\n    public string Genre;\n    public decimal Price;\n}</pre>\n<pre lang=\"csharp\">public class GroupingController : Controller\n{\n    public ActionResult Index()\n    {\n        var books = new List<Book>();\n\n        // Add test data\n        books.Add(new Book { Author = \"Douglas Adams\", \n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\n        books.Add(new Book { Author = \"Scott Adams\", \n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\n        books.Add(new Book { Author = \"Douglas Coupland\", \n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\n        books.Add(new Book { Author = \"Walter Isaacson\", \n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\n        books.Add(new Book { Author = \"Michael Freeman\", \n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\n\n        // Group the books by Genre\n        var genres = from b in books\n                     group b by b.Genre into g\n                     select new Group<string, Book> { Key = g.Key, Values = g };\n\n        return View(genres.ToList());\n    }\n}</pre>\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\n<pre lang=\"html\">@using LinqGrouping.Models\n@model List&lt;Group&lt;string, Book&gt;&gt;\n\n@{\n    ViewBag.Title = \"LINQ Grouping\";\n}\n\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\n\n&lt;table&gt;\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n@foreach (var group in Model)\n{\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\n    foreach (var book in group.Values)\n    {\n        &lt;tr&gt;\n            &lt;td&gt;@book.Author&lt;/td&gt;\n            &lt;td&gt;@book.Title&lt;/td&gt;\n            &lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;\n        &lt;/tr&gt;\n    }\n}\n&lt;/tbody&gt;\n&lt;/table&gt;</pre>\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\n\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\n\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\n\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-7','','','2011-11-20 23:40:05','2011-11-20 22:40:05','',277,'http://ole.michelsen.dk/blog/277-revision-7/',0,'revision','',0),(289,2,'2011-11-20 23:40:37','2011-11-20 22:40:37','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<K, T>;\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List<Book>();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\", \r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\", \r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\", \r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\", \r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\", \r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group<string, Book> { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-8','','','2011-11-20 23:40:37','2011-11-20 22:40:37','',277,'http://ole.michelsen.dk/blog/277-revision-8/',0,'revision','',0),(290,2,'2011-11-20 23:45:03','2011-11-20 22:45:03','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\n<!--more-->In the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group;\r\n    {\r\n        public K Key;\r\n        public IEnumerable Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\", \r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\", \r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\", \r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\", \r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\", \r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-9','','','2011-11-20 23:45:03','2011-11-20 22:45:03','',277,'http://ole.michelsen.dk/blog/277-revision-9/',0,'revision','',0),(291,2,'2011-11-20 23:49:26','2011-11-20 22:49:26','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group;\r\n    {\r\n        public K Key;\r\n        public IEnumerable Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\", \r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\", \r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\", \r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\", \r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\", \r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;\r\n            &lt;td&gt;@book.Author&lt;/td&gt;\r\n            &lt;td&gt;@book.Title&lt;/td&gt;\r\n            &lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-10','','','2011-11-20 23:49:26','2011-11-20 22:49:26','',277,'http://ole.michelsen.dk/blog/277-revision-10/',0,'revision','',0),(292,2,'2011-11-20 23:50:35','2011-11-20 22:50:35','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<K, T>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\",\r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\",\r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\",\r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\",\r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\",\r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;\r\n            &lt;td&gt;@book.Author&lt;/td&gt;\r\n            &lt;td&gt;@book.Title&lt;/td&gt;\r\n            &lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-11','','','2011-11-20 23:50:35','2011-11-20 22:50:35','',277,'http://ole.michelsen.dk/blog/277-revision-11/',0,'revision','',0),(294,2,'2011-11-20 23:51:58','2011-11-20 22:51:58','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\",\r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\",\r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\",\r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\",\r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\",\r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;\r\n            &lt;td&gt;@book.Author&lt;/td&gt;\r\n            &lt;td&gt;@book.Title&lt;/td&gt;\r\n            &lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-13','','','2011-11-20 23:51:58','2011-11-20 22:51:58','',277,'http://ole.michelsen.dk/blog/277-revision-13/',0,'revision','',0),(295,2,'2011-11-20 23:52:52','2011-11-20 22:52:52','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\",\r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\",\r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\",\r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\",\r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\",\r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-14','','','2011-11-20 23:52:52','2011-11-20 22:52:52','',277,'http://ole.michelsen.dk/blog/277-revision-14/',0,'revision','',0),(293,2,'2011-11-20 23:51:10','2011-11-20 22:51:10','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group&lt;T, K&gt;\r\n    {\r\n        public K Key;\r\n        public IEnumerable&lt;T&gt; Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">public class GroupingController : Controller\r\n{\r\n    public ActionResult Index()\r\n    {\r\n        var books = new List();\r\n\r\n        // Add test data\r\n        books.Add(new Book { Author = \"Douglas Adams\",\r\n            Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n        books.Add(new Book { Author = \"Scott Adams\",\r\n            Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n        books.Add(new Book { Author = \"Douglas Coupland\",\r\n            Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n        books.Add(new Book { Author = \"Walter Isaacson\",\r\n            Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n        books.Add(new Book { Author = \"Michael Freeman\",\r\n            Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n        // Group the books by Genre\r\n        var genres = from b in books\r\n                     group b by b.Genre into g\r\n                     select new Group { Key = g.Key, Values = g };\r\n\r\n        return View(genres.ToList());\r\n    }\r\n}</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre>@using LinqGrouping.Models\r\n@model List&lt;Group&lt;string, Book&gt;&gt;\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n&lt;h2&gt;Grouping books by Genre&lt;/h2&gt;\r\n\r\n&lt;table&gt;\r\n&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Author&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\r\n&lt;tbody&gt;\r\n@foreach (var group in Model)\r\n{\r\n    &lt;tr&gt;&lt;th colspan=\"3\"&gt;@group.Key&lt;/th&gt;&lt;/tr&gt;\r\n    foreach (var book in group.Values)\r\n    {\r\n        &lt;tr&gt;\r\n            &lt;td&gt;@book.Author&lt;/td&gt;\r\n            &lt;td&gt;@book.Title&lt;/td&gt;\r\n            &lt;td&gt;@book.Price.ToString(\"c\")&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n    }\r\n}\r\n&lt;/tbody&gt;\r\n&lt;/table&gt;</pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\"><img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" /></a>\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, please Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-12','','','2011-11-20 23:51:10','2011-11-20 22:51:10','',277,'http://ole.michelsen.dk/blog/277-revision-12/',0,'revision','',0),(297,2,'2011-11-21 09:49:01','2011-11-21 08:49:01','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web.Mvc;\r\nusing LinqGrouping.Models;\r\n\r\nnamespace LinqGrouping.Controllers\r\n{\r\n    public class GroupingController : Controller\r\n    {\r\n        public ActionResult Index()\r\n        {\r\n            var books = new List<Book>();\r\n\r\n            // Add test data\r\n            books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n            books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n            books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n            books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n            books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n            // Group the books by Genre\r\n            var booksGrouped = from b in books\r\n                               group b by b.Genre into g\r\n                               select new Group<string, Book> { Key = g.Key, Values = g };\r\n\r\n            return View(booksGrouped.ToList());\r\n        }\r\n    }\r\n}\r\n</pre>\r\nThe grouping is handled with the LINQ group by statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a List&lt;Group&lt;string, Book&gt;&gt;, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" />\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-16','','','2011-11-21 09:49:01','2011-11-21 08:49:01','',277,'http://ole.michelsen.dk/blog/277-revision-16/',0,'revision','',0),(298,2,'2011-11-23 12:49:50','2011-11-23 11:49:50','Showing a list or table of data in groups is very common, and fortunately also very easy to do with LINQ. In the end we want our data to look something like this:<!--more-->\r\n<ul>\r\n	<li>Group A</li>\r\n<ul>\r\n	<li>Item 1</li>\r\n	<li>Item 2</li>\r\n</ul>\r\n	<li>Group B</li>\r\n<ul>\r\n	<li>Item 3</li>\r\n</ul>\r\n</ul>\r\nIn the olden days we would probably just loop the data, and insert a group header each time we encountered a new group, but this is not especially elegant and can lead to some pretty illegible code. And while you can also achieve this <a title=\"Mapping relational table data to a tree structure in MVC\" href=\"http://ole.michelsen.dk/blog/mapping-relational-table-data-to-a-tree-structure-in-mvc/\">grouping with a Tree structure</a>, it\'s a bit overkill for this application, and requires your data to have unique Keys and ParentKeys.\r\n\r\nLINQ fortunately contains a handy <code>group by</code> function, but unfortunately this returns an anonymous type <code>IEnumerable&lt;\'a&gt;</code>, which we can\'t use as data model for our view.\r\n\r\nMy simple solution uses a generic Group class to hold the data and a key of your own choosing to group by. By creating the Group class as a generic, we can reuse it for any kind of key and object types.\r\n<pre lang=\"csharp\">namespace LinqGrouping.Models\r\n{\r\n    public class Group<T, K>\r\n    {\r\n        public K Key;\r\n        public IEnumerable<T> Values;\r\n    }\r\n}</pre>\r\nWe will also create a test class called Book, and use it to create a list of books which we can then group by Genre:\r\n<pre lang=\"csharp\">public class Book\r\n{\r\n    public string Title;\r\n    public string Author;\r\n    public string Genre;\r\n    public decimal Price;\r\n}</pre>\r\n<pre lang=\"csharp\">using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web.Mvc;\r\nusing LinqGrouping.Models;\r\n\r\nnamespace LinqGrouping.Controllers\r\n{\r\n    public class GroupingController : Controller\r\n    {\r\n        public ActionResult Index()\r\n        {\r\n            var books = new List<Book>();\r\n\r\n            // Add test data\r\n            books.Add(new Book { Author = \"Douglas Adams\", Title = \"The Hitchhiker\'s Guide to the Galaxy\", Genre = \"Fiction\", Price = 159.95M });\r\n            books.Add(new Book { Author = \"Scott Adams\", Title = \"The Dilbert Principle\", Genre = \"Fiction\", Price = 23.95M });\r\n            books.Add(new Book { Author = \"Douglas Coupland\", Title = \"Generation X\", Genre = \"Fiction\", Price = 300.00M });\r\n            books.Add(new Book { Author = \"Walter Isaacson\", Title = \"Steve Jobs\", Genre = \"Biography\", Price = 219.25M });\r\n            books.Add(new Book { Author = \"Michael Freeman\", Title = \"The Photographer\'s Eye\", Genre = \"Photography\", Price = 195.50M });\r\n\r\n            // Group the books by Genre\r\n            var booksGrouped = from b in books\r\n                               group b by b.Genre into g\r\n                               select new Group<string, Book> { Key = g.Key, Values = g };\r\n\r\n            return View(booksGrouped.ToList());\r\n        }\r\n    }\r\n}\r\n</pre>\r\nThe grouping is handled with the LINQ <code>group by</code> statement, and here we choose the Genre field as our key to group by. Now we select our subsets into the Group object, which will consist of a key and a collection of each book which matches this key. The end result is a <code>List&lt;Group&lt;string, Book&gt;&gt;</code>, which makes it easy for us to output as HTML:\r\n<pre lang=\"csharp\">@using LinqGrouping.Models\r\n@model List<Group<string, Book>>\r\n\r\n@{\r\n    ViewBag.Title = \"LINQ Grouping\";\r\n}\r\n\r\n<h2>Grouping books by Genre</h2>\r\n\r\n<table>\r\n<thead><tr><th>Author</th><th>Title</th><th>Price</th></tr></thead>\r\n<tbody>\r\n@foreach (var group in Model)\r\n{\r\n    <tr><th colspan=\"3\">@group.Key</th></tr>\r\n    foreach (var book in group.Values)\r\n    {\r\n        <tr><td>@book.Author</td><td>@book.Title</td><td>@book.Price.ToString(\"c\")</td></tr>\r\n    }\r\n}\r\n</tbody>\r\n</table></pre>\r\nLooping through the groups of books is very straightforward, and for each group we create a header in the table. Our code is now very easy to read, and the Group class can be reused for any other data type as well. Here is the final output:\r\n\r\n<img class=\"alignnone size-full wp-image-281\" title=\"Output\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/Output.png\" alt=\"Books grouped by Genre\" width=\"501\" height=\"547\" />\r\n\r\nFor your reviewing pleasure, you can <a title=\"Visual Studio Project LinqGrouping.zip\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/11/LinqGrouping.zip\">download the VS project</a> and try it out yourself.\r\n\r\nFor other uses of the group by in LINQ, Microsoft have provided some <a title=\"LINQ - Grouping Operators\" href=\"http://code.msdn.microsoft.com/LINQ-to-DataSets-Grouping-c62703ea\" target=\"_blank\">further examples</a>.','Grouping data with LINQ and MVC','','inherit','open','open','','277-revision-17','','','2011-11-23 12:49:50','2011-11-23 11:49:50','',277,'http://ole.michelsen.dk/blog/277-revision-17/',0,'revision','',0),(299,2,'2011-07-14 17:11:18','2011-07-14 16:11:18','<img class=\"alignleft size-full wp-image-136\" title=\"Gmail\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/gmail.png\" alt=\"Gmail by Google logo\" width=\"200\" height=\"90\" />A great \"hidden\" feature in Gmail, is the possibility to append a + followed by any text you like to the username part of your email address.\r\n\r\nThis text will be ignored by Gmail, and you will receive your emails as usual, but it allows you to create unique email addresses on the fly.<!--more-->\r\n\r\nFor example if your email is ole@gmail.com, you can use a separate address for each of the services you subscribe to:\r\n<ul>\r\n	<li>ole+twitter@gmail.com</li>\r\n	<li>ole+facebook@gmail.com</li>\r\n	<li>ole+hpcomic@gmail.com</li>\r\n</ul>\r\nEmails sent to either of these aliases will arrive in your normal email, but now you can easily filter them. For example if they were sent to ole+facebook@gmail, they can automatically be put in your \"Facebook\" folder.\r\n\r\nThis can help you organize your incoming mail and weed out sources of spam. If your find that ole+evilmaillist@gmail.com, which you used to subscribe to some dubious maillist, has been sold to spammers, you can just direct all mail sent to that address directly into the Spam folder. Easy peasy!\r\n<h2>The dotted line</h2>\r\nAnother feature is the ability to insert and remove dots in the username part of your email. Say your email address is ole.michelsen@gmail.com, then you can also use variations like these:\r\n<ul>\r\n	<li>o.l.e.michelsen@gmail.com</li>\r\n	<li>olemichelse.n@gmail.com</li>\r\n	<li>olemichelsen@gmail.com</li>\r\n</ul>\r\nAliases like these will still point to your normal email address.\r\n<h2>Google Apps accounts</h2>\r\nYou can also use the + feature with your Google Apps email account, however inserting or removing dots will not work, and your email will be rejected.','Gmail+ your email - filter maillists and catch spam','Filter your Gmail by creating unique email addresses for each service you subscribe to by suffixing your username with a + and any text.','inherit','open','open','','120-revision-30','','','2011-07-14 17:11:18','2011-07-14 16:11:18','',120,'http://ole.michelsen.dk/blog/120-revision-30/',0,'revision','',0),(301,2,'2012-03-05 20:55:08','2012-03-05 19:55:08','A small thing I\'m often obsessing about, is the layout of my URIs and especially the naming of my query string fields. In ASP MVC the Model Binder automatically binds our query string to the object model, but there is no built-in support for mapping a differently named query string field to an object property.\n\nIdeally what I want is to name my object properties according to my normal business logic, and at the same time give them an abbreviated alias for use in the query string.\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>.\n\nSo let\'s get cracking. The example object we want to alias looks like this:\n\n&nbsp;','Binding a query string alias to an object model','','inherit','open','open','','300-revision','','','2012-03-05 20:55:08','2012-03-05 19:55:08','',300,'http://ole.michelsen.dk/blog/300-revision/',0,'revision','',0),(340,2,'2012-04-06 23:03:29','2012-04-06 22:03:29','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n<!--more-->\r\nIn this test example we\'ll be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n<h2>SQL Server 2005 and 2008</h2>\r\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\r\n<pre lang=\"sql\">;WITH cte AS (\r\nSELECT id, account, deposit, deposit as \'total\'\r\nFROM #TestData\r\nWHERE id = 1\r\n\r\nUNION ALL\r\n\r\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\r\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\r\n)\r\nSELECT * FROM cte\r\nOPTION (MAXRECURSION 32767);</pre>\r\nThere is one caveat though, since CTEs can do at most 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\r\n<pre lang=\"sql\">SELECT a.*,\r\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id <= a.id) AS \'total\'\r\nFROM #TestData a</pre>','Calculate a running total in SQL Server 2012','','publish','open','open','','calculate-a-running-total-in-sql-server-2012','','','2012-04-06 23:05:56','2012-04-06 22:05:56','',0,'http://ole.michelsen.dk/blog/?p=340',0,'post','',5),(303,2,'2012-03-19 23:14:06','2012-03-19 22:14:06','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. In ASP MVC the model binder automatically binds the query string to the object model by matching each query field name to a property name. This is very handy but things can quickly get quite verbose:\n\nhttp://domain.host/product?CategoryId=iPad&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain.host/product?c=iPad&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug, which makes multiple aliases on a property work as intended.\n\nSo let\'s get cracking. The example object we want to alias looks like this:\n\n&nbsp;','Binding a query string alias to an object model','','inherit','open','open','','300-revision-2','','','2012-03-19 23:14:06','2012-03-19 22:14:06','',300,'http://ole.michelsen.dk/blog/300-revision-2/',0,'revision','',0),(304,2,'2012-03-19 23:14:20','2012-03-19 22:14:20','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. In ASP MVC the model binder automatically binds the query string to the object model by matching each query field name to a property name. This is very handy but things can quickly get quite verbose:\r\n\r\nhttp://domain.host/product?CategoryId=iPad&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\r\n\r\nhttp://domain.host/product?c=iPad&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug, which makes multiple aliases on a property work as intended.\r\n\r\nSo let\'s get cracking. The example object we want to alias looks like this:\r\n\r\n&nbsp;','Binding a query string alias to an object model','','inherit','open','open','','300-revision-3','','','2012-03-19 23:14:20','2012-03-19 22:14:20','',300,'http://ole.michelsen.dk/blog/300-revision-3/',0,'revision','',0),(305,2,'2012-03-19 23:37:17','2012-03-19 22:37:17','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. In ASP MVC the model binder automatically binds the query string to the object model by matching each query string field name to a property name. This is very handy but things can quickly get quite verbose:\n\nhttp://domain.host/product?CategoryId=iPad&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain.host/product?c=iPad&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug, to make multiple aliases on a property work as intended.\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. The example object we want to alias looks like this:\n\n&nbsp;','Binding a query string alias to an object model','','inherit','open','open','','300-revision-4','','','2012-03-19 23:37:17','2012-03-19 22:37:17','',300,'http://ole.michelsen.dk/blog/300-revision-4/',0,'revision','',0),(306,2,'2012-03-20 10:14:36','2012-03-20 09:14:36','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. In ASP MVC the model binder automatically binds the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. The example object we want to alias looks like this:\n\n&nbsp;\n\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will use the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-5','','','2012-03-20 10:14:36','2012-03-20 09:14:36','',300,'http://ole.michelsen.dk/blog/300-revision-5/',0,'revision','',0),(307,2,'2012-03-20 11:05:51','2012-03-20 10:05:51','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. The ASP MVC model binder automatically maps the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name for a property. I:\n\n&nbsp;\n\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will use the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-6','','','2012-03-20 11:05:51','2012-03-20 10:05:51','',300,'http://ole.michelsen.dk/blog/300-revision-6/',0,'revision','',0),(308,2,'2012-03-20 11:06:41','2012-03-20 10:06:41','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. The ASP MVC model binder automatically maps the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name for a property:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\n    public class BindAliasAttribute : Attribute\r\n    {\r\n        public BindAliasAttribute(string alias)\r\n        {\r\n            Alias = alias;\r\n        }\r\n\r\n        public string Alias { get; private set; }\r\n\r\n        public override object TypeId\r\n        {\r\n            get { return (object)Alias; }\r\n        }\r\n\r\n        internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n        {\r\n            public PropertyDescriptor Inner { get; private set; }\r\n\r\n            public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n                : base(alias, null)\r\n            {\r\n                Inner = inner;\r\n            }\r\n\r\n            public override bool CanResetValue(object component)\r\n            {\r\n                return Inner.CanResetValue(component);\r\n            }\r\n\r\n            public override Type ComponentType\r\n            {\r\n                get { return Inner.ComponentType; }\r\n            }\r\n\r\n            public override object GetValue(object component)\r\n            {\r\n                return Inner.GetValue(component);\r\n            }\r\n\r\n            public override bool IsReadOnly\r\n            {\r\n                get { return Inner.IsReadOnly; }\r\n            }\r\n\r\n            public override Type PropertyType\r\n            {\r\n                get { return Inner.PropertyType; }\r\n            }\r\n\r\n            public override void ResetValue(object component)\r\n            {\r\n                Inner.ResetValue(component);\r\n            }\r\n\r\n            public override void SetValue(object component, object value)\r\n            {\r\n                Inner.SetValue(component, value);\r\n            }\r\n\r\n            public override bool ShouldSerializeValue(object component)\r\n            {\r\n                return Inner.ShouldSerializeValue(component);\r\n            }\r\n        }\r\n    }</pre>\r\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will use the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-7','','','2012-03-20 11:06:41','2012-03-20 10:06:41','',300,'http://ole.michelsen.dk/blog/300-revision-7/',0,'revision','',0),(309,2,'2012-03-20 11:32:48','2012-03-20 10:32:48','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. The ASP MVC model binder automatically maps the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name for a property:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing the attribute as a PropertyDescriptor, we can register the property with the alias name, but still use the normal model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but the MemberDescriptor base class will see all AliasAttributes as being of identical type and filter them (FilterAttributesIfNeeded). To avoid that we must implement the TypeId property, and make sure it returns a unique value for each attribute. The easiest way to do this, is to just return the alias name, and now our property can be bound with multiple alias names.\n\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will use the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-8','','','2012-03-20 11:32:48','2012-03-20 10:32:48','',300,'http://ole.michelsen.dk/blog/300-revision-8/',0,'revision','',0),(313,2,'2012-03-20 12:12:13','2012-03-20 11:12:13','','BindAliasAttribute Example','','inherit','open','open','','bindaliasattribute-example','','','2012-03-20 12:12:13','2012-03-20 11:12:13','',300,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png',0,'attachment','image/png',0),(311,2,'2012-03-20 12:00:28','2012-03-20 11:00:28','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. The ASP MVC model binder automatically maps the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name for a property:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing the attribute as a PropertyDescriptor, we can register the property with the alias name, but still use the normal model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but the MemberDescriptor base class will see all AliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this, is to just return the alias name, and now the aliases can be bound using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we just have to create our new model with the BindAliasAttribute, and make sure that it uses our custom model binder:\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\n\n<img class=\"alignnone size-full wp-image-310\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"578\" height=\"562\" />\n\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-9','','','2012-03-20 12:00:28','2012-03-20 11:00:28','',300,'http://ole.michelsen.dk/blog/300-revision-9/',0,'revision','',0),(314,2,'2012-03-20 12:02:22','2012-03-20 11:02:22','I\'m often obsessing the layout of my URIs and especially the naming of my query string fields. The ASP MVC model binder automatically maps the query string to the object model by matching each field name to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the query fields mapped automatically by the model binder:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name for a property:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing the attribute as a PropertyDescriptor, we can register the property with the alias name, but still use the normal model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but the MemberDescriptor base class will see all AliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this, is to just return the alias name, and now the aliases can be bound using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we just have to create our new model with the BindAliasAttribute, and make sure that it uses our custom model binder:\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\n\n<img class=\"alignnone size-full wp-image-310\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"578\" height=\"562\" />\n\nBe aware that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-10','','','2012-03-20 12:02:22','2012-03-20 11:02:22','',300,'http://ole.michelsen.dk/blog/300-revision-10/',0,'revision','',0),(315,2,'2012-03-20 13:13:31','2012-03-20 12:13:31','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model pro:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register our AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Binding a query string alias to an object model','','inherit','open','open','','300-revision-11','','','2012-03-20 13:13:31','2012-03-20 12:13:31','',300,'http://ole.michelsen.dk/blog/300-revision-11/',0,'revision','',0),(316,2,'2012-03-20 13:16:44','2012-03-20 12:16:44','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model properties:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register our AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-12','','','2012-03-20 13:16:44','2012-03-20 12:16:44','',300,'http://ole.michelsen.dk/blog/300-revision-12/',0,'revision','',0),(317,2,'2012-03-20 13:17:29','2012-03-20 12:17:29','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model properties:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return (object)Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\r\n\r\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register our AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\r\n\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named value','','inherit','open','open','','300-revision-13','','','2012-03-20 13:17:29','2012-03-20 12:17:29','',300,'http://ole.michelsen.dk/blog/300-revision-13/',0,'revision','',0),(318,2,'2012-03-20 13:17:32','2012-03-20 12:17:32','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model properties:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return (object)Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\r\n\r\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register our AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\r\n\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named value','','inherit','open','open','','300-revision-14','','','2012-03-20 13:17:32','2012-03-20 12:17:32','',300,'http://ole.michelsen.dk/blog/300-revision-14/',0,'revision','',0),(320,2,'2012-03-20 13:21:34','2012-03-20 12:21:34','','QueryStringAlias','','inherit','open','open','','querystringalias','','','2012-03-20 13:21:34','2012-03-20 12:21:34','',300,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip',0,'attachment','application/zip',0),(319,2,'2012-03-20 13:18:30','2012-03-20 12:18:30','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model properties:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return (object)Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\r\n\r\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register our AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names, and displays the model:\r\n\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-15','','','2012-03-20 13:18:30','2012-03-20 12:18:30','',300,'http://ole.michelsen.dk/blog/300-revision-15/',0,'revision','',0),(321,2,'2012-03-20 13:23:18','2012-03-20 12:23:18','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can download the project here. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-16','','','2012-03-20 13:23:18','2012-03-20 12:23:18','',300,'http://ole.michelsen.dk/blog/300-revision-16/',0,'revision','',0),(323,2,'2012-03-20 13:40:41','2012-03-20 12:40:41','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\n\nThen we just have to register the attributes using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-18','','','2012-03-20 13:40:41','2012-03-20 12:40:41','',300,'http://ole.michelsen.dk/blog/300-revision-18/',0,'revision','',0),(322,2,'2012-03-20 13:25:15','2012-03-20 12:25:15','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return (object)Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\r\n\r\nWe have marked the attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name, and now we just have to register the attributes using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nWe then create our new model and mark the properties with the BindAliasAttribute. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-17','','','2012-03-20 13:25:15','2012-03-20 12:25:15','',300,'http://ole.michelsen.dk/blog/300-revision-17/',0,'revision','',0),(324,2,'2012-03-20 13:43:32','2012-03-20 12:43:32','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\n\nThen we just have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-19','','','2012-03-20 13:43:32','2012-03-20 12:43:32','',300,'http://ole.michelsen.dk/blog/300-revision-19/',0,'revision','',0),(326,2,'2012-03-20 13:45:51','2012-03-20 12:45:51','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\n\nThen we just have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-21','','','2012-03-20 13:45:51','2012-03-20 12:45:51','',300,'http://ole.michelsen.dk/blog/300-revision-21/',0,'revision','',0),(325,2,'2012-03-20 13:43:55','2012-03-20 12:43:55','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return (object)Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\r\n\r\nThen we just have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-20','','','2012-03-20 13:43:55','2012-03-20 12:43:55','',300,'http://ole.michelsen.dk/blog/300-revision-20/',0,'revision','',0),(327,2,'2012-03-20 13:48:49','2012-03-20 12:48:49','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\n\nFinally we have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-22','','','2012-03-20 13:48:49','2012-03-20 12:48:49','',300,'http://ole.michelsen.dk/blog/300-revision-22/',0,'revision','',0),(328,2,'2012-03-20 13:51:44','2012-03-20 12:51:44','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return (object)Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest way to do this is to just return the alias name.\n\nFinally we have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n<pre lang=\"c></pre>\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-23','','','2012-03-20 13:51:44','2012-03-20 12:51:44','',300,'http://ole.michelsen.dk/blog/300-revision-23/',0,'revision','',0),(330,2,'2012-03-21 11:12:53','2012-03-21 10:12:53','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\n\nFinally we have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\n{\n    return View(model);\n}</pre>\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-25','','','2012-03-21 11:12:53','2012-03-21 10:12:53','',300,'http://ole.michelsen.dk/blog/300-revision-25/',0,'revision','',0),(329,2,'2012-03-20 13:58:54','2012-03-20 12:58:54','The ASP MVC model binder automatically maps the query string to the object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\n\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\n\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\n\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\n\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\n\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\npublic class BindAliasAttribute : Attribute\n{\n    public BindAliasAttribute(string alias)\n    {\n        Alias = alias;\n    }\n\n    public string Alias { get; private set; }\n\n    public override object TypeId\n    {\n        get { return Alias; }\n    }\n\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\n    {\n        public PropertyDescriptor Inner { get; private set; }\n\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\n            : base(alias, null)\n        {\n            Inner = inner;\n        }\n\n        public override bool CanResetValue(object component)\n        {\n            return Inner.CanResetValue(component);\n        }\n\n        public override Type ComponentType\n        {\n            get { return Inner.ComponentType; }\n        }\n\n        public override object GetValue(object component)\n        {\n            return Inner.GetValue(component);\n        }\n\n        public override bool IsReadOnly\n        {\n            get { return Inner.IsReadOnly; }\n        }\n\n        public override Type PropertyType\n        {\n            get { return Inner.PropertyType; }\n        }\n\n        public override void ResetValue(object component)\n        {\n            Inner.ResetValue(component);\n        }\n\n        public override void SetValue(object component, object value)\n        {\n            Inner.SetValue(component, value);\n        }\n\n        public override bool ShouldSerializeValue(object component)\n        {\n            return Inner.ShouldSerializeValue(component);\n        }\n    }\n}</pre>\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding and type validation etc.\n\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\n\nFinally we have to handle our BindAliasAttribute using a custom model binder:\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\n{\n    protected override PropertyDescriptorCollection GetModelProperties(\n        ControllerContext controllerContext,\n        ModelBindingContext bindingContext\n    )\n    {\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\n\n        var additional = new List();\n\n        foreach (var p in\n            this.GetTypeDescriptor(controllerContext, bindingContext)\n            .GetProperties().Cast())\n        {\n            foreach (var attr in p.Attributes.OfType())\n            {\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\n\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\n                            bindingContext.PropertyMetadata[p.Name]);\n            }\n        }\n\n        return new PropertyDescriptorCollection\n            (toReturn.Cast().Concat(additional).ToArray());\n    }\n}</pre>\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\npublic class ExampleAliasModel\n{\n    [BindAlias(\"c\")]\n    public int CategoryId { get; set; }\n\n    [BindAlias(\"s\")]\n    [BindAlias(\"sort\")]\n    public string SortBy { get; set; }\n\n    [BindAlias(\"asc\")]\n    public bool SortAscending { get; set; }\n}</pre>\nAnd that is it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\n{\n    return View(model);\n}</pre>\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\n\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-24','','','2012-03-20 13:58:54','2012-03-20 12:58:54','',300,'http://ole.michelsen.dk/blog/300-revision-24/',0,'revision','',0),(331,2,'2012-03-21 11:13:08','2012-03-21 10:13:08','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\r\n\r\nFinally we have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\r\n{\r\n    return View(model);\r\n}</pre>\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-26','','','2012-03-21 11:13:08','2012-03-21 10:13:08','',300,'http://ole.michelsen.dk/blog/300-revision-26/',0,'revision','',0),(332,2,'2012-03-21 11:13:28','2012-03-21 10:13:28','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\r\n\r\nFinally we have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\r\n{\r\n    return View(model);\r\n}</pre>\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','','inherit','open','open','','300-revision-27','','','2012-03-21 11:13:28','2012-03-21 10:13:28','',300,'http://ole.michelsen.dk/blog/300-revision-27/',0,'revision','',0),(333,2,'2012-03-21 11:17:32','2012-03-21 10:17:32','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\r\n\r\nFinally we have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\r\n{\r\n    return View(model);\r\n}</pre>\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','How to bind a model property to a different named query string field with a custom alias attribute and model binder in MVC3.','inherit','open','open','','300-revision-28','','','2012-03-21 11:17:32','2012-03-21 10:17:32','',300,'http://ole.michelsen.dk/blog/300-revision-28/',0,'revision','',0),(334,2,'2012-03-23 09:20:01','2012-03-23 08:20:01','The ASP MVC model binder automatically maps a query string to an object model by matching each field to a property name. This is very handy, but things can quickly get quite verbose:\r\n\r\nhttp://domain/products?CategoryId=42&amp;SortBy=Name&amp;SortAscending=True\r\n\r\nIdeally what I want is to give my class properties an abbreviated alias for use in the query string. Thus, I should be able to use the following URI instead, and still have the input values mapped automatically to the model:\r\n\r\nhttp://domain/products?c=42&amp;s=Name&amp;asc=True\r\n\r\nFortunately there is an elegant solution, which I must admit I\'m blatantly writing up based on an <a title=\"Bind a model\'s property to a different named value\" href=\"http://stackoverflow.com/questions/4316301/asp-net-mvc-2-bind-a-models-property-to-a-different-named-value#answer-4316327\" target=\"_blank\">answer given on Stack Overflow</a>. My solution does however fix a bug to make multiple aliases on a single property work as intended.<!--more-->\r\n\r\nSo let\'s get cracking. If you want to skip ahead, you can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/QueryStringAlias.zip\">download the project here</a>. We create a custom attribute which will hold the alias name:\r\n<pre lang=\"csharp\">[AttributeUsage(AttributeTargets.Property, AllowMultiple = true)]\r\npublic class BindAliasAttribute : Attribute\r\n{\r\n    public BindAliasAttribute(string alias)\r\n    {\r\n        Alias = alias;\r\n    }\r\n\r\n    public string Alias { get; private set; }\r\n\r\n    public override object TypeId\r\n    {\r\n        get { return Alias; }\r\n    }\r\n\r\n    internal sealed class AliasedPropertyDescriptor : PropertyDescriptor\r\n    {\r\n        public PropertyDescriptor Inner { get; private set; }\r\n\r\n        public AliasedPropertyDescriptor(string alias, PropertyDescriptor inner)\r\n            : base(alias, null)\r\n        {\r\n            Inner = inner;\r\n        }\r\n\r\n        public override bool CanResetValue(object component)\r\n        {\r\n            return Inner.CanResetValue(component);\r\n        }\r\n\r\n        public override Type ComponentType\r\n        {\r\n            get { return Inner.ComponentType; }\r\n        }\r\n\r\n        public override object GetValue(object component)\r\n        {\r\n            return Inner.GetValue(component);\r\n        }\r\n\r\n        public override bool IsReadOnly\r\n        {\r\n            get { return Inner.IsReadOnly; }\r\n        }\r\n\r\n        public override Type PropertyType\r\n        {\r\n            get { return Inner.PropertyType; }\r\n        }\r\n\r\n        public override void ResetValue(object component)\r\n        {\r\n            Inner.ResetValue(component);\r\n        }\r\n\r\n        public override void SetValue(object component, object value)\r\n        {\r\n            Inner.SetValue(component, value);\r\n        }\r\n\r\n        public override bool ShouldSerializeValue(object component)\r\n        {\r\n            return Inner.ShouldSerializeValue(component);\r\n        }\r\n    }\r\n}</pre>\r\nThis was quite a mouthful, but most of it is straightforward boilerplate. By implementing a PropertyDescriptor, we can register the property with the alias name, but still use the default model binding, type validation etc.\r\n\r\nWe have marked our attribute with AllowMultiple, but by default the MemberDescriptor base class will see all BindAliasAttributes as being of identical type and <a title=\"PropertyDescriptor.Attributes doesn\'t return all attributes\" href=\"http://social.msdn.microsoft.com/Forums/en-US/winforms/thread/e6bb4146-eb1a-4c1b-a5b1-f3528d8a7864/\" target=\"_blank\">filter them as duplicates</a> (FilterAttributesIfNeeded). To avoid this we must implement the <a title=\"Attribute.TypeId Property\" href=\"http://msdn.microsoft.com/en-us/library/system.attribute.typeid.aspx\" target=\"_blank\">TypeId property</a>, and make sure it returns a unique value for each attribute. The easiest is just to return the alias name.\r\n\r\nFinally we have to handle our BindAliasAttribute using a custom model binder:\r\n<pre lang=\"csharp\">public class AliasModelBinder : DefaultModelBinder\r\n{\r\n    protected override PropertyDescriptorCollection GetModelProperties(\r\n        ControllerContext controllerContext,\r\n        ModelBindingContext bindingContext\r\n    )\r\n    {\r\n        var toReturn = base.GetModelProperties(controllerContext, bindingContext);\r\n\r\n        var additional = new List();\r\n\r\n        foreach (var p in\r\n            this.GetTypeDescriptor(controllerContext, bindingContext)\r\n            .GetProperties().Cast())\r\n        {\r\n            foreach (var attr in p.Attributes.OfType())\r\n            {\r\n                additional.Add(new BindAliasAttribute.AliasedPropertyDescriptor(attr.Alias, p));\r\n\r\n                if (bindingContext.PropertyMetadata.ContainsKey(p.Name))\r\n                    bindingContext.PropertyMetadata.Add(attr.Alias,\r\n                            bindingContext.PropertyMetadata[p.Name]);\r\n            }\r\n        }\r\n\r\n        return new PropertyDescriptorCollection\r\n            (toReturn.Cast().Concat(additional).ToArray());\r\n    }\r\n}</pre>\r\nNow we can create our new model and mark the properties with the BindAliasAttribute and make sure it\'s handled by our custom model provider. You can register the AliasModelBinder directly on the model as shown here, or register it in Global.asax (shown in attached project).\r\n<pre lang=\"csharp\">[ModelBinder(typeof(AliasModelBinder))]\r\npublic class ExampleAliasModel\r\n{\r\n    [BindAlias(\"c\")]\r\n    public int CategoryId { get; set; }\r\n\r\n    [BindAlias(\"s\")]\r\n    [BindAlias(\"sort\")]\r\n    public string SortBy { get; set; }\r\n\r\n    [BindAlias(\"asc\")]\r\n    public bool SortAscending { get; set; }\r\n}</pre>\r\nAnd that\'s it! We can now use either the alias or the real name for each property as we see fit. In the following example I have created a small form, which creates a query string using the alias names and displays the model after binding:\r\n<pre lang=\"csharp\">public ActionResult Index(ExampleAliasModel model)\r\n{\r\n    return View(model);\r\n}</pre>\r\n<img class=\"alignnone  wp-image-313\" title=\"BindAliasAttribute Example\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/03/BindAliasAttribute-Example.png\" alt=\"\" width=\"492\" height=\"558\" />\r\n\r\nNotice that this solution only works when binding. If you use the built-in templates like DisplayFor and EditorFor, MVC will output the normal property names and not the alias(es).','Bind a model property to a different named query string field','How to bind a model property to a different named query string field with a custom alias attribute and model binder in MVC3.','inherit','open','open','','300-revision-29','','','2012-03-23 09:20:01','2012-03-23 08:20:01','',300,'http://ole.michelsen.dk/blog/300-revision-29/',0,'revision','',0),(336,2,'2012-04-05 12:30:51','2012-04-05 11:30:51','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:<!--more-->\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable</li>\n</ul>\n<div>\n\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\n\n</div>\n<h2>The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.\n<h3>Update March 31, 2012</h3>\nBy popular demand, I have <a title=\"Bookmarklet server-side source code (PHP)\" href=\"https://github.com/bufferunderrun/View-Source\" target=\"_blank\">published the server-side PHP code to github</a>, so you can host your own version of the bookmarklet. Remember that <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a> is required.','View source on the iPad and iPhone','View source on the iPad using a bookmarklet to see the source code with syntax highlighting, selectable text and clickable links for URIs.','inherit','open','open','','68-autosave','','','2012-04-05 12:30:51','2012-04-05 11:30:51','',68,'http://ole.michelsen.dk/blog/68-autosave/',0,'revision','',0),(337,2,'2012-03-31 16:13:59','2012-03-31 15:13:59','','Bookmarklet server-side source code (PHP)','','inherit','open','open','','viewsource','','','2012-03-31 16:13:59','2012-03-31 15:13:59','',68,'http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/viewsource.txt',0,'attachment','text/plain',0),(338,2,'2011-08-15 20:59:29','2011-08-15 19:59:29','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\n\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:<!--more-->\n<ul>\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\n	<li>Links are clickable, so you can follow scripts etc.</li>\n	<li>Text is fully selectable</li>\n</ul>\n<div>\n\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\n\n</div>\n\n\n<h2>The code</h2>\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\n<pre lang=\"javascript\" escaped=\"true\">javascript:(function(){\n    var w = window.open(\'about:blank\'),\n        s = w.document;\n    s.write(\'<!DOCTYPE html><html><head><title>Loading Source</title></head><body></body></html>\');\n    s.close();\n    var f = s.body.appendChild(s.createElement(\'form\'));\n        f.setAttribute(\'method\',\'post\');\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\n    var i = f.appendChild(s.createElement(\'input\'));\n        i.setAttribute(\'type\',\'hidden\');\n        i.setAttribute(\'name\',\'DOM\');\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\n    f.submit();\n})();</pre>\n<h2>How to install it</h2>\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\n<ol>\n	<li>Add this page as a bookmark</li>\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\n</ol>\nVoilá!\n\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.','View source on the iPad and iPhone','To view source on the iPad, create a bookmarklet which will show you the source code with syntax highlighting, clickable links for URI\'s and selectable text.','inherit','open','open','','68-revision-35','','','2011-08-15 20:59:29','2011-08-15 19:59:29','',68,'http://ole.michelsen.dk/blog/68-revision-35/',0,'revision','',0),(339,2,'2012-03-31 16:22:15','2012-03-31 15:22:15','As a web developer I\'m frequently looking at the source code of various websites. Lately my new iPad has become my primary tool for surfing and reading documentation, but alas it completely lacks a view source feature.\r\n\r\nA fine solution is to create a bookmarklet, which is a piece of JavaScript saved as a bookmark. When you want to see the source of a web page, just click the bookmark and the source of the page is displayed. I was inspired by <a title=\"iPad View Source Bookmarklet\" href=\"http://www.ravelrumba.com/blog/ipad-view-source-bookmarklet/\" target=\"_blank\">this bookmarklet by Rob Flaherty</a>, but it has a few shortcomings. To improve upon the bookmarklet concept, I created my own version with a few more bells and whistles:<!--more-->\r\n<ul>\r\n	<li>The code is syntax highlighted (using <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a>)</li>\r\n	<li>Links are clickable, so you can follow scripts etc.</li>\r\n	<li>Text is fully selectable</li>\r\n</ul>\r\n<div>\r\n\r\n[caption id=\"attachment_183\" align=\"aligncenter\" width=\"640\" caption=\"View Source Bookmarklet\"]<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark.png\"><img class=\"size-large wp-image-183\" title=\"View Source Bookmarklet\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/Bookmark-1024x544.png\" alt=\"Clicking the bookmarklet will display the source of the web page\" width=\"640\" height=\"340\" /></a>[/caption]\r\n\r\n</div>\r\n<h2>The code</h2>\r\nThe following bookmarklet code basically posts the entire <abbr title=\"Document Object Model\">DOM</abbr> to my server, which then takes care of business server-side:\r\n<pre lang=\"javascript\">javascript:(function(){\r\n    var w = window.open(\'about:blank\'),\r\n        s = w.document;\r\n    s.write(\'\');\r\n    s.close();\r\n    var f = s.body.appendChild(s.createElement(\'form\'));\r\n        f.setAttribute(\'method\',\'post\');\r\n        f.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);\r\n    var i = f.appendChild(s.createElement(\'input\'));\r\n        i.setAttribute(\'type\',\'hidden\');\r\n        i.setAttribute(\'name\',\'DOM\');\r\n        i.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));\r\n    f.submit();\r\n})();</pre>\r\n<h2>How to install it</h2>\r\nTo add it on your computer and sync it to your iPad, just drag this link to your bookmarks:\r\n<p style=\"padding-left: 30px;\"><a title=\"View Source Bookmarklet\" href=\"javascript:(function(){var d=window.open(\'about:blank\'),a=d.document;a.write(\'%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3Ctitle%3ELoading%20Source%3C%2Ftitle%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\');a.close();var b=a.body.appendChild(a.createElement(\'form\'));b.setAttribute(\'method\',\'post\');b.setAttribute(\'action\',\'http://ole.michelsen.dk/viewsource/?uri=\'+location.href);var c=b.appendChild(a.createElement(\'input\'));c.setAttribute(\'type\',\'hidden\');c.setAttribute(\'name\',\'DOM\');c.setAttribute(\'value\',encodeURIComponent(document.documentElement.innerHTML));b.submit()})()\">View Source</a> <em>(click to try it out)</em></p>\r\nTo add it directly from your iPad (or iPhone), you need to create the bookmark manually:\r\n<ol>\r\n	<li>Add this page as a bookmark</li>\r\n	<li>Then <a href=\"http://ole.michelsen.dk/viewsource/bookmarklet.min.js\">click here to see the bookmarklet code</a> and Select All → Copy</li>\r\n	<li>Now edit that same bookmark, paste the code you just copied into the URL and name it something like \"View Source\"</li>\r\n</ol>\r\nVoilá!\r\n\r\nNote that the source shown is the generated <abbr title=\"Document Object Model\">DOM</abbr>, and not the original HTML. These might differ depending on the amount of JavaScript used on the page.\r\n<h3>Update March 31, 2012</h3>\r\nBy popular demand, I have <a title=\"Bookmarklet server-side source code (PHP)\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/07/viewsource.txt\">attached the server-side PHP code</a>, so you can host your own version of the bookmarklet. Remember that <a title=\"GeSHi - Generic Syntax Highlighter\" href=\"http://qbnz.com/highlighter/\" target=\"_blank\">GeSHi</a> is required.','View source on the iPad and iPhone','View source on the iPad using a bookmarklet to see the source code with syntax highlighting, selectable text and clickable links for URIs.','inherit','open','open','','68-revision-36','','','2012-03-31 16:22:15','2012-03-31 15:22:15','',68,'http://ole.michelsen.dk/blog/68-revision-36/',0,'revision','',0),(345,2,'2012-04-06 22:34:15','2012-04-06 21:34:15','','Running total','','inherit','open','open','','running-total','','','2012-04-06 22:34:15','2012-04-06 21:34:15','',340,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png',0,'attachment','image/png',0),(342,2,'2012-04-06 22:30:30','2012-04-06 21:30:30','<img class=\"alignleft size-full wp-image-341\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"Running total handwritten note paper\" width=\"250\" height=\"148\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\n\nWithout further ado, let\'s jump into a test example:\n\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n\n<!--?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?--> You can even do a running total for each account separately using the PARTITION clause:\n\nSELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;\n\nasdf','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision','','','2012-04-06 22:30:30','2012-04-06 21:30:30','',340,'http://ole.michelsen.dk/blog/340-revision/',0,'revision','',0),(343,2,'2012-04-06 22:30:56','2012-04-06 21:30:56','<img class=\"alignleft size-full wp-image-341\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"Running total handwritten note paper\" width=\"250\" height=\"148\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n\r\nWithout further ado, let\'s jump into a test example:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\nasdf','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-2','','','2012-04-06 22:30:56','2012-04-06 21:30:56','',340,'http://ole.michelsen.dk/blog/340-revision-2/',0,'revision','',0),(344,2,'2012-04-06 22:31:03','2012-04-06 21:31:03','<img class=\"alignleft size-full wp-image-341\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"Running total handwritten note paper\" width=\"250\" height=\"148\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n\r\nWithout further ado, let\'s jump into a test example:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\nasdf','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-3','','','2012-04-06 22:31:03','2012-04-06 21:31:03','',340,'http://ole.michelsen.dk/blog/340-revision-3/',0,'revision','',0),(346,2,'2012-04-06 22:41:34','2012-04-06 21:41:34','','Results with partition','','inherit','open','open','','results-partition','','','2012-04-06 22:41:34','2012-04-06 21:41:34','',340,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png',0,'attachment','image/png',0),(347,2,'2012-04-06 22:41:35','2012-04-06 21:41:35','','Results','','inherit','open','open','','results','','','2012-04-06 22:41:35','2012-04-06 21:41:35','',340,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png',0,'attachment','image/png',0),(348,2,'2012-04-06 22:42:54','2012-04-06 21:42:54','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\n\nHere\'s a test example, where we will be creating a running total for an imaginary ledger using the OVER clause with SUM:\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\n\nYou can even do a running total for each account separately using the PARTITION clause:\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\n\nasdf','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-4','','','2012-04-06 22:42:54','2012-04-06 21:42:54','',340,'http://ole.michelsen.dk/blog/340-revision-4/',0,'revision','',0),(349,2,'2012-04-06 22:45:00','2012-04-06 21:45:00','','Running total test script','','inherit','open','open','','running-total-sql-server-2012','','','2012-04-06 22:45:00','2012-04-06 21:45:00','',340,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt',0,'attachment','text/plain',0),(350,2,'2012-04-06 22:52:06','2012-04-06 21:52:06','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\n\nHere\'s a test example, where we will be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\n\nYou can even do a running total for each account separately using the PARTITION clause:\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\n<h2>SQL Server 2005 and 2008</h2>\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\n<pre lang=\"sql\">;WITH cte AS (\nSELECT id, account, deposit, deposit as \'total\'\nFROM #TestData\nWHERE id = 1\n\nUNION ALL\n\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\n)\nSELECT * FROM cte \nOPTION (MAXRECURSION 32767);</pre>\nThere is one caveat though, since CTEs can at most do 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\n\nSELECT a.*,\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id &lt;= a.id) AS \'total\'\nFROM #TestData a\n\n&nbsp;','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-5','','','2012-04-06 22:52:06','2012-04-06 21:52:06','',340,'http://ole.michelsen.dk/blog/340-revision-5/',0,'revision','',0),(352,2,'2012-04-06 22:55:47','2012-04-06 21:55:47','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\n\nIn this test example we\'ll be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\n\nYou can even do a running total for each account separately using the PARTITION clause:\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\n<h2>SQL Server 2005 and 2008</h2>\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\n<pre lang=\"sql\">;WITH cte AS (\nSELECT id, account, deposit, deposit as \'total\'\nFROM #TestData\nWHERE id = 1\n\nUNION ALL\n\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\n)\nSELECT * FROM cte\nOPTION (MAXRECURSION 32767);</pre>\nThere is one caveat though, since CTEs can at most do 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\n<pre lang=\"sql\">SELECT a.*,\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id = a.id) AS \'total\'\nFROM #TestData a</pre>\n&nbsp;','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-7','','','2012-04-06 22:55:47','2012-04-06 21:55:47','',340,'http://ole.michelsen.dk/blog/340-revision-7/',0,'revision','',0),(351,2,'2012-04-06 22:52:59','2012-04-06 21:52:59','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n\r\nHere\'s a test example, where we will be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n<h2>SQL Server 2005 and 2008</h2>\r\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\r\n<pre lang=\"sql\">;WITH cte AS (\r\nSELECT id, account, deposit, deposit as \'total\'\r\nFROM #TestData\r\nWHERE id = 1\r\n\r\nUNION ALL\r\n\r\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\r\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\r\n)\r\nSELECT * FROM cte \r\nOPTION (MAXRECURSION 32767);</pre>\r\nThere is one caveat though, since CTEs can at most do 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\r\n<pre lang=\"sql\">SELECT a.*,\r\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id &lt;= a.id) AS \'total\'\r\nFROM #TestData a</pre>\r\n&nbsp;','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-6','','','2012-04-06 22:52:59','2012-04-06 21:52:59','',340,'http://ole.michelsen.dk/blog/340-revision-6/',0,'revision','',0),(353,2,'2012-04-06 22:58:34','2012-04-06 21:58:34','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\n\nIn this test example we\'ll be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\n\nYou can even do a running total for each account separately using the PARTITION clause:\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\nFROM #TestData a\nORDER BY a.id;</pre>\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\n<h2>SQL Server 2005 and 2008</h2>\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\n<pre lang=\"sql\">;WITH cte AS (\nSELECT id, account, deposit, deposit as \'total\'\nFROM #TestData\nWHERE id = 1\n\nUNION ALL\n\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\n)\nSELECT * FROM cte\nOPTION (MAXRECURSION 32767);</pre>\nThere is one caveat though, since CTEs can do at most 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\n<pre lang=\"sql\">SELECT a.*,\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id <= a.id) AS \'total\'\nFROM #TestData a</pre>','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-8','','','2012-04-06 22:58:34','2012-04-06 21:58:34','',340,'http://ole.michelsen.dk/blog/340-revision-8/',0,'revision','',0),(354,2,'2012-04-06 23:03:29','2012-04-06 22:03:29','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n<!--more-->\r\nIn this test example we\'ll be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n<h2>SQL Server 2005 and 2008</h2>\r\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\r\n<pre lang=\"sql\">;WITH cte AS (\r\nSELECT id, account, deposit, deposit as \'total\'\r\nFROM #TestData\r\nWHERE id = 1\r\n\r\nUNION ALL\r\n\r\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\r\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\r\n)\r\nSELECT * FROM cte\r\nOPTION (MAXRECURSION 32767);</pre>\r\nThere is one caveat though, since CTEs can do at most 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\r\n<pre lang=\"sql\">SELECT a.*,\r\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id <= a.id) AS \'total\'\r\nFROM #TestData a</pre>','Calculate running totals in SQL Server 2012','','inherit','open','open','','340-revision-9','','','2012-04-06 23:03:29','2012-04-06 22:03:29','',340,'http://ole.michelsen.dk/blog/340-revision-9/',0,'revision','',0),(355,2,'2012-04-06 23:05:28','2012-04-06 22:05:28','<img class=\"alignleft size-full wp-image-345\" title=\"Running total\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total.png\" alt=\"\" width=\"180\" height=\"107\" />In the previous versions of SQL Server, calculating a running total for say, a bank account ledger, has been a frustratingly complex task. Fortunately <a title=\"Microsoft SQL Server\" href=\"http://www.microsoft.com/sql/\" target=\"_blank\">SQL Server 2012</a> makes this a breeze with new support for windowed aggregate functions.\r\n<!--more-->\r\nIn this test example we\'ll be creating a running total for an imaginary ledger using the OVER clause with SUM (you can get the entire <a title=\"SQL test script\" href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/running-total-sql-server-2012.txt\" target=\"_blank\">test script here</a>):\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-347\" title=\"Results\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n\r\nYou can even do a running total for each account separately using the PARTITION clause:\r\n<pre lang=\"sql\">SELECT a.id, a.account, a.deposit, SUM(a.deposit) OVER (PARTITION BY a.account ORDER BY a.id) AS \'total\'\r\nFROM #TestData a\r\nORDER BY a.id;</pre>\r\n<img class=\"alignnone size-full wp-image-346\" title=\"Results with partition\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/results-partition.png\" alt=\"\" width=\"255\" height=\"196\" />\r\n<h2>SQL Server 2005 and 2008</h2>\r\nFor those still stuck on older versions of SQL Server, the solution is a little less straightforward. There are a lot of techniques, but I have found the best performance using a recursive CTE (Common Table Expression), a feature added in SQL Server 2005.\r\n<pre lang=\"sql\">;WITH cte AS (\r\nSELECT id, account, deposit, deposit as \'total\'\r\nFROM #TestData\r\nWHERE id = 1\r\n\r\nUNION ALL\r\n\r\nSELECT a.id, a.account, a.deposit, cte.total + a.deposit\r\nFROM cte JOIN #TestData a ON cte.id + 1 = a.id\r\n)\r\nSELECT * FROM cte\r\nOPTION (MAXRECURSION 32767);</pre>\r\nThere is one caveat though, since CTEs can do at most 32767 recursions. So if you have more records than that, you must fall back on the old sub-select:\r\n<pre lang=\"sql\">SELECT a.*,\r\n(SELECT SUM(b.deposit) FROM #TestData b WHERE b.id <= a.id) AS \'total\'\r\nFROM #TestData a</pre>','Calculate a running total in SQL Server 2012','','inherit','open','open','','340-revision-10','','','2012-04-06 23:05:28','2012-04-06 22:05:28','',340,'http://ole.michelsen.dk/blog/340-revision-10/',0,'revision','',0),(356,2,'2012-09-13 23:39:04','2012-09-13 22:39:04','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could be when calling up a product page with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all object properties that have a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can <a href=\"http://toquerystring.codeplex.com/\">find my Visual Studio solution for .ToQueryString() on CodePlex</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','publish','open','open','','serialize-object-into-a-query-string-with-reflection','','','2012-09-19 14:03:02','2012-09-19 13:03:02','',0,'http://ole.michelsen.dk/blog/?p=356',0,'post','',0),(357,2,'2012-03-30 08:42:56','2012-03-30 07:42:56','With the advent of MVC in ASP.NET, proper object oriented code is encouraged more than ever, and Razor makes it a joy to work recursively with tree structures. So how do we go about converting our SQL table data to a tree structure?<!--more-->\r\n\r\nIt\'s common to have tree data stored this way in a database:\r\n\r\n[caption id=\"attachment_260\" align=\"alignnone\" width=\"341\" caption=\"Tree data stored in SQL table\"]<img class=\"size-full wp-image-260\" title=\"Sql2Tree SQL table data\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-SQL-table-data.png\" alt=\"\" width=\"341\" height=\"272\" />[/caption]\r\n\r\nWhat we want is to map this data into the following tree node structure, where each node has a parent, and optionally a set of child nodes:\r\n<pre lang=\"csharp\">public class TreeNode\r\n{\r\n    public int Id;\r\n\r\n    [ScriptIgnore]\r\n    public int ParentId;\r\n\r\n    [ScriptIgnore]\r\n    public TreeNode Parent;\r\n\r\n    public string Name;\r\n\r\n    public List Children = new List();\r\n}</pre>\r\nThe <code>ScriptIgnore</code> attributes are only there so we can serialize our nodes as JSON for a web service. In JSON you can\'t have circular references, and the fields will automatically be left out of the serialized string saving precious bytes.\r\n\r\nTo handle the tree nodes we create a Tree class, which holds the nodes and builds the tree by setting the node relations:\r\n<pre lang=\"csharp\">public class Tree\r\n{\r\n    private TreeNode rootNode;\r\n    public TreeNode RootNode\r\n    {\r\n        get { return rootNode; }\r\n        set\r\n        {\r\n            if (RootNode != null)\r\n                Nodes.Remove(RootNode.Id);\r\n\r\n            Nodes.Add(value.Id, value);\r\n            rootNode = value;\r\n        }\r\n    }\r\n\r\n    public Dictionary Nodes { get; set; }\r\n\r\n    public Tree()\r\n    {\r\n    }\r\n\r\n    public void BuildTree()\r\n    {\r\n        TreeNode parent;\r\n        foreach (var node in Nodes.Values)\r\n        {\r\n            if (Nodes.TryGetValue(node.ParentId, out parent) &amp;&amp;\r\n                node.Id != node.ParentId)\r\n            {\r\n                node.Parent = parent;\r\n                parent.Children.Add(node);\r\n            }\r\n        }\r\n    }\r\n}</pre>\r\nTo build the tree we run through all the nodes and map each to their parent. Since we are storing the nodes in a hash table, looking up the parent of each node is only taking constant time <em>k</em>, which means we can generate our tree structure in <em>O</em>(<em>n</em><em>k</em>) linear time which is very acceptable.\r\n\r\nNow we can map our SQL table into our tree by using a little LINQ magic in our controller:\r\n<pre lang=\"csharp\">private Tree GetData()\r\n{\r\n    var tree = new Tree();\r\n\r\n    using (var db = new TreeEntities())\r\n    {\r\n        // Add each element as a tree node\r\n        tree.Nodes = db.TreeMenu\r\n            .Select(t =&gt; new TreeNode { Id = t.Id, ParentId = t.ParentId, Name = t.Name })\r\n            .ToDictionary(t =&gt; t.Id);\r\n\r\n        // Create a new root node\r\n        tree.RootNode = new TreeNode { Id = 0, Name = \"Root\" };\r\n\r\n        // Build the tree, setting parent and children references for all elements\r\n        tree.BuildTree();\r\n    }\r\n\r\n    return tree;\r\n}\r\n\r\npublic ActionResult Index()\r\n{\r\n    var model = GetData();\r\n    return View(model);\r\n}</pre>\r\nTo display our tree as a nested list in HTML we use a recursive display template in Razor like so:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.TreeNode\r\n\r\n@Model.Name\r\n@if (Model.Children.Count &gt; 0)\r\n{</pre>\r\n<ul>@foreach (var node in Model.Children) {\r\n	<li>@Html.DisplayFor(x =&gt; node)</li>\r\n}</ul>\r\n<pre lang=\"csharp\">\r\n}</pre>\r\nUsing the template in our view is simple:\r\n<pre lang=\"csharp\">@model Sql2Tree.Models.Tree</pre>\r\n<ul>\r\n	<li>@Html.DisplayFor(x =&gt; Model.RootNode)</li>\r\n</ul>\r\nAnd voilá, our \"flat\" SQL table is now a beautiful nested tree list. This is very convenient for menus, and can easily be adapted for nested select lists and tables etc.\r\n\r\n[caption id=\"attachment_259\" align=\"alignnone\" width=\"315\" caption=\"Tree data displayed as a HTML nested list\"]<img class=\"size-full wp-image-259\" title=\"Sql2Tree HTML nested list\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree-HTML-nested-list.png\" alt=\"Sql2Tree HTML nested list\" width=\"315\" height=\"322\" />[/caption]\r\n\r\nYou can download the example project here, with examples of a list that does not display the root node and how to output the tree as JSON for AJAX-based menus.\r\n\r\n<a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\"><img class=\"alignnone size-full wp-image-232\" title=\"Visual Studio 10 Project\" src=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/08/vs.png\" alt=\"\" width=\"31\" height=\"29\" /></a> <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2011/10/Sql2Tree.zip\">Download Sql2Tree.zip project.</a>','Mapping relational table data to a tree structure in MVC','How to map SQL table data into a tree structure and display it as a nested list using recursive Razor display templates.','inherit','open','open','','247-revision-26','','','2012-03-30 08:42:56','2012-03-30 07:42:56','',247,'http://ole.michelsen.dk/blog/247-revision-26/',0,'revision','',0),(359,2,'2012-09-13 21:53:23','2012-09-13 20:53:23','','Visual Studio solution for .ToQueryString()','','inherit','open','open','','serializetoquerystring','','','2012-09-13 21:53:23','2012-09-13 20:53:23','',356,'http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip',0,'attachment','application/zip',0),(360,2,'2012-04-06 23:30:36','2012-04-06 22:30:36','','Auto Draft','','inherit','open','open','','356-revision','','','2012-04-06 23:30:36','2012-04-06 22:30:36','',356,'http://ole.michelsen.dk/blog/356-revision/',0,'revision','',0),(361,2,'2012-09-13 21:59:55','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2012-09-13 21:59:55','0000-00-00 00:00:00','',0,'http://ole.michelsen.dk/blog/?p=361',0,'post','',0),(362,2,'2012-09-13 22:24:36','2012-09-13 21:24:36','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, and serve up the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre>public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\n&nbsp;','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-2','','','2012-09-13 22:24:36','2012-09-13 21:24:36','',356,'http://ole.michelsen.dk/blog/356-revision-2/',0,'revision','',0),(363,2,'2012-09-13 23:07:16','2012-09-13 22:07:16','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, and serve up the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre>public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre>// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x =&gt; x.CanRead)\n    .Where(x =&gt; x.GetValue(request, null) != null)\n    .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre>// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x =&gt; x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre>// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre>var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42\nstring querystring = example.ToQueryString();</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nThis implementation only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\n&nbsp;','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-3','','','2012-09-13 23:07:16','2012-09-13 22:07:16','',356,'http://ole.michelsen.dk/blog/356-revision-3/',0,'revision','',0),(364,2,'2012-09-13 23:19:53','2012-09-13 22:19:53','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, and serve up the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre>public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre>// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x =&gt; x.CanRead)\n    .Where(x =&gt; x.GetValue(request, null) != null)\n    .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre>// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x =&gt; x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre>// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre>var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42\nstring querystring = example.ToQueryString();</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method, which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nI have also created a Visual Studio solution with this .ToQueryString() implementation and some small examples and unit tests. I look forward to your comment','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-4','','','2012-09-13 23:19:53','2012-09-13 22:19:53','',356,'http://ole.michelsen.dk/blog/356-revision-4/',0,'revision','',0),(365,2,'2012-09-13 23:22:11','2012-09-13 22:22:11','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, and serve up the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre>public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre>// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x =&gt; x.CanRead)\n    .Where(x =&gt; x.GetValue(request, null) != null)\n    .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre>// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x =&gt; x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre>// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre>var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42\nstring querystring = example.ToQueryString();</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method, which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can also download my <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-5','','','2012-09-13 23:22:11','2012-09-13 22:22:11','',356,'http://ole.michelsen.dk/blog/356-revision-5/',0,'revision','',0),(366,2,'2012-09-13 23:23:46','2012-09-13 22:23:46','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, and serve up the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre lang=\"csharp\">public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre lang=\"csharp\">// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x =&gt; x.CanRead)\n    .Where(x =&gt; x.GetValue(request, null) != null)\n    .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre>// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x =&gt; x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre>// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre>var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42\nstring querystring = example.ToQueryString();</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method, which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-6','','','2012-09-13 23:23:46','2012-09-13 22:23:46','',356,'http://ole.michelsen.dk/blog/356-revision-6/',0,'revision','',0),(368,2,'2012-09-13 23:28:11','2012-09-13 22:28:11','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre lang=\"csharp\">public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x => x.CanRead)\n            .Where(x => x.GetValue(request, null) != null)\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\n            .Select(x => x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&\", properties\n            .Select(x => string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre lang=\"csharp\">// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x => x.CanRead)\n    .Where(x => x.GetValue(request, null) != null)\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x => !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x => x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre lang=\"csharp\">var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\nstring querystring = example.ToQueryString();\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method, which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-8','','','2012-09-13 23:28:11','2012-09-13 22:28:11','',356,'http://ole.michelsen.dk/blog/356-revision-8/',0,'revision','',0),(367,2,'2012-09-13 23:26:05','2012-09-13 22:26:05','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task of concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre lang=\"csharp\">public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x =&gt; x.CanRead)\n            .Where(x =&gt; x.GetValue(request, null) != null)\n            .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n            .Select(x =&gt; x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast&lt;object&gt;());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&amp;\", properties\n            .Select(x =&gt; string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of any object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre lang=\"csharp\">// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x =&gt; x.CanRead)\n    .Where(x =&gt; x.GetValue(request, null) != null)\n    .ToDictionary(x =&gt; x.Name, x =&gt; x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x =&gt; !(x.Value is string) &amp;&amp; x.Value is IEnumerable)\n    .Select(x =&gt; x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast<object&gt;());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre lang=\"csharp\">var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\nstring querystring = example.ToQueryString();\n// Output: Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&amp;NumberOfItems=20&amp;Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method, which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-7','','','2012-09-13 23:26:05','2012-09-13 22:26:05','',356,'http://ole.michelsen.dk/blog/356-revision-7/',0,'revision','',0),(369,2,'2012-09-13 23:33:35','2012-09-13 22:33:35','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\n<h2>The Code</h2>\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre lang=\"csharp\">public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x => x.CanRead)\n            .Where(x => x.GetValue(request, null) != null)\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\n            .Select(x => x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&\", properties\n            .Select(x => string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\n<pre lang=\"csharp\">// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x => x.CanRead)\n    .Where(x => x.GetValue(request, null) != null)\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\n    .Select(x => x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre lang=\"csharp\">var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\nstring querystring = example.ToQueryString();\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','','inherit','open','open','','356-revision-9','','','2012-09-13 23:33:35','2012-09-13 22:33:35','',356,'http://ole.michelsen.dk/blog/356-revision-9/',0,'revision','',0),(370,2,'2012-09-13 23:37:55','2012-09-13 22:37:55','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-10','','','2012-09-13 23:37:55','2012-09-13 22:37:55','',356,'http://ole.michelsen.dk/blog/356-revision-10/',0,'revision','',0),(371,2,'2012-09-13 23:39:04','2012-09-13 22:39:04','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-11','','','2012-09-13 23:39:04','2012-09-13 22:39:04','',356,'http://ole.michelsen.dk/blog/356-revision-11/',0,'revision','',0),(372,2,'2012-09-13 23:39:36','2012-09-13 22:39:36','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all properties on an object that has a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-12','','','2012-09-13 23:39:36','2012-09-13 22:39:36','',356,'http://ole.michelsen.dk/blog/356-revision-12/',0,'revision','',0),(373,2,'2012-09-13 23:41:57','2012-09-13 22:41:57','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could when calling up a product listing with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all object properties that has a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-13','','','2012-09-13 23:41:57','2012-09-13 22:41:57','',356,'http://ole.michelsen.dk/blog/356-revision-13/',0,'revision','',0),(374,2,'2012-09-13 23:46:24','2012-09-13 22:46:24','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could be when calling up a product page with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all object properties that has a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-14','','','2012-09-13 23:46:24','2012-09-13 22:46:24','',356,'http://ole.michelsen.dk/blog/356-revision-14/',0,'revision','',0),(375,2,'2012-09-19 14:02:51','2012-09-19 13:02:51','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could be when calling up a product page with some preset settings for sorting, or requesting data from a web service such as Google Places.\n\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\n\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\n<h2>The Code</h2>\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\n<pre lang=\"csharp\">public static class UrlHelpers\n{\n    public static string ToQueryString(this object request, string separator = \",\")\n    {\n        if (request == null)\n            throw new ArgumentNullException(\"request\");\n\n        // Get all properties on the object\n        var properties = request.GetType().GetProperties()\n            .Where(x => x.CanRead)\n            .Where(x => x.GetValue(request, null) != null)\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\n\n        // Get names for all IEnumerable properties (excl. string)\n        var propertyNames = properties\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\n            .Select(x => x.Key)\n            .ToList();\n\n        // Concat all IEnumerable properties into a comma separated string\n        foreach (var key in propertyNames)\n        {\n            var valueType = properties[key].GetType();\n            var valueElemType = valueType.IsGenericType\n                                    ? valueType.GetGenericArguments()[0]\n                                    : valueType.GetElementType();\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n            {\n                var enumerable = properties[key] as IEnumerable;\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\n            }\n        }\n\n        // Concat all key/value pairs into a string separated by ampersand\n        return string.Join(\"&\", properties\n            .Select(x => string.Concat(\n                Uri.EscapeDataString(x.Key), \"=\",\n                Uri.EscapeDataString(x.Value.ToString()))));\n    }\n}</pre>\n<h2>What does it do?</h2>\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\n\nThe following part looks for all object properties that have a publicly accessible getter, and where the value is not null.\n<pre lang=\"csharp\">// Get all properties on the object\nvar properties = request.GetType().GetProperties()\n    .Where(x => x.CanRead)\n    .Where(x => x.GetValue(request, null) != null)\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\nvar propertyNames = properties\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\n    .Select(x => x.Key)\n    .ToList();</pre>\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\nforeach (var key in propertyNames)\n{\n    var valueType = properties[key].GetType();\n    var valueElemType = valueType.IsGenericType\n                            ? valueType.GetGenericArguments()[0]\n                            : valueType.GetElementType();\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\n    {\n        var enumerable = properties[key] as IEnumerable;\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\n    }\n}</pre>\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\n<pre lang=\"csharp\">var example = new\n{\n    Category = \"Shoes\",\n    NumberOfItems = 20,\n    Sizes = new[] { 40, 41, 42 }\n};\n\nstring querystring = example.ToQueryString();\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\n\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\n\nYou can <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">find my Visual Studio solution for .ToQueryString() on CodePlex</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-autosave','','','2012-09-19 14:02:51','2012-09-19 13:02:51','',356,'http://ole.michelsen.dk/blog/356-autosave/',0,'revision','',0),(376,2,'2012-09-13 23:47:51','2012-09-13 22:47:51','When you are coding modern web applications against websites and web services, you often have to serialize a lot of data and pass it off to some URI. This could be when calling up a product page with some preset settings for sorting, or requesting data from a web service such as Google Places.\r\n\r\nSo you have an object with all the request data that you need to transfer, but now you have to convert this into a query string. There are a lot of ways to do this, but often it becomes a rather manual task concatenating all the properties one by one. Wouldn\'t it be easier if you could somehow automatically transform all the properties of your class into a query string?\r\n\r\nThe good news is, that by using C# reflection and extension methods, you can create a simple solution, which will be extremely easy to use and work well for most types of (POCO) classes.<!--more-->\r\n<h2>The Code</h2>\r\nLet\'s not beat around the bush, so I\'ll serve the solution up front, and then I\'ll step through and explain each section afterwards.\r\n<pre lang=\"csharp\">public static class UrlHelpers\r\n{\r\n    public static string ToQueryString(this object request, string separator = \",\")\r\n    {\r\n        if (request == null)\r\n            throw new ArgumentNullException(\"request\");\r\n\r\n        // Get all properties on the object\r\n        var properties = request.GetType().GetProperties()\r\n            .Where(x => x.CanRead)\r\n            .Where(x => x.GetValue(request, null) != null)\r\n            .ToDictionary(x => x.Name, x => x.GetValue(request, null));\r\n\r\n        // Get names for all IEnumerable properties (excl. string)\r\n        var propertyNames = properties\r\n            .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n            .Select(x => x.Key)\r\n            .ToList();\r\n\r\n        // Concat all IEnumerable properties into a comma separated string\r\n        foreach (var key in propertyNames)\r\n        {\r\n            var valueType = properties[key].GetType();\r\n            var valueElemType = valueType.IsGenericType\r\n                                    ? valueType.GetGenericArguments()[0]\r\n                                    : valueType.GetElementType();\r\n            if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n            {\r\n                var enumerable = properties[key] as IEnumerable;\r\n                properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n            }\r\n        }\r\n\r\n        // Concat all key/value pairs into a string separated by ampersand\r\n        return string.Join(\"&\", properties\r\n            .Select(x => string.Concat(\r\n                Uri.EscapeDataString(x.Key), \"=\",\r\n                Uri.EscapeDataString(x.Value.ToString()))));\r\n    }\r\n}</pre>\r\n<h2>What does it do?</h2>\r\nThis extension method allows us to call .ToQueryString() on all objects, and uses reflection to read the properties of that object, which are then serialized and encoded into a fully qualified query string, which we can append to any URI.\r\n\r\nThe following part looks for all object properties that have a publicly accessible getter, and where the value is not null.\r\n<pre lang=\"csharp\">// Get all properties on the object\r\nvar properties = request.GetType().GetProperties()\r\n    .Where(x => x.CanRead)\r\n    .Where(x => x.GetValue(request, null) != null)\r\n    .ToDictionary(x => x.Name, x => x.GetValue(request, null));</pre>\r\nThis works well for most simple types, like int, decimal, char and string, but arrays and collections needs special attention to be properly serialized. Therefore we pull out a list of all properties that implement the IEnumerable interface. This is both Array, List, Dictionary etc. but also string, which is actually a list of chars, and therefore needs to be excluded.\r\n<pre lang=\"csharp\">// Get names for all IEnumerable properties (excl. string)\r\nvar propertyNames = properties\r\n    .Where(x => !(x.Value is string) && x.Value is IEnumerable)\r\n    .Select(x => x.Key)\r\n    .ToList();</pre>\r\nWe want to convert the collections into a string, so we loop through the IEnumerable properties, and check if they contain primitives or strings (we won\'t handle i.e. lists of classes). A bit of special care must be given when determining the contained type, whether we are dealing with an array or a generic collection, and then we concatenate all the values with a custom separator.\r\n<pre lang=\"csharp\">// Concat all IEnumerable properties into a comma separated string\r\nforeach (var key in propertyNames)\r\n{\r\n    var valueType = properties[key].GetType();\r\n    var valueElemType = valueType.IsGenericType\r\n                            ? valueType.GetGenericArguments()[0]\r\n                            : valueType.GetElementType();\r\n    if (valueElemType.IsPrimitive || valueElemType == typeof (string))\r\n    {\r\n        var enumerable = properties[key] as IEnumerable;\r\n        properties[key] = string.Join(separator, enumerable.Cast<object>());\r\n    }\r\n}</pre>\r\nFinally we can just concatenate all our property names and values, URI encode them and separate them by an ampersand into a query string. The following example shows how a simple class is successfully converted into a query string:\r\n<pre lang=\"csharp\">var example = new\r\n{\r\n    Category = \"Shoes\",\r\n    NumberOfItems = 20,\r\n    Sizes = new[] { 40, 41, 42 }\r\n};\r\n\r\nstring querystring = example.ToQueryString();\r\n// Output: Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nThe return value of .ToQueryString() can then be added to a URI, to form a request to an imaginary product page for a shoe shop:\r\n<pre>http://shoes4us.com/products?Category=Shoes&NumberOfItems=20&Sizes=40%2C41%2C42</pre>\r\nHopefully this has shown how powerful C# reflection can be. We can pull out a lot of information about anonymous objects and create a general extension method which can be used on all our classes without special interfaces or inheritance. Also it is very easy to extend this implementation to handle custom serialization of more complex class types, take into account special property attributes etc.\r\n\r\nThis implementation shown here only support classes with properties that are primitives, strings and collections of the former. Complex nested classes are not easily converted to the key/value format of a query string and are not supported.\r\n\r\nYou can also <a href=\"http://ole.michelsen.dk/blog/wp-content/uploads/2012/04/SerializeToQueryString.zip\">download my Visual Studio solution for .ToQueryString()</a> along with some small examples and unit tests. I look forward to your comments and suggestions - happy coding!','Serialize object into a query string with Reflection','Serialize any object in C# to a query string with the .ToQueryString() extension method. Supports primitives, strings, arrays and collections.','inherit','open','open','','356-revision-15','','','2012-09-13 23:47:51','2012-09-13 22:47:51','',356,'http://ole.michelsen.dk/blog/356-revision-15/',0,'revision','',0);
/*!40000 ALTER TABLE `ole_posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_term_relationships`
--

DROP TABLE IF EXISTS `ole_term_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_term_relationships`
--

LOCK TABLES `ole_term_relationships` WRITE;
/*!40000 ALTER TABLE `ole_term_relationships` DISABLE KEYS */;
INSERT INTO `ole_term_relationships` VALUES (1,2,0),(2,2,0),(3,2,0),(4,2,0),(5,2,0),(6,2,0),(7,2,0),(224,35,0),(4,6,0),(4,3,0),(4,4,0),(4,5,0),(70,22,0),(20,6,0),(277,38,0),(27,8,0),(27,13,0),(27,39,0),(27,38,0),(27,37,0),(20,17,0),(71,22,0),(20,19,0),(20,20,0),(20,21,0),(72,22,0),(114,22,0),(120,23,0),(120,24,0),(68,27,0),(153,31,0),(68,26,0),(68,28,0),(68,20,0),(68,29,0),(68,30,0),(68,31,0),(68,32,0),(153,13,0),(153,33,0),(153,23,0),(153,34,0),(224,8,0),(224,36,0),(219,22,0),(222,22,0),(218,22,0),(220,22,0),(274,22,0),(247,38,0),(247,8,0),(277,8,0),(247,36,0),(277,36,0),(300,38,0),(300,8,0),(300,36,0),(300,21,0),(300,6,0),(340,41,0),(356,38,0),(356,8,0);
/*!40000 ALTER TABLE `ole_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_term_taxonomy`
--

DROP TABLE IF EXISTS `ole_term_taxonomy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=MyISAM AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_term_taxonomy`
--

LOCK TABLES `ole_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `ole_term_taxonomy` DISABLE KEYS */;
INSERT INTO `ole_term_taxonomy` VALUES (1,1,'category','',0,0),(2,2,'link_category','',0,7),(3,3,'post_tag','',0,0),(4,3,'category','',0,0),(5,4,'post_tag','',0,0),(6,5,'post_tag','',0,2),(8,7,'category','',0,6),(13,12,'post_tag','',0,2),(17,16,'category','',0,1),(19,18,'post_tag','',0,1),(20,19,'post_tag','',0,2),(21,20,'post_tag','',0,2),(22,21,'nav_menu','',0,9),(37,34,'post_tag','',0,1),(38,35,'post_tag','',0,5),(23,22,'category','',0,2),(24,23,'post_tag','',0,1),(26,25,'category','',0,1),(27,26,'post_tag','',0,1),(28,27,'post_tag','',0,1),(30,16,'post_tag','',0,1),(29,28,'post_tag','',0,1),(31,29,'post_tag','',0,2),(32,30,'post_tag','',0,1),(33,6,'post_tag','',0,1),(34,31,'post_tag','',0,1),(35,32,'post_tag','',0,1),(36,33,'post_tag','',0,4),(39,36,'post_tag','',0,1),(41,38,'category','',0,1);
/*!40000 ALTER TABLE `ole_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_terms`
--

DROP TABLE IF EXISTS `ole_terms`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  UNIQUE KEY `slug` (`slug`),
  KEY `name` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=39 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_terms`
--

LOCK TABLES `ole_terms` WRITE;
/*!40000 ALTER TABLE `ole_terms` DISABLE KEYS */;
INSERT INTO `ole_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Blogroll','blogroll',0),(3,'SEO','seo',0),(4,'Rewrite','rewrite',0),(5,'URI','uri',0),(6,'ASP.NET','asp-net',0),(7,'ASP.NET MVC','aspnetmvc',0),(12,'Security','security',0),(16,'JavaScript','javascript',0),(18,'Hash','hash',0),(19,'HTML','html',0),(20,'Query String','query-string',0),(21,'Top','top',0),(22,'Tips','tips',0),(23,'Email','email',0),(25,'Tools','tools',0),(26,'iPad','ipad',0),(27,'iPhone','iphone',0),(28,'CSS','css',0),(29,'Browser','browser',0),(30,'Mobile','mobile',0),(31,'NTLM','ntlm',0),(32,'Localization','localization',0),(33,'LINQ','linq',0),(34,'Provider','provider',0),(35,'C#','csharp',0),(36,'Framework','framework',0),(38,'SQL','sql',0);
/*!40000 ALTER TABLE `ole_terms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_usermeta`
--

DROP TABLE IF EXISTS `ole_usermeta`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`)
) ENGINE=MyISAM AUTO_INCREMENT=47 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_usermeta`
--

LOCK TABLES `ole_usermeta` WRITE;
/*!40000 ALTER TABLE `ole_usermeta` DISABLE KEYS */;
INSERT INTO `ole_usermeta` VALUES (1,1,'first_name',''),(2,1,'last_name',''),(3,1,'nickname','admin'),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'comment_shortcuts','false'),(7,1,'admin_color','fresh'),(8,1,'use_ssl','0'),(9,1,'aim',''),(10,1,'yim',''),(11,1,'jabber',''),(12,1,'ole_capabilities','a:1:{s:13:\"administrator\";s:1:\"1\";}'),(13,1,'ole_user_level','10'),(14,1,'ole_dashboard_quick_press_last_post_id','3'),(15,2,'first_name','Ole'),(16,2,'last_name','Michelsen'),(17,2,'nickname','olemichelsen'),(18,2,'description',''),(19,2,'rich_editing','true'),(20,2,'comment_shortcuts','false'),(21,2,'admin_color','classic'),(22,2,'use_ssl','0'),(23,2,'aim',''),(24,2,'yim',''),(25,2,'jabber','ole@michelsen.dk'),(26,2,'ole_capabilities','a:1:{s:13:\"administrator\";s:1:\"1\";}'),(27,2,'ole_user_level','10'),(28,1,'managenav-menuscolumnshidden','a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}'),(29,1,'metaboxhidden_nav-menus','a:2:{i:0;s:8:\"add-post\";i:1;s:12:\"add-post_tag\";}'),(30,2,'ole_dashboard_quick_press_last_post_id','361'),(31,2,'ole_user-settings','m5=o&m8=o&m7=c&m9=o&m6=c&hidetb=1&editor=html&m0=o&m2=c&m3=c&m1=o&wplink=1&m4=o&imgsize=large&urlbutton=none&align=none&m10=o&m11=o'),(32,2,'ole_user-settings-time','1347575038'),(33,2,'closedpostboxes_post','a:3:{i:0;s:10:\"postcustom\";i:1;s:16:\"commentstatusdiv\";i:2;s:9:\"authordiv\";}'),(34,2,'metaboxhidden_post','a:1:{i:0;s:7:\"slugdiv\";}'),(35,2,'show_admin_bar_front','true'),(45,2,'dismissed_wp_pointers','wp330_toolbar,wp330_media_uploader'),(37,2,'managenav-menuscolumnshidden','a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}'),(38,2,'metaboxhidden_nav-menus','a:2:{i:0;s:8:\"add-post\";i:1;s:12:\"add-post_tag\";}'),(39,2,'closedpostboxes_nav-menus','a:0:{}'),(40,2,'nav_menu_recently_edited','21'),(41,2,'closedpostboxes_dashboard','a:0:{}'),(42,2,'metaboxhidden_dashboard','a:0:{}'),(43,2,'meta-box-order_dashboard','a:4:{s:6:\"normal\";s:104:\"dashboard_right_now,dashboard_recent_comments,dashboard_incoming_links,dashboard_plugins,yoast_db_widget\";s:4:\"side\";s:83:\"dashboard_quick_press,dashboard_recent_drafts,dashboard_primary,dashboard_secondary\";s:7:\"column3\";s:0:\"\";s:7:\"column4\";s:0:\"\";}'),(44,2,'screen_layout_dashboard','2'),(46,2,'addthis_nag_username_ignore','true');
/*!40000 ALTER TABLE `ole_usermeta` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ole_users`
--

DROP TABLE IF EXISTS `ole_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ole_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(64) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(60) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ole_users`
--

LOCK TABLES `ole_users` WRITE;
/*!40000 ALTER TABLE `ole_users` DISABLE KEYS */;
INSERT INTO `ole_users` VALUES (1,'admin','$P$BxqxJCN3Tpi0A61BFluq1rYjgtlaF4/','admin','ole.michelsen@gmail.com','','2010-10-21 07:38:38','',0,'admin'),(2,'olemichelsen','$P$Bsng7y1N.Jm8uZFE2gbpq49px5IkmF0','olemichelsen','ole@michelsen.dk','http://ole.michelsen.dk','2010-10-21 08:06:32','',0,'Ole Michelsen');
/*!40000 ALTER TABLE `ole_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2012-10-21 11:29:37
