p
  | I have always liked the concept of static site generation for sites, which really doesn’t need constant updates through the day (like mine). So recently I decided to check out the&nbsp;
  a(href='https://www.staticgen.com/', target='_blank') vast amount of offerings
  | , and fell upon&nbsp;
  a(href='http://harpjs.com/', target='_blank') Harp
  | .
p
  | In this brief article I will show how to make a&nbsp;
  a(href='https://support.google.com/webmasters/answer/185417', target='_blank') microdata breadcrumb
  | &nbsp;trail using the&nbsp;
  a(href='http://jade-lang.com/', target='_blank') Jade templating engine
  | . For those new to Jade, like me, it will show a few of the key features in Jade.

// more

blockquote
  p
    | A microdata breadcrumb trail is metadata markup of a series of links, which is read by Google and presented in the search results.

p
  | So let’s start coding. Our breadcrumbs will be implemented as a partial, so let’s make a file called&nbsp;
  code
    /public/_shared/breadcrumbs.jade
  | .
p
  | First we add a&nbsp;
  a(href='http://jade-lang.com/reference/mixins/', target='_blank') mixin
  | , which is a piece of saved code or markup, that we can reuse. We will create a Jade template for one breadcrumb link, which has a URL and a title:

pre
  code.
    mixin breadcrumb(url, title)
       span(itemscope, itemtype='http://data-vocabulary.org/Breadcrumb')
       a(href='#{ url }', itemprop='url')
       span(itemprop='title')= title
p
  | Now we can use this mixin to loop through the current path, which is made available for us by Harp in a global variable&nbsp;
  a(href='http://harpjs.com/docs/development/current', target='_blank') current
  | :
pre
  code.
    +breadcrumb('/', 'Home')
      | &amp;rsaquo;&amp;nbsp;
      each item in current.path.slice(0, -1)
         +breadcrumb(item, item)
         | &amp;rsaquo;&amp;nbsp;
      span.current= current.source
p
  | You will notice that we use .slice() on the path, and that is to remove the current page, as we want to print this in plain text. This will create a breadcrumb trail that looks like this:
p.indent
  span(style='color: #00f; text-decoration: underline;') Home
  | ›&nbsp;
  span(style='color: #00f; text-decoration: underline;') articles
  | &nbsp;› Harp
p
  | Mind you we are just writing out the path, so the title will probably be in lowercase. We can fix that with a Jade function:
pre
  code.jade.
    - function capitalize(string) {
      - return string.charAt(0).toUpperCase() + string.slice(1);
    - }
p
  | Now we are done, so let’s look at the final result:
pre
  code.
    - function capitalize(string) {
      - return string.charAt(0).toUpperCase() + string.slice(1);
    - }

    mixin breadcrumb(url, title)
       span(itemscope, itemtype='http://data-vocabulary.org/Breadcrumb')
       a(href='#{ url }', itemprop='url')
       span(itemprop='title')= title

    +breadcrumb('/', 'Home')
    | &amp;rsaquo;&amp;nbsp;
    each item in current.path.slice(0, -1)
       +breadcrumb(item, capitalize(item))
       | &amp;rsaquo;&amp;nbsp;
    span.current= capitalize(current.source)
p
  | Now our breadcrumbs should look like this:
p.indent
  span(style='color: #00f; text-decoration: underline;') Home
  | ›&nbsp;
  span(style='color: #00f; text-decoration: underline;') Articles
  | &nbsp;› Harp
p
  | So now our partial is done, we can use it anywhere in our code. So let’s add it somewhere in our&nbsp;
  code
    /public/_layout.jade
  | &nbsp;file:
pre
  code.
    p#sitemappath
      != partial('../_shared/breadcrumbs')
p
  | Thanks for reading. This was my first peek into Harp, but I think the project looks promising, and looking forward to seeing the platform mature.
