style.
  #minifier {
    position: relative;
    opacity: .5;
  }
  #disabled-label {
    position: absolute;
    top: 70px;
    left: 150px;
    padding: 1em;
    background: red;
    color: white;
    font-weight: bold;
  }

p
  | This web page compresses Style Sheets and JavaScripts, by rewriting the code to a more compact form. This is called <i>minifying</i>, and is based on safe renaming of variables within a defined scope (for JavaScript), and elimination of line-breaks and unneeded whitespace.
p
  | I have described the&nbsp;
  a(href='../blog/site-optimization.html#minify') savings achieved
  | &nbsp;by this in a previous article, and it is a technique which quickly has become standard practice in recent years. Normally you would apply a minifier as a part of your build scripts, but for small sites and/or testing I have found it very useful to have a quick reference tool available.
p
  | Just paste your <abbr title='Cascading Style Sheet'>CSS</abbr> or <abbr title='JavaScript'>JS</abbr> into the input-field below, and select the engine you would like to use. I normally use&nbsp;
  a(href='http://developer.yahoo.com/yui/compressor/', rel='external', target='_blank') YUI Compressor
  | , but my <i>very</i> informal tests actually gives a small lead to&nbsp;
  a(href='http://ajaxmin.codeplex.com/', rel='external', target='_blank') Microsoft AJAX Minifier
  | , both with regards to speed and the attained compression.

section
  form#minifier
    .row
      .col
        p
          label(for='input')
            b Input:
          br
          textarea#input.text(autofocus='autofocus', name='input', style='width:440px;height:120px;font-size:smaller;', tabindex='1', required='required')
      .col
        p
          label(for='output')
            b Output:
          br
          textarea#output.text(name='output', style='width:440px;height:120px;font-size:smaller;', readonly='readonly', tabindex='5')
      p
        span#resultstats.floatright
        select#datatype(name='datatype', tabindex='2')
          option(value='css') CSS
          option(value='js') JavaScript
        select#engine(name='engine', tabindex='3')
          option(value='ms') Microsoft AJAX Minifier
          option(value='yui') YUI Compressor
        input.button(type='submit', value='Compress', tabindex='4')
        img#loader(style='display:none;', src='/images/loading.gif', alt='Loading...', height='11', width='16')

section
  h3 Implementation with AJAX and cURL
  p
    | Since the most popular minifiers are "real" programs, running them from a web page requires some trickery.
    | After a bit of research, I found the following solutions for implementing my minifier tool:
  dl
    dt
      | Executing the Java program directly from <abbr title='PHP: Hypertext Preprocessor'>PHP</abbr>
    dd
      | Though you <i>can</i> execute Java programs from PHP (or EXE from ASP.NET), it usually requires security permissions which are normally not granted on standard web hosting
      sup
        a(href='#footnote1') 1
      | .
      br
      br
    dt
      | Perform a POST to .NET code using AJAX
      sup
        a(href='#footnote2') 2
    dd
      | The minifiers I use are available in DLL versions, which can run under ASP.NET. However since my server is running Linux/Apache, this requires hosting on another server/domain, which means we can't readily use <abbr title='Asynchronous JavaScript and XML'>AJAX</abbr> due to security constraints of the&nbsp;
      a(href='http://en.wikipedia.org/wiki/Same_origin_policy', rel='external', target='_blank') same origin policy
      | .
  h4 Proxy the POST with PHP
  p
    | To circumvent the <abbr title='Cross-Site Scripting'>XSS</abbr> security restrictions mentioned above, we can proxy the call with PHP using&nbsp;
    a(href='http://php.net/manual/en/book.curl.php', rel='external', target='_blank')
      code curl()
    | . This enables us to POST to a local PHP script, which will then forward the request to the ASP.NET server and fetch the results server-side.
    br
    | This is a common work-around, which is still secure if you observe proper input and host checking, and the posting will now work seamlessly with AJAX.

aside#footnotes
  ol
    li#footnote1
      span
        | Basing my tools and implementations on root access to the server is a no-go, since I'd like my personal site to be portable across standard hosting options, which are usually Linux/Apache based and restricted to a handful of standard modules.
    li#footnote2
      span
        | This could also have been done with regular POST's, but using AJAX and proxying provides a cleaner interface with the ASP.NET server. Furthermore, it allows for an easy switch to a "real" web service at a later stage and is more fun anyhow.

script(src='#{ libs.jquery }')
script.
  $(document).ready(function() {
    $('#minifier').submit(function() {

      // Disable the submit button
      $('input[type=submit]').prop('disabled', true);

      // Display the loading animation
      $('#loader').toggle();

      // Serialize and post the form data to the proxy
      var formdata = $(this).serialize();
      $.post('/api/minifier-proxy.php'
        , formdata
        , function(data) {
          // Write result to output field
          $('#output').val(data).select();

          // Write stats
          var sizeInput = $('#input').val().length;
          var sizeOutput = data.length;
          var percent = Math.round((sizeOutput/sizeInput-1)*100);
          $('#resultstats').html('Reduced input size from '+sizeInput+' to '+sizeOutput+' ('+percent+'%)');

          // Enable the submit button
          $('input[type=submit]').prop('disabled', false);

          // Hide the loading animation
          $('#loader').toggle();
        }
      );
      return false;
    }).append('<div id="disabled-label">Currently disabled</div>');
    $('input, select, textarea').prop('disabled', true);
  });
