p
  | This online tool encodes or decodes a string using&nbsp;
  abbr(title='Uniform Resource Identifiers') URI
  sup
    a(href='#footnote1') 1
  | &nbsp;encoding. URI encoding is used when placing text in a query string, to avoid it being confused with the URI itself. It's commonly used in dynamic server pages, to pass content and instructions to other pages.
p
  | URI encoding replaces "unsafe" characters with '
  code %
  | ' followed by their hex equivalent. 7-bit ASCII alphanumerics and the characters "
  code -._~
  | " are safe and does not need encoding, as defined in&nbsp;
  a(href='http://www.ietf.org/rfc/rfc3986.txt', rel='external', target='_blank') RFC3986
  | . Unicode characters and 8-bit ASCII characters are normally first encoded using UTF-8, as defined in&nbsp;
  a(href='http://www.ietf.org/rfc/rfc2279.txt', rel='external', target='_blank') RFC2279
  | .
section
  form#urlform
    table
      tr
        td
          label(for='unencoded')
            b Plain:
        td
          input#unencoded.text(autofocus, style='width:500px', tabindex='1', value='"Ole\'s bil k√∏rer hundred km/t, derudaf"')
          | &nbsp;
          input.button(value='Encode', onclick='return process("unencoded","encoded",true);', tabindex='2', type='submit')
      tr
        td
          label(for='encoded')
            b Encoded:
        td
          input#encoded.text(style='width:500px', tabindex='3', value='%22Ole\'s%20bil%20k%C3%B8rer%20hundred%20km%2Ft%2C%20derudaf%22')
          | &nbsp;
          input.button(value='Decode', onclick='return process("encoded","unencoded",false);', tabindex='4', type='submit')
section
  h3 JavaScript functions
  p
    | The functions used are&nbsp;
    code encodeURIComponent()
    | &nbsp;and&nbsp;
    code decodeURIComponent()
    | , but there are also alternative JavaScript functions often (mistankingly) used for the same type of encoding:
  dl
    dt
      code escape()
      | ,&nbsp;
      code unesacpe()
    dd
      | Converts special (non-Latin) characters from ASCII to Hex and back.
      br
      | Does not encode&nbsp;
      code @*/+
      br
      br
    dt
      code encodeURI()
      | ,&nbsp;
      code decodeURI()
    dd
      | Encodes special characters, though&nbsp;
      i not
      | &nbsp;the separators which have meaning in a normal URI.
      br
      | Does not encode&nbsp;
      code ~!@#$&amp;*()=:/,;?+'
      br
      br
    dt
      code encodeURIComponent()
      | ,&nbsp;
      code decodeURIComponent()
    dd
      | Encodes special characters as well as characters that have special meaning in a URI.
      br
      | Does not encode&nbsp;
      code ~!*()'
  p
    | In conclusion,&nbsp;
    code escape()
    | &nbsp;should be avoided altogether, since it does not encode the + character, nor can it handle non-ASCII characters correctly.&nbsp;
    code encodeURI()
    | &nbsp;is only for encoding an entire URI at once, e.g. for passing safely between systems, and will not work for query string parts since the URI separators are not encoded.
    br
    | Our winner therefore is&nbsp;
    code encodeURIComponent()
    | , since most of the URI encoding people need are with the purpose of encoding elements to a query string, where they should not be mistanken for part of the URI.
section#footnotes
  ol
    li#footnote1
      span
        | The term <abbr title='Uniform Resource Identifiers'>URI</abbr> should generally be used in place of <abbr title='Uniform Resource Locator'>URL</abbr>, which refers to a subset the common URI protocols and has been&nbsp;
        a(href='http://www.w3.org/TR/uri-clarification/#contemporary', rel='external') deprecated
        | .

script.
  function process(inputField, outputField, encode) {
    var elmInput = document.getElementById(inputField);
    var elmOutput = document.getElementById(outputField);
    elmOutput.value = encode ? encodeURIComponent(elmInput.value) : decodeURIComponent(elmInput.value);
    elmOutput.select();
    return false;
  }

